{
  "primitives": [
    "Void",
    "Integer",
    "Real",
    "Boolean",
    "Text",
    "Vec2",
    "Vec3",
    "Int3",
    "Ident"
  ],
  "classes": {
    "CAchievementsAchievement": {
      "props": {
        "Ident": [
          "UserId"
        ],
        "CAchievementsAchievementDesc": [
          "AchievementDesc"
        ]
      }
    },
    "CAchievementsAchievementDesc": {
      "props": {
        "Text": [
          "TitleId",
          "DisplayName",
          "Description",
          "IconUrl"
        ]
      }
    },
    "CAchievementsEvent": {
      "props": {
        "EType": [
          "Type"
        ],
        "CAchievementsAchievement": [
          "Achievement"
        ]
      }
    },
    "CAchievementsManager": {
      "props": {
        "CAchievementsEvent[]": [
          "PendingEvents"
        ],
        "CAchievementsAchievement[]": [
          "Achievements"
        ],
        "CAchievementsStat[]": [
          "Stats"
        ],
        "CAchievementsAchievementDesc[]": [
          "AchivementsDescriptions"
        ],
        "CAchievementsStatDesc[]": [
          "StatDescriptions"
        ]
      },
      "methods":{
        "SendEvent":{
          "params": [
            {
              "identifier": "Ident",
              "argument" : "UserId"
            },
            {
              "identifier": "Text",
              "argument": "Mnemo"
            },
            {
              "identifier": "Integer[]",
              "argument": "Params"
            }
          ],
          "returns" : "Void"
        }
      }
    },
    "CAchievementsStat":{
      "props": {
        "Ident":[
          "UserId"
        ],
        "CAchievementsStatDesc":[
          "StatDesc"
        ],
        "Integer":[
          "Value"
        ]
      }
    },
    "CAchievementsStatDesc": {
      "props": {
        "Text":[
          "TitleId",
          "DisplayName",
          "Description"
        ]
      }
    },
    "CAnchorData": {
      "props": {
        "Text": [
          "DefaultTag",
          "Tag"
        ],
        "Integer": [
          "DefaultOrder",
          "Order"
        ],
        "CBlock": [
          "Block"
        ],
        "CItemAnchor": [
          "Item"
        ]
      }
    },
    "CAnimManager": {
      "methods": {
        "Add": {
          "params": [
            {
              "identifier": "CMlControl",
              "argument": "Control"
            },
            {
              "identifier": "Text",
              "argument": "XmlTarget"
            },
            {
              "identifier": "Integer",
              "argument": "StartTime"
            },
            {
              "identifier": "Integer",
              "argument": "Duration"
            },
            {
              "identifier": "EAnimManagerEasing",
              "argument": "EasingFunc"
            }
          ],
          "returns": "Void"
        },
        "AddChain": {
          "params": [
            {
              "identifier": "CMlControl",
              "argument": "Control"
            },
            {
              "identifier": "Text",
              "argument": "XmlTarget"
            },
            {
              "identifier": "Integer",
              "argument": "Duration"
            },
            {
              "identifier": "EAnimManagerEasing",
              "argument": "EasingFunc"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CAnyEditorPlugin": {
      "props": {
        "CManiaAppEvent[]": [
          "PendingEvents"
        ],
        "CEditorModule": [
          "ModuleEditor"
        ],
        "CEditorMesh": [
          "MeshEditor"
        ],
        "CEditorEditor": [
          "EditorEditor"
        ],
        "EInteractionStatus": [
          "InteractionStatus"
        ]
      }
    },
    "CAudioManager": {
      "props": {
        "CAudioSource[]": [
          "Sounds"
        ],
        "Boolean": [
          "ForceEnableMusic"
        ],
        "Real": [
          "LimitMusicVolumedB",
          "LimitSceneSoundVolumedB",
          "LimitUiSoundVolumedB"
        ]
      },
      "methods": {
        "CreateSound": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Url"
            },
            {
              "identifier": "Real",
              "argument": "VolumedB"
            },
            {
              "identifier": "Boolean",
              "argument": "IsMusic"
            },
            {
              "identifier": "Boolean",
              "argument": "IsLooping"
            },
            {
              "identifier": "Boolean",
              "argument": "IsSpatialized"
            }
          ],
          "returns": "CAudioSource"
        },
        "DestroySound": {
          "params": [
            {
              "identifier": "CAudioSource",
              "argument": "Sound"
            }
          ],
          "returns": "Void"
        },
        "PlaySoundEvent": {
          "params": [
            {
              "identifier": "ELibSound",
              "argument": "Sound"
            },
            {
              "identifier": "Integer",
              "argument": "SoundVariant"
            },
            {
              "identifier": "Real",
              "argument": "VolumedB"
            },
            {
              "identifier": "Integer",
              "argument": "Delay"
            }
          ],
          "returns": "Void"
        },
        "ClearAllDelayedSoundsEvents": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CAudioSource": {
      "props": {
        "Boolean": [
          "IsPlaying",
          "DownloadInProgress"
        ],
        "Real": [
          "Volume",
          "FadeDuration",
          "VolumedB",
          "Pitch",
          "PlayCursor",
          "PlayLength"
        ],
        "Vec3": [
          "RelativePosition",
          "PanRadiusLfe"
        ]
      },
      "methods": {
        "Play": {
          "params": [],
          "returns": "Void"
        },
        "Stop": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CAudioSourceMusic": {
      "props": {
        "Real[]": [
          "Tracks_Volume",
          "Tracks_VolumedB",
          "Tracks_Length"
        ],
        "Text[]": [
          "Tracks_Name"
        ],
        "Integer": [
          "Tracks_Count",
          "BeatsPerBar"
        ],
        "Real": [
          "BeatsPerMinute",
          "BeatDuration",
          "LPF_CutoffRatio",
          "LPF_Q",
          "HPF_CutoffRatio",
          "HPF_Q",
          "FadeTracksDuration",
          "FadeFiltersDuration"
        ],
        "EUpdateMode": [
          "UpdateMode"
        ],
        "Boolean": [
          "Dbg_ForceIntensity",
          "Dbg_ForceSequential",
          "Dbg_ForceRandom",
          "UseNewImplem"
        ]
      }
    },
    "CBadge": {
      "props": {
        "Vec3": [
          "PrimaryColor"
        ],
        "Text": [
          "SkinName"
        ],
        "Text[]": [
          "Layers"
        ]
      },
      "methods": {
        "StickerSlot_Get": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Slot"
            }
          ],
          "returns": "Text"
        },
        "StickerSlot_Set": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Slot"
            },
            {
              "identifier": "Text",
              "argument": "Sticker"
            }
          ],
          "returns": "Void"
        },
        "StickerSlot_Clear": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CBadgeEditor": {
      "props": {
        "CBadge": [
          "DisplayCurrentBadge"
        ],
        "Vec2": [
          "DisplayPosN",
          "DisplaySize"
        ],
        "Real": [
          "DisplayFoV",
          "CameraTransitionDuration",
          "MeshRotation_MaxSpeed",
          "MeshRotation_Acceleration"
        ],
        "Ident": [
          "DisplayCurrentMeshId"
        ],
        "Ident[]": [
          "MeshIds"
        ],
        "CBadge[]": [
          "Badges"
        ]
      },
      "methods": {
        "Leave": {
          "params": [],
          "returns": "Void"
        },
        "MeshId_Next": {
          "params": [],
          "returns": "Void"
        },
        "MeshId_Previous": {
          "params": [],
          "returns": "Void"
        },
        "BadgeCreate": {
          "params": [],
          "returns": "CBadge"
        },
        "BadgeDestroy": {
          "params": [
            {
              "identifier": "CBadge",
              "argument": "Badge"
            }
          ],
          "returns": "Void"
        },
        "BadgeCopy": {
          "params": [
            {
              "identifier": "CBadge",
              "argument": "Source"
            },
            {
              "identifier": "CBadge",
              "argument": "Destination"
            }
          ],
          "returns": "Void"
        },
        "BadgeReadFromProfile": {
          "params": [
            {
              "identifier": "CBadge",
              "argument": "Badge"
            },
            {
              "identifier": "Ident",
              "argument": "UserId"
            }
          ],
          "returns": "Void"
        },
        "BadgeWriteToProfile": {
          "params": [
            {
              "identifier": "CBadge",
              "argument": "Badge"
            },
            {
              "identifier": "Ident",
              "argument": "UserId"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CBadgeManager": {
      "props": {
        "CBadge[]": [
          "Badges"
        ]
      },
      "methods": {
        "BadgeCreate": {
          "params": [],
          "returns": "CBadge"
        },
        "BadgeDestroy": {
          "params": [
            {
              "identifier": "CBadge",
              "argument": "Badge"
            }
          ],
          "returns": "Void"
        },
        "BadgeCopy": {
          "params": [
            {
              "identifier": "CBadge",
              "argument": "Source"
            },
            {
              "identifier": "CBadge",
              "argument": "Destination"
            }
          ],
          "returns": "Void"
        },
        "BadgeReadFromProfile": {
          "params": [
            {
              "identifier": "CBadge",
              "argument": "Badge"
            },
            {
              "identifier": "Ident",
              "argument": "UserId"
            }
          ],
          "returns": "Void"
        },
        "BadgeWriteToProfile": {
          "params": [
            {
              "identifier": "CBadge",
              "argument": "Badge"
            },
            {
              "identifier": "Ident",
              "argument": "UserId"
            }
          ],
          "returns": "Void"
        },
        "ProfileIsReady": {
          "param": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            }
          ],
          "returns": "Boolean"
        }
      }
    },
    "CBlock": {
      "props": {
        "Integer": [
          "BlockScriptId"
        ],
        "Boolean": [
          "CanHaveAnchor"
        ],
        "Int3": [
          "Coord"
        ],
        "CardinalDirections": [
          "Direction"
        ],
        "CBlockUnit[]": [
          "BlockUnits"
        ],
        "CBlockModel": [
          "BlockModel"
        ]
      },
      "methods": {
        "UseDefaultAnchor": {
          "params": [],
          "returns": "Void"
        },
        "UseCustomAnchor": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CBlockModel": {
      "props": {
        "Text": [
          "Name"
        ],
        "Boolean": [
          "IsRoad",
          "IsTerrain",
          "isPodium",
          "NoRespawn"
        ],
        "EWayPointType": [
          "WaypointType"
        ],
        "CBlockModelVariantGround": [
          "VariantGround"
        ],
        "CBlockModelVariantAir": [
          "VariantAir"
        ]
      }
    },
    "CBlockModelClip": {
    },
    "CBlockModelVariant": {
      "props": {
        "Text": [
          "Name"
        ],
        "Boolean": [
          "IsAllUnderground",
          "IsPartUnderground"
        ],
        "Int3": [
          "Size",
          "OffsetBoundingBoxMin",
          "OffsetBoundingBoxMax"
        ],
        "CBlockUnitModel[]": [
          "BlockUnitModels"
        ]
      }
    },
    "CBlockUnit": {
      "props": {
        "Int3": [
          "Offset"
        ],
        "CBlockUnitModel": [
          "BlockUnitModel"
        ],
        "CBlock": [
          "Block"
        ]
      }
    },
    "CBlockUnitModel": {
      "props": {
        "Int3": [
          "Offset"
        ],
        "CBlockModelClip[]": [
          "Clips"
        ]
      }
    },
    "CCampaign": {
      "props": {
        "Text": [
          "CampaignId",
          "ScoreContext"
        ],
        "CMapGroup[]": [
          "MapGroups"
        ],
        "Boolean": [
          "OfficialRecordEnabled"
        ]
      },
      "methods": {
        "GetMapGroupCount": {
          "params": [],
          "returns": "Integer"
        },
        "GetMapGroup": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "Index"
            }
          ],
          "return": "CMapGroup"
        },
        "GetNextMap": {
          "params": [
            {
              "identifier": "CMapInfo",
              "argument": "CurrentMapInfo"
            }
          ]
        }
      }
    },
    "CClient": {
      "props": {
        "CUser": [
          "User"
        ],
        "CUIConfig": [
          "UI"
        ],
        "Boolean": [
          "IsConnectedToMasterServer",
          "IsSpectator"
        ],
        "Text": [
          "ClientVersion",
          "ClientTitleVersion"
        ],
        "Integer": [
          "IdleDuration"
        ]
      }
    },
    "CCollector": {
      "props": {
        "Text": [
          "Name",
          "PageName"
        ],
        "Integer": [
          "InterfaceNumber"
        ],
        "CImage": [
          "Icon"
        ]
      }
    },
    "CDataFileMgr": {
      "props": {
        "CTaskResult[]": [
          "TaskResults"
        ],
        "CCampaign[]": [
          "Campaigns"
        ],
        "CGhost[]": [
          "Ghosts"
        ]
      },
      "methods": {
        "TaskResult_Release": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "TaskId"
            }
          ],
          "returns": "Void"
        },
        "Campaign_Get": {
          "params": [
            {
              "identifier": "Text",
              "argument": "CampaignId"
            }
          ],
          "returns": "CCampaign"
        },
        "Map_RefreshFromDisk": {
          "params": [],
          "returns": "Void"
        },
        "Map_GetUserList": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            }
          ],
          "returns": "CTaskResult_MapList"
        },
        "Map_GetGameList": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Path"
            },
            {
              "identifier": "Boolean",
              "argument": "Flatten"
            }
          ],
          "returns": "CTaskResult_MapList"
        },
        "Map_GetFilteredGameList": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "Scope"
            },
            {
              "identifier": "Text",
              "argument": "Path"
            },
            {
              "identifier": "Boolean",
              "argument": "Flatten"
            }
          ],
          "returns": "CTaskResult_MapList"
        },
        "Ghost_Release": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "GhostId"
            }
          ],
          "returns": "Void"
        },
        "Ghost_Download": {
          "params": [
            {
              "identifier": "Text",
              "argument": "FileName"
            },
            {
              "identifier": "Text",
              "argument": "Url"
            }
          ],
          "returns": "CTaskResult_Ghost"
        },
        "Replay_RefreshFromDisk": {
          "params": [],
          "returns": "Void"
        },
        "Replay_GetGameList": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Path"
            },
            {
              "identifier": "Boolean",
              "argument": "Flatten"
            }
          ],
          "returns": "CTaskResult_ReplayList"
        },
        "Replay_GetFilteredGameList": {
          "params": [
            {
              "identifier" : "Integer",
              "argument": "Scope"
            },
            {
              "identifier": "Text",
              "argument": "Path"
            },
            {
              "identifier": "Boolean",
              "argument": "Flatten"
            }
          ],
          "returns": "CTaskResult_ReplayList"
        },
        "Replay_Load": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Path"
            }
          ],
          "returns": "CTaskResult_GhostList"
        },
        "Replay_Save": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Path"
            },
            {
              "identifier": "CMap",
              "argument": "Map"
            },
            {
              "identifier": "CGhost",
              "argument": "Ghost"
            }
          ],
          "returns": "CTaskResult"
        },
        "Media_GetGameList": {
          "params": [
            {
              "identifier": "EMediaType",
              "argument": "Type"
            },
            {
              "identifier": "Text",
              "argument": "Path"
            },
            {
              "identifier": "Boolean",
              "argument": "Flatten"
            }
          ],
          "returns": "CTaskResult_FileList"
        },
        "Media_GetFilteredGameList": {
          "params": [
            {
              "identifier": "EMediaType",
              "argument": "Type"
            },
            {
              "identifier": "Integer",
              "argument": "Scope"
            },
            {
              "identifier": "Text",
              "argument": "Path"
            },
            {
              "identifier": "Boolean",
              "argument": "Flatten"
            }
          ],
          "returns": "CTaskResult_FileList"
        },
        "GameMode_GetGameList": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "Scope"
            },
            {
              "identifier": "Text",
              "argument": "Path"
            },
            {
              "identifier": "Boolean",
              "argument": "Flatten"
            }
          ],
          "returns": "CTaskResult_GameModeList"
        },
        "Pack_DownloadOrUpdate": {
          "params": [
            {
              "identifier": "Text",
              "argument": "DisplayName"
            },
            {
              "identifier": "Text",
              "argument": "Url"
            }
          ],
          "returns": "CTaskResult"
        }
      }
    },
    "CEditorEditor":{
      "props": {
        "Boolean": [
          "Bindings_RequestInput_Done"
        ],
        "Text[]": [
          "BindingContexts",
          "RequestedContextBindings"
        ],
        "CEditorEvent[]": [
          "PendingEvents"
        ]
      },
      "methods": {
        "Bindings_AddContext": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ContextName"
            }
          ],
          "returns": "Void"
        },
        "Bindings_AddBinding": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ContextName"
            },
            {
              "identifier": "Text",
              "argument": "BindingScriptId"
            },
            {
              "identifier": "Text",
              "argument": "BindingDisplayName"
            }
          ],
          "returns": "Void"
        },
        "Bindings_RemoveContext": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ContextName"
            }
          ],
          "returns": "Void"
        },
        "Bindings_RemoveBinding": {
          "params": [
            {
              "identifier": "Text",
              "argument": "BindingName"
            }
          ],
          "returns": "Void"
        },
        "Bindings_RequestInput": {
          "params": [
            {
              "identifier": "Text",
              "argument": "BindingName"
            }
          ],
          "returns": "Void"
        },
        "Bindings_SetBindingScriptId": {
          "params": [
            {
              "identifier": "Text",
              "argument": "BindingScriptId"
            },
            {
              "identifier": "Text",
              "argument": "NewBindingScriptId"
            }
          ],
          "returns": "Void"
        },
        "Bindings_SetBindingDisplayName": {
          "params": [
            {
              "identifier": "Text",
              "argument": "BindingScriptId"
            },
            {
              "identifier": "Text",
              "argument": "BindingDisplayName"
            }
          ],
          "returns": "Void"
        },
        "Bindings_SetContextName": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ContextName"
            },
            {
              "identifier": "Text",
              "argument": "NewContextName"
            }
          ],
          "returns": "Void"
        },
        "Bindings_GetContextBindings": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ContextName"
            }
          ],
          "returns": "Void"
        },
        "Bindings_GetBindingsActionName": {
          "params": [
            {
              "identifier": "Text",
              "argument": "BindingName"
            }
          ],
          "returns": "Text"
        },
        "Bindings_GetBindingsDisplayName": {
          "params": [
            {
              "identifier": "Text",
              "argument": "BindingName"
            }
          ],
          "returns": "Text"
        }
      }
    },
    "CEditorEvent": {
      "props": {
        "Type": [
          "Type"
        ]
      }
    },
    "CEditorMainPlugin": {
      "props": {
        "CEditorPluginHandle[]": [
          "Plugins"
        ]
      },
      "methods": {
        "Help_Open": {
          "params": [],
          "returns": "Void"
        },
        "Help_Close": {
          "params": [],
          "returns": "Void"
        },
        "GetPluginHandle": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Name"
            }
          ],
          "returns": "CEditorPluginHandle"
        },
        "SendPluginEvent": {
          "params": [
            {
              "identifier": "CEditorPluginHandle",
              "argument": "Handle"
            },
            {
              "identifier": "Text",
              "argument": "Type"
            },
            {
              "identifier": "Text[]",
              "argument": "Data"
            }
          ],
          "returns": "Void"
        },
        "Context_SetActive": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ContextName"
            },
            {
              "identifier": "Boolean",
              "argument": "IsActive"
            }
          ],
          "returns": "Void"
        },
        "Context_IsActive": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ContextName"
            }
          ],
          "returns": "Boolean"
        },
        "Binding_IsActive": {
          "params": [
            {
              "identifier": "Text",
              "argument": "BindingName"
            }
          ],
          "returns": "Boolean"
        },
        "Plugin_SetClearance": {
          "params": [
            {
              "identifier": "CEditorPluginHandle",
              "argument": "Handle"
            },
            {
              "identifier": "EMeshEditorAPI",
              "argument": "API"
            },
            {
              "identifier": "Boolean",
              "argument": "IsAllowed"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CEditorMesh": {
      "props": {
        "Boolean": [
          "GoToMaterialEditor",
          "IsCreateMaterial",
          "Tmp_UseParts",
          "EditionBox_IsPlaneOriented",
          "DisplayVertices",
          "DisplayFaces",
          "DisplayJoints",
          "GripSnap_IsActive",
          "Display_HideElemsByDistance_IsActive",
          "IsExperimental"
        ],
        "Integer": [
          "VertexCount",
          "EdgeCount",
          "FaceCount",
          "RotationStep",
          "MaterialsUpdateId",
          "Material_Atlas_SelectedSubTexIndex",
          "CreationElemsCount",
          "Display_HideElemsByDistance_Distance",
          "PrefabNamesUpdateId"
        ],
        "Real": [
          "Scale",
          "Step",
          "Size",
          "RotationValue",
          "ScalingStep",
          "ScalingRatio",
          "Display_HideElemsByDistance_Opacity"
        ],
        "EEdgesDisplay": [
          "DisplayEdges"
        ],
        "Ident[]": [
          "MaterialIds"
        ],
        "Text[]": [
          "MaterialNames",
          "PrefabNames"
        ],
        "EInteraction": [
          "CurrentInteraction"
        ],
        "Ident": [
          "SelectionSet"
        ],
        "CEditorEvent[]": [
          "PendingEvents"
        ]
      },
      "methods": {
        "EditionBox_SetScale": {
          "params": [
            {
              "identifier": "Real",
              "argument": "Scale"
            }
          ],
          "returns": "Void"
        },
        "EditionBox_OrientPlane": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "EditedMesh_Clear": {
          "params": [],
          "returns": "Void"
        },
        "EditedMesh_Simplify": {
          "params": [],
          "returns": "Void"
        },
        "EditedMesh_Lod": {
          "params": [
            {
              "identifier": "Real",
              "argument": "FacesRatio"
            }
          ],
          "returns": "Void"
        },
        "UVUnwrap": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            },
            {
              "identifier": "ETexCoordLayer",
              "argument": "ETexCoordLayer"
            }
          ],
          "returns": "Void"
        },
        "Undo": {
          "params": [],
          "returns": "Void"
        },
        "Redo": {
          "params": [],
          "returns": "Void"
        },
        "SwitchPlane": {
          "params": [],
          "returns": "Void"
        },
        "GridSnap_SetActive": {
          "params": [
            {
              "identifier": "Boolean",
              "argument": "IsActive"
            }
          ],
          "returns": "Void"
        },
        "PickInfo_GetNormal": {
          "params": [],
          "returns": "Vec3"
        },
        "PickInfo_GetPosition": {
          "params": [],
          "returns": "Vec3"
        },
        "PickInfo_GetEdgeLength": {
          "params": [],
          "returns": "Real"
        },
        "PickInfo_GetNextVertexPosition": {
          "params": [],
          "returns": "Vec3"
        },
        "PickInfo_GetMaterial": {
          "params": [],
          "returns": "Ident"
        },
        "PickInfo_GetError": {
          "params": [],
          "returns": "Text"
        },
        "Part_SetAnchorPos": {
          "params": [
            {
              "identifier": "Vec3",
              "argument": "Position"
            }
          ],
          "returns": "Void"
        },
        "Part_SetIsJoint": {
          "params": [
            {
              "identifier": "Boolean",
              "argument": "IsJoint"
            }
          ],
          "returns": "Void"
        },
        "Part_ClearAnchor": {
          "params": [],
          "returns": "Void"
        },
        "Material_GetMaterialIdSelected": {
          "params": [],
          "returns": "Ident"
        },
        "Material_SetMaterailIdSelected": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "MaterialEditorId"
            }
          ],
          "returns": "Void"
        },
        "Materail_GetSubTexIndexSelected": {
          "params": [],
          "returns": "Integer"
        },
        "Material_MaterialLibGetCount": {
          "params": [],
          "returns": "Integer"
        },
        "Material_SetDefault": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "MaterialId"
            }
          ],
          "returns": "Void"
        },
        "Material_GetDefault": {
          "params": [],
          "returns": "Ident"
        },
        "Material_GetBitmapBase": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "MaterialId"
            }
          ],
          "returns": "CImage"
        },
        "Material": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "MaterialId"
            }
          ],
          "returns": "CImage"
        },
        "Material_MatchesCriterion": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "MaterialId"
            },
            {
              "identifier": "EMaterialFilterCriterion",
              "argument": "ResultSetHandle"
            }
          ],
          "returns": "Boolean"
        },
        "Material_SetFilter": {
          "params": [
            {
              "identifier": "EMaterialFilterCriterion",
              "argument": "Criterion"
            },
            {
              "identifier": "EFilterKind",
              "argument": "FilterKind"
            }
          ],
          "returns": "Void"
        },
        "Material_GetFilter": {
          "params": [
            {
              "identifier": "EMaterialFilterCriterion",
              "argument": "Criterion"
            }
          ],
          "returns": "EFilterKind"
        },
        "Material_ClearFilters": {
          "params": [],
          "returns": "Void"
        },
        "Material_UVEditor_SetIsRotation": {
          "params": [
            {
              "identifier": "Boolean",
              "argument": "IsRotation"
            }
          ],
          "returns": "Void"
        },
        "Material_UVEditor_SetIsScale": {
          "params": [
            {
              "identifier": "Boolean",
              "argument": "IsScale"
            }
          ],
          "returns": "Void"
        },
        "Material_UVEditor_SetIsScale1D": {
          "params": [
            {
              "identifier": "Boolean",
              "argument": "IsScale"
            }
          ],
          "returns": "Void"
        },
        "Material_UVEditor_Open": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "MaterialId"
            },
            {
              "identifier": "CMlQuad",
              "argument": "LocationQuad"
            }
          ],
          "returns": "Void"
        },
        "Material_UVEditor_Close": {
          "params": [],
          "returns": "Void"
        },
        "Material_UVEditor_SetMode": {
          "params": [
            {
              "identifier": "EUVEditorMode",
              "argument": "Mode"
            }
          ],
          "returns": "Void"
        },
        "Material_UVEditor_GetMode": {
          "params": [],
          "returns": "EUVEditorMode"
        },
        "Material_UVEditor_SetProjectionType": {
          "params": [
            {
              "identifier": "EUVEditorProjectionType",
              "argument": "ProjectionType"
            }
          ],
          "returns": "Void"
        },
        "Material_IsGameMaterial": {
          "params": [],
          "returns": "Boolean"
        },
        "Material_UVEditor_Apply": {
          "params": [],
          "returns": "Void"
        },
        "Material_PasteMaterial": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "Interaction_Abort": {
          "params": [],
          "returns": "Void"
        },
        "Interaction_SetPreview": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetToPreview"
            }
          ],
          "returns": "Void"
        },
        "Interaction_StartCreation": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "CreationSetHandle"
            },
            {
              "identifier": "EElemType",
              "argument": "ElemType"
            },
            {
              "identifier": "Ident",
              "argument": "SetToPickFromHandle"
            }
          ],
          "returns": "Void"
        },
        "Interaction_Creation_GetElems": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "ResultSetHandle"
            }
          ],
          "returns": "Void"
        },
        "Interaction_CloseCreation": {
          "params": [],
          "returns": "Void"
        },
        "Interaction_Creation_ClearParams": {
          "params": [],
          "returns": "Void"
        },
        "Interaction_Creation_SetEdgesConstraint": {
          "params": [
            {
              "identifier": "EEdgesConstraint",
              "argument": "EdgesConstraint"
            }
          ],
          "returns": "Void"
        },
        "Interaction_Creation_SetAutoMerge": {
          "params": [
            {
              "identifier": "Boolean",
              "argument": "AutoMerge"
            }
          ],
          "returns": "Void"
        },
        "Interaction_StartPaste": {
          "params": [],
          "returns": "Void"
        },
        "Interaction_StartBlocTransformation": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "TransformationSetHandle"
            }
          ],
          "returns": "Void"
        },
        "Interaction_StartCurve2D": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "BordersSetHandle"
            }
          ],
          "returns": "Void"
        },
        "Interaction_CloseCurve2D": {
          "params": [
            {
              "identifier": "Boolean",
              "argument": "CanDoCurve2D"
            }
          ],
          "returns": "Void"
        },
        "Interaction_StartPick": {
          "params": [
            {
              "identifier": "EElemType",
              "argument": "ElemType"
            },
            {
              "identifier": "Ident",
              "argument": "SetToPickFrom"
            }
          ],
          "returns": "Void"
        },
        "Interaction_StartPickJoint": {
          "params": [],
          "returns": "Void"
        },
        "Interaction_StartMerge": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "MergeSetHandle"
            }
          ],
          "returns": "Void"
        },
        "Interaction_StartMirror": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "Interaction_Selection_ClearParams": {
          "params": [],
          "returns": "Void"
        },
        "Interaction_Selection_SetUseParts": {
          "params": [
            {
              "identifier": "Boolean",
              "argument": "UseParts"
            }
          ],
          "returns": "Void"
        },
        "Interaction_Selection_SetCanEnterLeaf": {
          "params": [
            {
              "identifier": "Boolean",
              "argument": "CanEnterLeaf"
            }
          ],
          "returns": "Void"
        },
        "Interaction_StartSelection": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SelectionSetHandle"
            },
            {
              "identifier": "EElemType",
              "argument": "ElemType"
            },
            {
              "identifier": "Ident",
              "argument": "SelectionSetToPickFrom"
            }
          ],
          "returns": "Void"
        },
        "Interaction_CloseSelection": {
          "params": [],
          "returns": "Void"
        },
        "Interaction_StartTranslation": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "TranslationSetHandle"
            }
          ],
          "returns": "Void"
        },
        "Interaction_StartPickTranslation": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "TranslationSetHandle"
            }
          ],
          "returns": "Void"
        },
        "Interaction_StartRotation": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "RotationSetHandle"
            }
          ],
          "returns": "Void"
        },
        "Interaction_StartPickRotation": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "RotationSetHandle"
            }
          ],
          "returns": "Void"
        },
        "Interaction_Rotation_SetStep": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "RotationStep"
            }
          ],
          "returns": "Void"
        },
        "Interaction_StartPickScale": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "ScalingSetHandle"
            }
          ],
          "returns": "Void"
        },
        "Interaction_Scale_SetStep": {
          "params": [
            {
              "identifier": "Real",
              "argument": "ScalingStep"
            }
          ],
          "returns": "Void"
        },
        "Interaction_StartSplit": {
          "params": [],
          "returns": "Void"
        },
        "Display_HighlightSet": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "Display_ClearHighlighting": {
          "params": [],
          "returns": "Void"
        },
        "Display_AtlasSelectionsSet": {
          "params": [
            {
              "identifier": "Boolean",
              "argument": "DisplayAtlasSelection"
            }
          ],
          "returns": "Void"
        },
        "Display_AtlasSelectionGet": {
          "params": [],
          "returns": "Boolean"
        },
        "Display_HideElemsByDistance_Start": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "Display_HideElemsByDistance_Stop": {
          "params": [],
          "returns": "Void"
        },
        "Display_HideMap": {
          "params": [],
          "returns": "Void"
        },
        "Display_ShowMap": {
          "params": [],
          "returns": "Void"
        },
        "MergeAllSuperposedElements": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "Selection_Undo": {
          "params": [],
          "returns": "Void"
        },
        "Selection_Redo": {
          "params": [],
          "returns": "Void"
        },
        "SetOfElements_Create": {
          "params": [],
          "returns": "Ident"
        },
        "SetOfElements_CopyFrom": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "DestinationSet"
            },
            {
              "identifier": "Ident",
              "argument": "SourceSet"
            }
          ],
          "returns": "Void"
        },
        "SetOfElements_Append": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "DestinationSet"
            },
            {
              "identifier": "Ident",
              "argument": "SourceSet"
            }
          ],
          "returns": "Void"
        },
        "SetOfElements_Destroy": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfElements_Empty": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfElements_SetAllElements": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfElements_SetAllFaces": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfElements_DeleteElements": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfELements_HasHorizontalFaces": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Boolean"
        },
        "SetOfElements_HasVerticalFaces": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Boolean"
        },
        "SetOfElements_GetElemsCount": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Integer"
        },
        "SetOfElements_GetVerticesCount": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Integer"
        },
        "SetOfElements_GetEdgesCount": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Integer"
        },
        "SetOfElements_GetFacesCount": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Integer"
        },
        "ExtendSelectedSet": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "GetBordersSet": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            },
            {
              "identifier": "Ident",
              "argument": "SetBordersHandle"
            }
          ],
          "returns": "Void"
        },
        "GetBordersVertexs": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            },
            {
              "identifier": "Ident",
              "argument": "SetVertexHandle"
            }
          ],
          "returns": "Void"
        },
        "SelectionSet_SelectAll": {
          "params": [],
          "returns": "Void"
        },
        "Curve2DPolygon": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "FourVertexSetHandle"
            },
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            },
            {
              "identifier": "Integer",
              "argument": "SubTexIndex"
            }
          ],
          "returns": "Void"
        },
        "AtlasSelection_Create": {
          "params": [],
          "returns": "Ident"
        },
        "AtlasSelection_GetAtlasSelectionHandleFromSet": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "AtlasSelection_GAddAtlasSelectionFromSet": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            },
            {
              "identifier": "Ident",
              "argument": "FourPointsHandle"
            }
          ],
          "returns": "Void"
        },
        "AtlasSelection_SubAtlasSelection": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "AtlasSelection_TextureAtlasSelection": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            },
            {
              "identifier": "Integer",
              "argument": "SubTexIndex"
            }
          ],
          "returns": "Void"
        },
        "AtlasSelection_GetAtlasSelectionAfterSelection": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "Preview_Clear": {
          "params": [],
          "returns": "Void"
        },
        "BlocTransformation_Start": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Boolean"
        },
        "BlocTransformation_Translate": {
          "params": [
            {
              "identifier": "Vec3",
              "argument": "Translation"
            }
          ],
          "returns": "Void"
        },
        "BlocTransformation_Twist": {
          "params": [
            {
              "identifier": "Real",
              "argument": "Angle"
            }
          ],
          "returns": "Void"
        },
        "BlocTransformation_Bend": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "Axis"
            },
            {
              "identifier": "Real",
              "argument": "Radius"
            },
            {
              "identifier": "Real",
              "argument": "Angle"
            },
            {
              "identifier": "Boolean",
              "argument": "Direction"
            }
          ],
          "returns": "Void"
        },
        "BlocTransformation_Abort": {
          "params": [],
          "returns": "Void"
        },
        "BlocTransformation_Close": {
          "params": [],
          "returns": "Void"
        },
        "VoxelSpace_Init": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "Size"
            },
            {
              "identifier": "Boolean",
              "argument": "UseColors"
            }
          ],
          "returns": "Void"
        },
        "VoxelSpace_Destroy": {
          "params": [],
          "returns": "Void"
        },
        "VoxelSpace_Get": {
          "params": [
            {
              "identifier": "Int3",
              "argument": "Pos"
            }
          ],
          "returns": "Boolean"
        },
        "VoxelSpace_Set": {
          "params": [
            {
              "identifier": "Int3",
              "argument": "Pos"
            }
          ],
          "returns": "Void"
        },
        "VoxelSpace_SetVec3": {
          "params": [
            {
              "identifier": "Vec3",
              "argument": "Pos"
            }
          ],
          "returns": "Void"
        },
        "VoxelSpace_Unset": {
          "params": [
            {
              "identifier": "Int3",
              "argument": "Pos"
            }
          ],
          "returns": "Void"
        },
        "VoxelSpace_GenerateMesh": {
          "params": [],
          "returns": "Void"
        },
        "SetOfElements_ProjectOnPlane": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfElements_ProjectOnGround": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            },
            {
              "identifier": "Real",
              "argument": "Height"
            }
          ],
          "returns": "Void"
        },
        "SetOfElements_SplitEdgeWithVertex": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfElements_CoolapseEdgeWithVertex": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfElements_Subdivide": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfElements_Subdivide_Interpolation": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfVertices_DrawCircle": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "InputSetHandle"
            },
            {
              "identifier": "Ident",
              "argument": "ResultSetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfVertices_DrawDisc": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "InputSetHandle"
            },
            {
              "identifier": "Ident",
              "argument": "ResultSetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfVertices_DrawIcosahedron": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "InputSetHandle"
            },
            {
              "identifier": "Ident",
              "argument": "ResultSetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfVertices_DrawIcosahedricSphere": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "InputSetHandle"
            },
            {
              "identifier": "Ident",
              "argument": "ResultSetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfVertices_DrawPoly": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "InputSetHandle"
            },
            {
              "identifier": "Ident",
              "argument": "ResultSetHandle"
            },
            {
              "identifier": "Integer",
              "argument": "VerticesCount"
            }
          ],
          "returns": "Void"
        },
        "SetOfVertices_DrawSpline": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "ControlSetHandle"
            },
            {
              "identifier": "Ident",
              "argument": "ResultSetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfVertices_Weld": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "VerticesSetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfVertices_DrawBox": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "ControlSetHandle"
            },
            {
              "identifier": "Ident",
              "argument": "ResultSetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfEdges_Fill": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfEdges_Flip": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            },
            {
              "identifier": "Ident",
              "argument": "ResultSetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfEdges_BorderExpand": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfOneEdge_FaceLoopExpand": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfOneEdge_EdgeLoopExpand": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfOneFace_CutHole": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "FaceSetHandle"
            },
            {
              "identifier": "Ident",
              "argument": "EdgesSetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfFaces_Extrude": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            },
            {
              "identifier": "Ident",
              "argument": "ResultSetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfFaces_QuadsToTriangles": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            },
            {
              "identifier": "Ident",
              "argument": "ResultSetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfFaces_ApplyMaterial": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "SetHandle"
            },
            {
              "identifier": "Ident",
              "argument": "MaterialId"
            }
          ],
          "returns": "Void"
        },
        "SetOfFaces_PlanarExpand": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "FacesSetHandle"
            }
          ],
          "returns": "Void"
        },
        "SetOfFaces_ChangeOrientation": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "FacesSetHandle"
            }
          ],
          "returns": "Void"
        },
        "Prefab_Export": {
          "params": [],
          "returns": "Void"
        },
        "Prefab_Import": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "PrefabIndex"
            }
          ],
          "returns": "Void"
        },
        "Parts_MergeSelectedParts": {
          "params": [],
          "returns": "Void"
        },
        "Parts_Group": {
          "params": [],
          "returns": "Void"
        },
        "Parts_UngroupSelectedParts": {
          "params": [],
          "returns": "Void"
        },
        "Cut": {
          "params": [],
          "returns": "Void"
        },
        "Copy": {
          "params": [],
          "returns": "Void"
        },
        "SetBaseUndoState": {
          "params": [],
          "returns": "Void"
        },
        "AddUndoState": {
          "params": [],
          "returns": "Void"
        },
        "AutoSave": {
          "params": [
            {
              "identifier": "Text",
              "argument": "FileName"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CEditorModule": {
      "props": {
        "CModuleMenuModel": [
          "EditedMenu"
        ],
        "CModuleMenuPageModel": [
          "EditedMenuPage"
        ],
        "CeditorPluginModuleEvent[]": [
          "PendingEvents"
        ]
      },
      "methods": {
        "NewModule": {
          "params": [
            {
              "identifier": "EModuleType",
              "argument": "ModuleType"
            }
          ],
          "returns": "Void"
        },
        "OpenModule": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Url"
            }
          ],
          "returns": "Void"
        },
        "Save": {
          "params": [],
          "returns": "Void"
        },
        "SaveAs": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Url"
            }
          ],
          "returns": "Void"
        },
        "SaveCopyAs": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Url"
            }
          ],
          "returns": "Void"
        },
        "ForceExit": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CEditorPluginModuleEvent": {
      "props": {
        "Type": [
          "Type"
        ]
      },
      "methods": {
        "Eat": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CGameMatchSettingsPlaylistItemScript": {
      "props": {
        "Text": [
          "Name"
        ],
        "Boolean": [
          "FileExists"
        ]
      }
    },
    "CGameModeInfo": {
      "props": {
        "Text": [
          "Name",
          "Path",
          "Description",
          "Version"
        ],
        "Text[]": [
          "CompatibleMapTypes"
        ]
      }
    },
    "CGamePlayerMapRecordScript": {
      "props": {
        "Text": [
          "Context",
          "MapUid",
          "MapName",
          "FileName",
          "ReplayUrl"
        ],
        "Integer": [
          "Score",
          "Time",
          "RespawnCount",
          "Timestamp",
          "MultiAsyncLevel",
          "SkillPoints"
        ]
      }
    },
    "CGhost": {
      "props": {
        "Ident": [
          "Id"
        ],
        "CTmResult": [
          "Result"
        ],
        "Text": [
          "Nickname"
        ]
      }
    },
    "CHighScoreComparison": {
      "props": {
        "CMapInfo": [
          "MapInfo"
        ],
        "Text": [
          "Login",
          "RecordDateString",
          "OpponentLogin",
          "OpponentDisplayName",
          "OpponentRecordUrl",
          "OpponentRecordDateString"
        ],
        "Integer": [
          "RecordScore",
          "RecordTime",
          "RecordRespawnCount",
          "RecordDate",
          "RecordElapsedTime",
          "RecordCount",
          "OpponentRecordScore",
          "OpponentRecordTime",
          "OpponentRecordResawnCount",
          "OpponentRecordDate",
          "OpponentRecordElapsedTime",
          "OpponentRecordCount"
        ]
      }
    },
    "CHighScoreComparisonSummary": {
      "props": {
        "Text": [
          "Login",
          "BestRecordLastDateString",
          "OpponentLogin",
          "OpponentDisplayName",
          "OppenentBestRecordLasDateString"
        ],
        "Integer": [
          "BestRecordCount",
          "BestRecordLastDate",
          "BestRecordElapsedTime",
          "OpponentBestRecordCount",
          "OpponentBestRecordLastDate",
          "OpponentBestRecordElapsedTime"
        ]
      }
    },
    "CHttpManager": {
      "props": {
        "CHttpRequest[]": [
          "Requests"
        ],
        "Integer": [
          "SlotsAvailable"
        ],
        "Boolean": [
          "AutomaticHeaders_Timezone"
        ]
      },
      "methods": {
        "CreateGet": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Url"
            },
            {
              "identifier": "Boolean",
              "argument": "UseCache"
            }
          ],
          "returns": "CHttpRequest"
        },
        "CreatePost": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Url"
            },
            {
              "identifier": "Text",
              "argument": "Resource"
            }
          ],
          "returns": "CHttpRequest"
        },
        "Destroy": {
          "params": [
            {
              "identifier": "CHttpRequest",
              "argument": "Request"
            }
          ],
          "returns": "Void"
        },
        "IsValidUrl": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Url"
            }
          ],
          "returns": "Boolean"
        }
      }
    },
    "CHttpRequest": {
      "props": {
        "Text": [
          "Url",
          "Result"
        ],
        "Integer": [
          "StatusCode"
        ],
        "Boolean": [
          "IsCompleted"
        ]
      }
    },
    "CInputEvent": {
      "props": {
        "EType": [
          "Type"
        ],
        "CInputPad": [
          "Pad"
        ],
        "EButton": [
          "Button"
        ],
        "Boolean": [
          "IsAutoRepeat"
        ],
        "Integer": [
          "KeyCode"
        ],
        "Text": [
          "KeyName"
        ]
      }
    },
    "CInputManager": {
      "props": {
        "CInputEvent[]": [
          "PendingEvents"
        ],
        "Integer": [
          "Now",
          "Period",
          "Dbg_AutoRepeat_I,itialDelay",
          "Dbg_AutoRepea_Period"
        ],
        "CInputPad[]": [
          "Pads"
        ],
        "Vec2": [
          "MousePos"
        ],
        "Boolean": [
          "MouseLeftButton",
          "MouseRightButton",
          "MouseMiddleButton",
          "ExclusiveMode"
        ]
      },
      "methods": {
        "GetPadButtonPlaygroundBinding": {
          "params": [
            {
              "identifier": "CInputPad",
              "argument": "Pad"
            },
            {
              "identifier": "EButton",
              "argument": "Button"
            }
          ],
          "returns": "Text"
        },
        "GetPadButtonCurrentBinding": {
          "params": [
            {
              "identifier": "CInputPad",
              "argument": "Pad"
            },
            {
              "identifier": "EButton",
              "argument": "Button"
            }
          ],
          "returns": "Text"
        },
        "GetPadButtonBinding": {
          "params": [
            {
              "identifier": "CInputPad",
              "argument": "Pad"
            },
            {
              "identifier": "EButton",
              "argument": "Button"
            }
          ],
          "returns": "Text"
        },
        "IsKeyPressed": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "KeyCode"
            }
          ],
          "returns": "Boolean"
        }
      }
    },
    "CInputPad": {
      "props": {
        "Integer": [
          "ControllerId",
          "IdleDuration",
          "Left",
          "Right",
          "Up",
          "Down",
          "A",
          "B",
          "X",
          "Y",
          "L1",
          "R1",
          "LeftStickBut",
          "RightStickBut",
          "Menu",
          "View"
        ],
        "Ident": [
          "UserId"
        ],
        "EPadType": [
          "Type"
        ],
        "Text": [
          "ModelName"
        ],
        "Real": [
          "LeftStickX",
          "LeftStickY",
          "RightStickX",
          "RightStickY",
          "L2",
          "R2"
        ],
        "EButton[]": [
          "ButtonEvents"
        ]
      },
      "methods": {
        "ClearRumble": {
          "params": [],
          "returns": "Void"
        },
        "AddRumble": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "Duration"
            },
            {
              "identifier": "Real",
              "argument": "LargeMotor"
            },
            {
              "identifier": "Real",
              "argument": "SmallMotor"
            }
          ],
          "returns": "Void"
        },
        "SetColor": {
          "params": [
            {
              "identifier": "Vec3",
              "argument": "Color"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CItemAnchor": {
      "props": {
        "Vec3": [
          "Position"
        ]
      }
    },
    "CMacroblockModel": {
      "props": {
        "Boolean": [
          "IsGround",
          "HasStart",
          "HasFinish",
          "HasCheckpoint"
        ],
        "CBlockModel": [
          "GeneratedBlockModel"
        ],
        "Text": [
          "Name"
        ]
      }
    },
    "CManiaApp": {
      "props": {
        "Text": [
          "ManiaAppUrl",
          "ManiaAppBaseUrl",
          "CurrentLocalDateText",
          "CurrentTimezone"
        ],
        "Integer": [
          "Now",
          "CurrentDate",
          "LayersDefaultManialinkVersion"
        ],
        "Boolean": [
          "IsVisible",
          "EnableMenuNavigationInputs"
        ],
        "CUser": [
          "LocalUser"
        ],
        "CTitle": [
          "LoadedTitle"
        ],
        "ESystemPlatform": [
          "SystemPlatform"
        ],
        "ESystemSkuIdentifier": [
          "SystemSkuIdentifier"
        ],
        "CUILayer[]": [
          "UILayers"
        ],
        "CXmlManager": [
          "Xml"
        ],
        "CHttpManager": [
          "Http"
        ],
        "CVideoManager": [
          "Video"
        ],
        "CAudioManager": [
          "Audio"
        ],
        "CInputManager": [
          "Input"
        ],
        "CDataFileMgr": [
          "DataFileMgr"
        ],
        "CScoreMgr": [
          "ScoreMgr"
        ],
        "CPrivilegeMgr": [
          "PrivilegeMgr"
        ],
        "CPresenceMgr": [
          "PresenceMgr"
        ],
        "CUserV2Manager": [
          "UserMgr"
        ]
      },
      "methods": {
        "UILayerCreate": {
          "params": [],
          "returns": "CUILayer"
        },
        "UILayerDestroy": {
          "params": [
            {
              "identifier": "CUILayer",
              "argument": "Layer"
            }
          ],
          "returns": "Void"
        },
        "UILayerDestroyAll": {
          "params": [],
          "returns": "Void"
        },
        "LayerCustomEvent": {
          "params": [
            {
              "identifier": "CUILayer",
              "argument": "Layer"
            },
            {
              "identifier": "Text",
              "argument": "Type"
            },
            {
              "identifier": "Text[]",
              "argument": "Data"
            }
          ],
          "returns": "Void"
        },
        "OpenLink": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Url"
            },
            {
              "identifier": "ELinkType",
              "argument": "LinkType"
            }
          ],
          "returns": "Void"
        },
        "OpenFileExplorer": {
          "params": [
            {
              "identifier": "Text",
              "argument": "FileName"
            }
          ],
          "returns": "Boolean"
        },
        "Dialog_Message": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Message"
            }
          ],
          "returns": "Void"
        },
        "Dbg_DumpDeclareForVariables": {
          "params": [
            {
              "identifier": "CNod",
              "argument": "Nod"
            },
            {
              "identifier": "Boolean",
              "argument": "StatsOnly"
            }
          ],
          "returns": "Text"
        }
      }
    },
    "CManiaAppBase": {
      "props": {
        "CManiaAppEvent[]": [
          "PendingEvents"
        ]
      }
    },
    "CManiaAppBrowser": {
      "props": {
        "CManiaAppEvent[]": [
          "PendingEvents"
        ],
        "Text": [
          "BrowserFocusedFrameId"
        ]
      },
      "methods": {
        "BrowserBack": {
          "params": [],
          "returns": "Void"
        },
        "BrowserQuit": {
          "params": [],
          "returns": "Void"
        },
        "BrowserHome": {
          "params": [],
          "returns": "Void"
        },
        "BrowserReload": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CManiaAppEvent": {
      "props": {
        "EType": [
          "Type"
        ],
        "CUILayer": [
          "CustomEventLayer"
        ],
        "Text": [
          "CustomEventType",
          "ExternalEventType",
          "KeyName"
        ],
        "Text[]": [
          "CustomEventData",
          "ExternalEventData"
        ],
        "EMenuNavAction": [
          "MenuNavAction"
        ],
        "Boolean": [
          "IsActionAutoRepeat"
        ],
        "Integer": [
          "KeyCode"
        ]
      }
    },
    "CManiaAppPlaygroundCommon": {
      "props": {
        "CManiaAppPlaygroundEvent[]": [
          "PendingEvents"
        ],
        "CPlaygroundClient": [
          "Playground"
        ],
        "CMap": [
          "Map"
        ],
        "CUIConfig": [
          "UI",
          "ClientUI"
        ]
      }
    },
    "CManiaAppPlaygroundEvent": {
      "props": {
        "Text": [
          "PlaygroundScriptEventType"
        ],
        "Text[]": [
          "PlaygroundScriptEventData"
        ]
      }
    },
    "CManiaAppStation": {
      "props": {
        "CStation": [
          "Station"
        ],
        "CPackCreatorTitleInfo[]": [
          "Maker_EditedTitles"
        ]
      },
      "methods": {
        "EnterStation": {
          "params": [],
          "returns": "Void"
        },
        "Maker_EditTitle": {
          "params": [
            {
              "identifier": "Text",
              "argument": "EditedTitleId"
            }
          ],
          "returns": "Void"
        },
        "Maker_EditNewTitle": {
          "params": [
            {
              "identifier": "Text",
              "argument": "EditedTitleName"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CManiaAppTitle": {
      "props": {
        "CManiaAppEvent[]": [
          "PendingEvents"
        ],
        "Boolean": [
          "LoadingScreenRequireKeyPressed",
          "DontScaleMainMenuForHMD",
          "Authentication_GetTokenResponseReceived"
        ],
        "CTitleFlow": [
          "TitleFlow",
          "TitleControl"
        ],
        "CTitleEdition": [
          "TitleEdition"
        ],
        "CNotificationsConsumer": [
          "Notifications"
        ],
        "Text": [
          "ExternalRequest_Type",
          "Authentication_Token"
        ],
        "Text[]": [
          "ExternalRequest_Data"
        ],
        "CAchievementsManager": [
          "AchievementsManager"
        ],
        "CBadgeManager": [
          "BadgeManager"
        ],
        "CMatchSettingsManager": [
          "MatchSettingsManager"
        ],
        "Integer": [
          "Authentication_ErrorCode"
        ]
      },
      "methods": {
        "Menu_Quit": {
          "params": [],
          "returns": "Void"
        },
        "Menu_Home": {
          "params": [],
          "returns": "Void"
        },
        "Menu_Solo": {
          "params": [],
          "returns": "Void"
        },
        "Menu_Local": {
          "params": [],
          "returns": "Void"
        },
        "Menu_Internet": {
          "params": [],
          "returns": "Void"
        },
        "Menu_Editor": {
          "params": [],
          "returns": "Void"
        },
        "Menu_Profile": {
          "params": [],
          "returns": "Void"
        },
        "PlayMap": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Map"
            }
          ],
          "returns": "Void"
        },
        "ExternalRequest_Clear": {
          "params": [],
          "returns": "Void"
        },
        "Authentication_GetToken": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "AppLogin"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CManiaAppTitleLayer": {
      "props": {
        "CManiaAppTitle": [
          "ParentApp"
        ],
        "CTitleFlow": [
          "TitleControl",
          "TitleFlow"
        ]
      }
    },
    "CMap": {
      "props": {
        "CMapInfo": [
          "MapInfo"
        ],
        "Text": [
          "MapName",
          "Comments",
          "AuthorZoneIconUrl",
          "CollectionName",
          "DecorationName",
          "AuthorLogin",
          "AuthorNickName",
          "AuthorZonePath",
          "MapType",
          "MapStyle",
          "ObjectiveTextAuthor",
          "ObjectiveTextGold",
          "ObjectiveTextSilver",
          "ObjectiveTextBronze"
        ],
        "Integer": [
          "TMObjective_AuthorTime",
          "TMObjective_GoldTime",
          "TMObjective_SilverTime",
          "TMObjective_BronzeTime",
          "TMObjective_NbLaps",
          "CopperPrice"
        ],
        "Boolean": [
          "TMObjective_IsLapRace"
        ],
        "Int3": [
          "Size"
        ]
      }
    },
    "CMapEditorPlugin": {
      "props": {
        "CMapEditorPluginEvent[]": [
          "PendingEvents"
        ],
        "CMap": [
          "Map"
        ],
        "Text": [
          "MapName",
          "ManialinkText"
        ],
        "PlaceMode": [
          "PlaceMode"
        ],
        "EditMode": [
          "EditMode"
        ],
        "Boolean": [
          "IsEditorReadyForRequest",
          "HoldLoadingScreen",
          "IsUltraShadowsQualityAvailable",
          "UndergroundMode",
          "BlockStockMode",
          "EnableAirMapping",
          "EnableMixMapping",
          "EnableEditorInputsCustomProcessing",
          "EnableCursorShowingWhenInterfaceIsFocused",
          "HideEditorInterface",
          "HideBlockHelpers",
          "ShowPlacementGrid",
          "EditorInputIsDown_Menu",
          "EditorInputIsDown_SwitchToRace",
          "EditorInputIsDown_Undo",
          "EditorInputIsDown_Redo",
          "EditorInputIsDown_CursorUp",
          "EditorInputIsDown_CursorRight",
          "EditorInputIsDown_CursorDown",
          "EditorInputIsDown_CursorLeft",
          "EditorInputIsDown_CursorRaise",
          "EditorInputIsDown_CursorLower",
          "EditorInputIsDown_CursorTurn",
          "EditorInputIsDown_CursorPick",
          "EditorInputIsDown_CursorPlace",
          "EditorInputIsDown_CursorDelete",
          "EditorInputIsDown_CameraUp",
          "EditorInputIsDown_CameraRight",
          "EditorInputIsDown_CameraDown",
          "EditorInputIsDown_CameraLeft",
          "EditorInputIsDown_CameraZoomNext",
          "EditorInputIsDown_Camera0",
          "EditorInputIsDown_Camera1",
          "EditorInputIsDown_Camera3",
          "EditorInputIsDown_Camera7",
          "EditorInputIsDown_Camera9",
          "EditorInputIsDown_PivotChange",
          "EditorInputIsDown_CursorTurnSlightly",
          "EditorInputIsDown_CursorTurnSlightlyAntiClockwise",
          "EditorInputIsDown_IconUp",
          "EditorInputIsDown_IconRight",
          "EditorInputIsDown_IconDown",
          "EditorInputIsDown_IconLeft",
          "EditorInputIsDown_RemoveAll",
          "EditorInputIsDown_Save",
          "EditorInputIsDown_SaveAs",
          "EditorInputIsDown_MapStyle",
          "EditorInputIsDown_ClassicMapEditor"
        ],
        "ShadowsQuality": [
          "CurrentShadowsQuality"
        ],
        "Int3": [
          "CursorCoord"
        ],
        "CardinalDirections": [
          "CursorDir"
        ],
        "CBlockModel": [
          "CursorBlockModel",
          "CursorTerrainBlockModel"
        ],
        "CMacroblockModel": [
          "CursorMacroblockModel"
        ],
        "Real": [
          "CameraVAngle",
          "CameraHAngle",
          "CameraToTargetDistance",
          "ThumbnailCameraVAngle",
          "ThumbnailCameraHAngle",
          "ThumbnailCameraRoll",
          "ThumbnailCameraFovY",
          "CursorBrightnessFactor",
          "CollectionSquareSize",
          "CollectionSquareHeight"
        ],
        "Vec3": [
          "CameraTargetPosition",
          "CameraPosition",
          "ThumbnailCameraPosition",
          "CustomSelectionRGB"
        ],
        "CItemAnchor[]": [
          "Items"
        ],
        "Text[]": [
          "MediatrackIngameClips",
          "MediatrackIngameIsScriptClips"
        ],
        "Integer": [
          "MediatrackIngameEditedClipIndex",
          "CollectionGroundY"
        ],
        "CBlock[]": [
          "Blocks"
        ],
        "CBlockModel[]": [
          "BlockModels",
          "TerrainBlockModels"
        ],
        "CMacroblockModel[]": [
          "MacroblockModels"
        ],
        "CAnchorData[]": [
          "AnchorData"
        ],
        "Int3[]": [
          "CustomSelectionCoords"
        ],
        "ValidationStatus": [
          "ValidationStatus"
        ],
        "CMlPage": [
          "ManialinkPage"
        ]
      },
      "methods": {
        "ComputeShadows": {
          "params": [],
          "returns": "Void"
        },
        "DisplayDefaultSetObjectivesDialog": {
          "params": [],
          "returns": "Void"
        },
        "Undo": {
          "params": [],
          "returns": "Void"
        },
        "Redo": {
          "params": [],
          "returns": "Void"
        },
        "Help": {
          "params": [],
          "returns": "Void"
        },
        "Validate": {
          "params": [],
          "returns": "Void"
        },
        "AutoSave": {
          "params": [],
          "returns": "Void"
        },
        "Quit": {
          "params": [],
          "returns": "Void"
        },
        "QuickQuit": {
          "params": [],
          "returns": "Void"
        },
        "QuitAndSetResult": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Type"
            },
            {
              "identifier": "Text[]",
              "argument": "Data"
            }
          ],
          "returns": "Void"
        },
        "QuickQuitAndSetResult": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Type"
            },
            {
              "identifier": "Text[]",
              "argument": "Data"
            }
          ],
          "returns": "Void"
        },
        "TestMapFromStart": {
          "params": [],
          "returns": "Void"
        },
        "TestMapFromCoord": {
          "params": [
            {
              "identifier": "Int3",
              "argument": "Coord"
            },
            {
              "identifier": "CardinalDirections",
              "argument": "Dir"
            }
          ],
          "returns": "Void"
        },
        "TestMapWithMode": {
          "params": [
            {
              "identifier": "Text",
              "argument": "RulesModeName"
            }
          ],
          "returns": "Void"
        },
        "SaveMap": {
          "params": [
            {
              "identifier": "Text",
              "argument": "FileName"
            },
            {
              "identifier": "Text",
              "argument": "Path"
            }
          ],
          "returns": "Void"
        },
        "GetRaceCamera": {
          "params": [
            {
              "identifier": "Vec3",
              "argument": "Position"
            },
            {
              "identifier": "Real",
              "argument": "Yaw"
            },
            {
              "identifier": "Real",
              "argument": "Pitch"
            },
            {
              "identifier": "Real",
              "argument": "Roll"
            },
            {
              "identifier": "Real",
              "argument": "FovY"
            }
          ],
          "returns": "Boolean"
        },
        "RemoveAllBlocks": {
          "params": [],
          "returns": "Void"
        },
        "RemoveAllTerrain": {
          "params": [],
          "returns": "Void"
        },
        "RemoveAllOffZone": {
          "params": [],
          "returns": "Void"
        },
        "RemoveAllObjects": {
          "params": [],
          "returns": "Void"
        },
        "RemoveAll": {
          "params": [],
          "returns": "Void"
        },
        "RemoveAllBlocksAndTerrain": {
          "params": [],
          "returns": "Void"
        },
        "ShowCustomSelection": {
          "params": [],
          "returns": "Void"
        },
        "HideCustomSelection": {
          "params": [],
          "returns": "Void"
        },
        "CopyPaste_Copy": {
          "params": [],
          "returns": "Void"
        },
        "CopyPaste_Cut": {
          "params": [],
          "returns": "Void"
        },
        "CopyPaste_Remove": {
          "params": [],
          "returns": "Void"
        },
        "CopyPaste_SelectAll": {
          "params": [],
          "returns": "Void"
        },
        "CopyPaste_ResetSelection": {
          "params": [],
          "returns": "Void"
        },
        "OpenToolsMenu": {
          "params": [],
          "returns": "Void"
        },
        "EditMediatrackIngame": {
          "params": [],
          "returns": "Void"
        },
        "PreloadAllBlocks": {
          "params": [],
          "returns": "Void"
        },
        "PreloadAllItems": {
          "params": [],
          "returns": "Void"
        },
        "CanPlaceBlock": {
          "params": [
            {
              "identifier": "CBlockModel",
              "argument": "BlockModel"
            },
            {
              "identifier": "Int3",
              "argument": "Coord"
            },
            {
              "identifier": "CardinalDirections",
              "argument": "Dir"
            },
            {
              "identifier": "Boolean",
              "argument": "OnGround"
            },
            {
              "identifier": "Integer",
              "argument": "VariantIndex"
            }
          ],
          "returns": "Boolean"
        },
        "PlaceBlock": {
          "params": [
            {
              "identifier": "CBlockModel",
              "argument": "BlockModel"
            },
            {
              "identifier": "Int3",
              "argument": "Coord"
            },
            {
              "identifier": "CardinalDirections",
              "argument": "Dir"
            }
          ],
          "returns": "Boolean"
        },
        "CanPlaceBlock_NoDestruction": {
          "params": [
            {
              "identifier": "CBlockModel",
              "argument": "BlockModel"
            },
            {
              "identifier": "Int3",
              "argument": "Coord"
            },
            {
              "identifier": "CardinalDirections",
              "argument": "Dir"
            },
            {
              "identifier": "Boolean",
              "argument": "OnGround"
            },
            {
              "identifier": "Integer",
              "argument": "VariantIndex"
            }
          ],
          "returns": "Boolean"
        },
        "PlaceBlock_NoDestruction": {
          "params": [
            {
              "identifier": "CBlockModel",
              "argument": "BlockModel"
            },
            {
              "identifier": "Int3",
              "argument": "Coord"
            },
            {
              "identifier": "CardinalDirections",
              "argument": "Dir"
            }
          ],
          "returns": "Boolean"
        },
        "CanPlaceRoadBlocks": {
          "params": [
            {
              "identifier": "CBlockModel",
              "argument": "BlockModel"
            },
            {
              "identifier": "Int3",
              "argument": "StartCoord"
            },
            {
              "identifier": "Int3",
              "argument": "EndCoord"
            }
          ],
          "returns": "Boolean"
        },
        "PlaceRoadBlocks": {
          "params": [
            {
              "identifier": "CBlockModel",
              "argument": "BlockModel"
            },
            {
              "identifier": "Int3",
              "argument": "StartCoord"
            },
            {
              "identifier": "Int3",
              "argument": "EndCoord"
            }
          ],
          "returns": "Boolean"
        },
        "CanPlaceTerrainBlocks": {
          "params": [
            {
              "identifier": "CBlockModel",
              "argument": "BlockModel"
            },
            {
              "identifier": "Int3",
              "argument": "StartCoord"
            },
            {
              "identifier": "Int3",
              "argument": "EndCoord"
            }
          ],
          "returns": "Boolean"
        },
        "PlaceTerrainBlocks": {
          "params": [
            {
              "identifier": "CBlockModel",
              "argument": "BlockModel"
            },
            {
              "identifier": "Int3",
              "argument": "StartCoord"
            },
            {
              "identifier": "Int3",
              "argument": "EndCoord"
            }
          ],
          "returns": "Boolean"
        },
        "PlaceTerrainBlocks_NoDestruction": {
          "params": [
            {
              "identifier": "CBlockModel",
              "argument": "BlockModel"
            },
            {
              "identifier": "Int3",
              "argument": "StartCoord"
            },
            {
              "identifier": "Int3",
              "argument": "EndCoord"
            }
          ],
          "returns": "Boolean"
        },
        "CanPlaceMacroblock": {
          "params": [
            {
              "identifier": "CMacroblockModel",
              "argument": "BlockModel"
            },
            {
              "identifier": "Int3",
              "argument": "Coord"
            },
            {
              "identifier": "CardinalDirections",
              "argument": "Dir"
            }
          ],
          "returns": "Boolean"
        },
        "PlaceMacroblock": {
          "params": [
            {
              "identifier": "CMacroblockModel",
              "argument": "BlockModel"
            },
            {
              "identifier": "Int3",
              "argument": "Coord"
            },
            {
              "identifier": "CardinalDirections",
              "argument": "Dir"
            }
          ],
          "returns": "Boolean"
        },
        "CanPlaceMacroblock_NoDestruction": {
          "params": [
            {
              "identifier": "CMacroblockModel",
              "argument": "BlockModel"
            },
            {
              "identifier": "Int3",
              "argument": "Coord"
            },
            {
              "identifier": "CardinalDirections",
              "argument": "Dir"
            }
          ],
          "returns": "Boolean"
        },
        "PlaceMacroblock_NoDestruction": {
          "params": [
            {
              "identifier": "CMacroblockModel",
              "argument": "BlockModel"
            },
            {
              "identifier": "Int3",
              "argument": "Coord"
            },
            {
              "identifier": "CardinalDirections",
              "argument": "Dir"
            }
          ],
          "returns": "Boolean"
        },
        "CanPlaceMacroblock_NoTerrain": {
          "params": [
            {
              "identifier": "CMacroblockModel",
              "argument": "BlockModel"
            },
            {
              "identifier": "Int3",
              "argument": "Coord"
            },
            {
              "identifier": "CardinalDirections",
              "argument": "Dir"
            }
          ],
          "returns": "Boolean"
        },
        "PlaceMacroblock_NoTerrain": {
          "params": [
            {
              "identifier": "CMacroblockModel",
              "argument": "BlockModel"
            },
            {
              "identifier": "Int3",
              "argument": "Coord"
            },
            {
              "identifier": "CardinalDirections",
              "argument": "Dir"
            }
          ],
          "returns": "Boolean"
        },
        "RemoveMacroblock": {
          "params": [
            {
              "identifier": "CMacroblockModel",
              "argument": "BlockModel"
            },
            {
              "identifier": "Int3",
              "argument": "Coord"
            },
            {
              "identifier": "CardinalDirections",
              "argument": "Dir"
            }
          ],
          "returns": "Boolean"
        },
        "RemoveMacroblock_NoTerrain": {
          "params": [
            {
              "identifier": "CMacroblockModel",
              "argument": "BlockModel"
            },
            {
              "identifier": "Int3",
              "argument": "Coord"
            },
            {
              "identifier": "CardinalDirections",
              "argument": "Dir"
            }
          ],
          "returns": "Boolean"
        },
        "GetBlock": {
          "params": [
            {
              "identifier": "Int3",
              "argument": "Coord"
            }
          ],
          "returns": "CBlock"
        },
        "IsBlockModelSkinnable": {
          "params": [
            {
              "identifier": "CBlockModel",
              "argument": "BlockModel"
            }
          ],
          "returns": "Boolean"
        },
        "GetNbBlockModelSkins": {
          "params": [
            {
              "identifier": "CBlockModel",
              "argument": "BlockModel"
            }
          ],
          "returns": "Integer"
        },
        "GetBlockModelSkin": {
          "params": [
            {
              "identifier": "CBlockModel",
              "argument": "BlockModel"
            },
            {
              "identifier": "Integer",
              "argument": "SkinIndex"
            }
          ],
          "returns": "Text"
        },
        "GetSkinDisplayName": {
          "params": [
            {
              "identifier": "Text",
              "argument": "SkinFileName"
            }
          ],
          "returns": "Text"
        },
        "GetBlockSkin": {
          "params": [
            {
              "identifier": "CBlock",
              "argument": "Block"
            }
          ],
          "returns": "Text"
        },
        "SetBlockSkin": {
          "params": [
            {
              "identifier": "CBlock",
              "argument": "Block"
            },
            {
              "identifier": "Text",
              "argument": "SkinFileName"
            }
          ],
          "returns": "Void"
        },
        "OpenBlockSkinDialog": {
          "params": [
            {
              "identifier": "CBlock",
              "argument": "Block"
            }
          ],
          "returns": "Boolean"
        },
        "RemoveBlock": {
          "params": [
            {
              "identifier": "Int3",
              "argument": "Coord"
            }
          ],
          "returns": "Boolean"
        },
        "RemoveTerrainBlocks": {
          "params": [
            {
              "identifier": "Int3",
              "argument": "StartCoord"
            },
            {
              "identifier": "Int3",
              "argument": "EndCoord"
            }
          ],
          "returns": "Boolean"
        },
        "GetBlockGroundHeight": {
          "params": [
            {
              "identifier": "CBlockModel",
              "argument": "BlockModel"
            },
            {
              "identifier": "Integer",
              "argument": "CoordX"
            },
            {
              "identifier": "Integer",
              "argument": "CoordZ"
            },
            {
              "identifier": "CardinalDirections",
              "argument": "Dir"
            }
          ],
          "returns": "Integer"
        },
        "GetGroundHeight": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "CoordX"
            },
            {
              "identifier": "Integer",
              "argument": "CoordZ"
            }
          ],
          "returns": "Integer"
        },
        "GetMouseCoordOnGround": {
          "params": [],
          "returns": "Int3"
        },
        "GetMouseCoordAtHeight": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "CoordY"
            }
          ],
          "returns": "Int3"
        },
        "GetStartLineBlock": {
          "params": [],
          "returns": "CBlock"
        },
        "RemoveItem": {
          "params": [
            {
              "identifier": "CAnchorData",
              "argument": "Item"
            }
          ],
          "returns": "Boolean"
        },
        "CopyPaste_AddOrSubSelection": {
          "params": [
            {
              "identifier": "Int3",
              "argument": "StartCoord"
            },
            {
              "identifier": "Int3",
              "argument": "EndCoord"
            }
          ],
          "returns": "Void"
        },
        "CopyPaste_Symmetrize": {
          "params": [],
          "returns": "Boolean"
        },
        "SaveMacroblock": {
          "params": [
            {
              "identifier": "CMacroblockModel",
              "argument": "MacroblockModel"
            }
          ],
          "returns": "Void"
        },
        "GetMacroblockModelFromFilePath": {
          "params": [
            {
              "identifier": "Text",
              "argument": "MacroblockModelFilePath"
            }
          ],
          "returns": "CMacroblockModel"
        },
        "GetTerrainBlockModelFromName": {
          "params": [
            {
              "identifier": "Text",
              "argument": "TerrainBlockModelName"
            }
          ],
          "returns": "CBlockModel"
        },
        "GetBlockModelFromName": {
          "params": [
            {
              "identifier": "Text",
              "argument": "BlockModelName"
            }
          ],
          "returns": "CBlockModel"
        },
        "GetMapStyle": {
          "params": [],
          "returns": "Text"
        },
        "SetMapStyle": {
          "params": [
            {
              "identifier": "Text",
              "argument": "MapStyle"
            }
          ],
          "returns": "Text"
        }
      }
    },
    "CMapEditorPluginEvent": {
      "props": {
        "Type": [
          "Type"
        ],
        "EInput": [
          "Input"
        ],
        "Ident": [
          "EditedAnchorDataId"
        ],
        "Boolean": [
          "IsFromPad",
          "IsFromMouse",
          "IsFromKeyboard",
          "OnlyScriptMetadataModified"
        ]
      }
    },
    "CMapEditorPluginLayer": {
      "props": {
        "CMapEditorPlugin": [
          "Editor"
        ]
      }
    },
    "CMapGroup": {
      "props": {
        "CMapInfo[]": [
          "MapInfos"
        ]
      },
      "methods": {
        "IsUnlocked": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CMapInfo": {
      "props": {
        "Text": [
          "MapUid",
          "Comments",
          "CollectionName",
          "AuthorLogin",
          "AuthorNickName",
          "AuthorZonePath",
          "AuthorZoneFlagUrl",
          "AuthorCountryFlagUrl",
          "MapType",
          "MapStyle",
          "Name",
          "Path",
          "FileName"
        ],
        "Integer": [
          "CopperPrice",
          "TMObjective_AuthorTime",
          "TMObjective_GoldTime",
          "TMObjective_SilverTime",
          "TMObjective_BronzeTime"
        ],
        "Boolean": [
          "Unlocked",
          "IsPlayable",
          "CreatedWithSimpleEditor",
          "TMObjective_IsLapRace"
        ]
      }
    },
    "CMapType": {
      "props": {
        "Boolean": [
          "CustomEditAnchorData",
          "ValidationEndRequested",
          "ValidationEndNoConfirm",
          "IsSwitchedToPlayground"
        ],
        "ValidationStatus": [
          "ValidationStatus"
        ],
        "Text": [
          "ValidabilityRequirementsMessage"
        ],
        "CUIConfigMgr": [
          "UIManager"
        ],
        "CUser[]": [
          "Users"
        ]
      },
      "methods": {
        "ClearMapMetadata": {
          "params": [],
          "returns": "Void"
        },
        "RequestEnterPlayground": {
          "params": [],
          "returns": "Void"
        },
        "RequestLeavePlayground": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CMatchSettings": {
      "props": {
        "Text": [
          "Name",
          "FileName",
          "ScriptModeName"
        ],
        "CGameMatchSettingsPlaylistItemScript[]": [
          "Playlist"
        ]
      },
      "methods": {
        "Playlist_FileExists": {
          "params": [
            {
              "identifier": "Text",
              "argument": "File"
            }
          ],
          "returns": "Boolean"
        },
        "Playlist_FileMatchesMode": {
          "params": [
            {
              "identifier": "Text",
              "argument": "File"
            }
          ],
          "returns": "Boolean"
        },
        "Playlist_Add": {
          "params": [
            {
              "identifier": "Text",
              "argument": "File"
            }
          ],
          "returns": "Void"
        },
        "Playlist_Remove": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "Index"
            }
          ],
          "returns": "Void"
        },
        "Playlist_SwapUd": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "Index"
            }
          ],
          "returns": "Void"
        },
        "Playlist_SwapDown": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "Index"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CMatchSettingsManager": {
      "props": {
        "Boolean": [
          "MatchSettings_EditScriptSettings_Ongoing"
        ],
        "CMatchSettings[]": [
          "MatchSettings"
        ]
      },
      "methods": {
        "MatchSettings_Refresh": {
          "params": [],
          "returns": "Void"
        },
        "MatchSettings_Create": {
          "params": [
            {
              "identifier": "Text",
              "argument": "FilePath"
            }
          ],
          "returns": "CMatchSettings"
        },
        "MatchSettings_Save": {
          "params": [
            {
              "identifier": "CMatchSettings",
              "argument": "MatchSettings"
            }
          ],
          "returns": "Void"
        },
        "MatchSettings_SaveAs": {
          "params": [
            {
              "identifier": "Text",
              "argument": "FilePath"
            },
            {
              "identifier": "CMatchSettings",
              "argument": "MatchSettings"
            }
          ],
          "returns": "CMatchSettings"
        },
        "MatchSettings_EditScriptSettings": {
          "params": [
            {
              "identifier": "CMatchSettings",
              "argument": "MatchSettings"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CMlBrowser": {
      "props": {
        "CManiaAppBrowser": [
          "ParentApp"
        ],
        "CMap": [
          "CurMap"
        ],
        "EBuddyResult": [
          "BuddyDoResult"
        ],
        "Text": [
          "BuddyDoErrorMessage",
          "BrowserFocusedFrameId"
        ],
        "Boolean": [
          "IsInBrowser"
        ]
      },
      "methods": {
        "ShowCurMapCard": {
          "params": [],
          "returns": "Void"
        },
        "BrowserBack": {
          "params": [],
          "returns": "Void"
        },
        "BrowserQuit": {
          "params": [],
          "returns": "Void"
        },
        "BrowserHome": {
          "params": [],
          "returns": "Void"
        },
        "BrowserReload": {
          "params": [],
          "returns": "Void"
        },
        "SetLocalUserClubLink": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ClubLink"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CMlControl": {
      "props": {
        "CMlFrame": [
          "Parent"
        ],
        "Text": [
          "ControlId",
          "ToolTip"
        ],
        "Text[]": [
          "ControlClasses"
        ],
        "Vec2": [
          "Size",
          "RelativePosition_V3",
          "AbsolutePosition_V3"
        ],
        "AlignHorizontal": [
          "HorizontalAlign"
        ],
        "AlignVertical": [
          "VerticalAlign"
        ],
        "Boolean": [
          "Visible",
          "IsFocused"
        ],
        "Real": [
          "ZIndex",
          "RelativeScale",
          "RelativeRotation",
          "AbsoluteScale",
          "AbsoluteRotation"
        ]
      },
      "methods": {
        "HasClass": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Class"
            }
          ],
          "returns": "Boolean"
        },
        "DataAttributeExists": {
          "params": [
            {
              "identifier": "Text",
              "argument": "DataName"
            }
          ],
          "returns": "Boolean"
        },
        "DataAttributeGet": {
          "params": [
            {
              "identifier": "Text",
              "argument": "DataName"
            }
          ],
          "returns": "Text"
        },
        "DataAttributeSet": {
          "params": [
            {
              "identifier": "Text",
              "argument": "DataName"
            },
            {
              "identifier": "Text",
              "argument": "DataValue"
            }
          ],
          "returns": "Void"
        },
        "Show": {
          "params": [],
          "returns": "Void"
        },
        "Hide": {
          "params": [],
          "returns": "Void"
        },
        "Unload": {
          "params": [],
          "returns": "Void"
        },
        "Focus": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CMlEntry": {
      "props": {
        "Text": [
          "Value"
        ],
        "ETextFormat": [
          "TextFormat"
        ],
        "Real": [
          "Opacity",
          "TextSizeReal"
        ],
        "Vec3": [
          "TextColor"
        ],
        "Integer": [
          "MaxLine"
        ],
        "Boolean": [
          "AutoNewLine"
        ]
      },
      "methods": {
        "StartEdition": {
          "params": [],
          "returns": "Void"
        },
        "SetText": {
          "params": [
            {
              "identifier": "Text",
              "argument": "NewText"
            },
            {
              "identifier": "Boolean",
              "argument": "SendSubmitEvent"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CMlFileEntry": {
      "props": {
        "Text": [
          "FullFileName"
        ]
      }
    },
    "CMlFrame": {
      "props": {
        "CMlControl[]": [
          "Controls"
        ],
        "Boolean": [
          "ClipWindowActive",
          "DisablePreload"
        ],
        "Vec2": [
          "ClipWindowRelativePosition",
          "ClipWindowSize"
        ]
      },
      "methods": {
        "GetFirstChild": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ControlId"
            }
          ],
          "returns": "CMlControl"
        }
      }
    },
    "CMlGauge": {
      "props": {
        "Text": [
          "Style"
        ],
        "Real": [
          "Ratio",
          "GradingRatio"
        ],
        "Integer": [
          "Clan"
        ],
        "Vec3": [
          "Color"
        ],
        "Boolean": [
          "DrawBackground",
          "DrawBlockBackground",
          "CenteredBar"
        ]
      },
      "methods": {
        "SetRatio": {
          "params": [
            {
              "identifier": "Real",
              "argument": "NewRatio"
            }
          ],
          "returns": "Void"
        },
        "SetClan": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "NewClan"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CMlGraph": {
      "props": {
        "Vec2": [
          "CoordsMin",
          "CoordsMax"
        ],
        "CMlGraphCurve[]": [
          "Curves"
        ]
      },
      "methods": {
        "AddCurve": {
          "params": [],
          "returns": "CMlGraphCurve"
        },
        "RemoveCurve": {
          "params": [
            {
              "identifier": "CMlGraphCurve",
              "argument": "Curve"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CMlGraphCurve": {
      "props": {
        "Vec2[]": [
          "Points"
        ],
        "Vec3": [
          "Color"
        ],
        "Text": [
          "Style"
        ],
        "Real": [
          "Width"
        ]
      },
      "methods": {
        "SortPoints": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CMlLabel": {
      "props": {
        "Text": [
          "Style",
          "Substyle",
          "TextFont",
          "Value"
        ],
        "Integer": [
          "ValueLineCount",
          "MaxLine"
        ],
        "Boolean": [
          "AppendEllipsis",
          "AutoNewLine"
        ],
        "Real": [
          "LineSpacing",
          "Opacity",
          "TextSizeReal"
        ],
        "Vec3": [
          "TextColor"
        ],
        "EBlendMode": [
          "Blend"
        ]
      },
      "methods": {
        "SetText": {
          "params": [
            {
              "identifier": "Text",
              "argument": "NewText"
            }
          ],
          "returns": "Void"
        },
        "ComputeWidth": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Text"
            }
          ],
          "returns": "Real"
        },
        "ComputeHeight": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Text"
            }
          ],
          "returns": "Real"
        }
      }
    },
    "CMlMediaPlayer": {
      "props": {
        "Boolean": [
          "IsInitPlay",
          "Music",
          "IsLooping"
        ],
        "Real": [
          "Volume"
        ],
        "Text": [
          "Url"
        ]
      },
      "methods": {
        "Play": {
          "params": [],
          "returns": "Void"
        },
        "Stop": {
          "params": [],
          "returns": "Void"
        },
        "StopAndRewind": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CMlMinimap": {
      "props": {
        "Vec3": [
          "WorldPosition"
        ],
        "Vec2": [
          "MapPosition"
        ],
        "Real": [
          "MapYaw",
          "ZoomFactor"
        ],
        "Boolean": [
          "Underground"
        ]
      },
      "methods": {
        "Fog_SetAll": {
          "params": [
            {
              "identifier": "Real",
              "argument": "Value"
            }
          ],
          "returns": "Void"
        },
        "Fog_ClearDisk": {
          "params": [
            {
              "identifier": "Vec3",
              "argument": "WorldCenter"
            },
            {
              "identifier": "Real",
              "argument": "Radius"
            },
            {
              "identifier": "Real",
              "argument": "FadeSize"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CMlPage": {
      "props": {
        "CMlFrame": [
          "MainFrame"
        ],
        "Boolean": [
          "LinksInhibited"
        ],
        "CMlControl[]": [
          "GetClassChildren_Result"
        ]
      },
      "methods": {
        "GetFirstChild": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ControlId"
            }
          ],
          "returns": "CMlControl"
        },
        "GetClassChildren": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Class"
            },
            {
              "identifier": "CMlFrame",
              "argument": "Frame"
            },
            {
              "identifier": "Boolean",
              "argument": "Recursive"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CMlQuad": {
      "props": {
        "CImage": [
          "Image"
        ],
        "Text": [
          "ImageUrl",
          "ImageUrlFocus",
          "Style",
          "Substyle"
        ],
        "Boolean": [
          "StyleSelected",
          "DownloadInProgress"
        ],
        "Vec3": [
          "Colorize",
          "ModulateColor",
          "BgColor",
          "BgColorFocus"
        ],
        "Real": [
          "Opacity"
        ],
        "EKeepRatioMode": [
          "KeepRatio"
        ],
        "EBlendMode": [
          "Blend"
        ]
      },
      "methods": {
        "ChangeImageUrl": {
          "params": [
            {
              "identifier": "Text",
              "argument": "fieldName"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CMlScript": {
      "props": {
        "CMlPage": [
          "Page"
        ],
        "Boolean": [
          "PageIsVisible",
          "Dbg_WarnOnDroppedEvents",
          "MouseLeftButton",
          "MouseRightButton",
          "MouseMiddleButton",
          "KeyUp",
          "KeyDown",
          "KeyLeft",
          "KeyRight",
          "KeyReturn",
          "KeySpace",
          "KeyDelete",
          "EnableMenuNavigationInputs",
          "IsMenuNavigationForeground"
        ],
        "Integer": [
          "Now",
          "Period",
          "CurrentTime"
        ],
        "Text": [
          "CurrentTimeText",
          "CurrentLocalDateText",
          "CurrentTimezone"
        ],
        "CUser": [
          "LocalUser"
        ],
        "CTitle": [
          "LoadedTitle"
        ],
        "ESystemPlatform": [
          "SystemPlatform"
        ],
        "ESystemSkuIdentifier": [
          "SystemSkuIdentifier"
        ],
        "CMlScriptEvent[]": [
          "PendingEvents"
        ],
        "Real": [
          "MouseX",
          "MouseY"
        ],
        "CXmlManager": [
          "Xml"
        ],
        "CHttpManager": [
          "Http"
        ],
        "CVideoManager": [
          "Video"
        ],
        "CAudioManager": [
          "Audio"
        ],
        "CInputManager": [
          "Input"
        ],
        "CDataFileMgr": [
          "DataFileMgr"
        ],
        "CScoreMgr": [
          "ScoreMgr"
        ],
        "CPrivilegeMgr": [
          "PrivilegeMgr"
        ],
        "CPresenceMgr": [
          "PresenceMgr"
        ],
        "CAnimManager": [
          "AnimManager"
        ]
      },
      "methods": {
        "Dbg_SetProcessed": {
          "params": [
            {
              "identifier": "CMlScriptEvent",
              "argument": "Event"
            }
          ],
          "returns": "Void"
        },
        "IsKeyPressed": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "KeyCode"
            }
          ],
          "returns": "Boolean"
        },
        "EnableMenuNavigation": {
          "params": [
            {
              "identifier": "Boolean",
              "argument": "EnableInputs"
            },
            {
              "identifier": "Boolean",
              "argument": "WithAutoFocus"
            },
            {
              "identifier": "CMlControl",
              "argument": "AutoBackControl"
            },
            {
              "identifier": "Integer",
              "argument": "InputPriority"
            }
          ],
          "returns": "Void"
        },
        "OpenLink": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Url"
            },
            {
              "identifier": "LinkType",
              "argument": "LinkType"
            }
          ],
          "returns": "Void"
        },
        "TriggerPageAction": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ActionString"
            }
          ],
          "returns": "Void"
        },
        "SendCustomEvent": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Type"
            },
            {
              "identifier": "Text[]",
              "argument": "Data"
            }
          ],
          "returns": "Void"
        },
        "PreloadImage": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ImageUrl"
            }
          ],
          "returns": "Void"
        },
        "PreloadAll": {
          "params": [],
          "returns": "Void"
        },
        "Dbg_DumpDeclareForVariables": {
          "params": [
            {
              "identifier": "CNod",
              "argument": "Nod"
            },
            {
              "identifier": "Boolean",
              "argument": "StatsOnly"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CMlScriptEvent": {
      "props": {
        "Type": [
          "Type"
        ],
        "Integer": [
          "KeyCode"
        ],
        "Text": [
          "KeyName",
          "CharPressed",
          "ControlId",
          "CustomEventType"
        ],
        "CMlControl": [
          "Control"
        ],
        "EMenuNavAction": [
          "MenuNavAction"
        ],
        "Boolean": [
          "IsActionAutoRepeat"
        ],
        "Text[]": [
          "CustomEventData"
        ]
      }
    },
    "CStation": {
      "props": {
        "CTitle": [
          "Title"
        ],
        "Integer": [
          "AudienceRegisteredUsers",
          "CampaignMedalsMax",
          "CampaignMedalsCurrent",
          "CampaignMedalsRanking",
          "LadderRank"
        ],
        "Real": [
          "LadderPoints"
        ]
      }
    },
    "CMlScriptIngame": {
      "props": {
        "Integer": [
          "GameTime"
        ],
        "CPlaygroundClient": [
          "Playground"
        ],
        "CUIConfig": [
          "UI",
          "ClientUI"
        ],
        "Boolean": [
          "IsSpectator",
          "IsSpectatorClient",
          "UseClans",
          "UseForcedClans",
          "IsInGameMenuDisplayed"
        ],
        "CManiaAppPlaygroundCommon": [
          "ParentApp"
        ],
        "CMap": [
          "Map"
        ],
        "CTeam[]": [
          "Teams"
        ],
        "Text": [
          "CurrentServerLogin",
          "CurrentServerName",
          "CurrentServerDesc",
          "CurrentServerJoinLink",
          "CurrentServerModeName"
        ],
        "CAchievementsManager": [
          "AchievementsManager"
        ]
      },
      "methods": {
        "ShowCurChallengeCard": {
          "params": [],
          "returns": "Void"
        },
        "ShowModeHelp": {
          "params": [],
          "returns": "Void"
        },
        "CopyServerLinkToClipBoard": {
          "params": [],
          "returns": "Void"
        },
        "JoinTeam1": {
          "params": [],
          "returns": "Void"
        },
        "JoinTeam2": {
          "params": [],
          "returns": "Void"
        },
        "RequestSpectatorClient": {
          "params": [
            {
              "identifier": "Boolean",
              "argument": "Spectator"
            }
          ],
          "returns": "Void"
        },
        "SetSpectateTarget": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Player"
            }
          ],
          "returns": "Void"
        },
        "ShowProfile": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Player"
            }
          ],
          "returns": "Void"
        },
        "ShowInGameMenu": {
          "params": [],
          "returns": "Void"
        },
        "CloseInGameMenu": {
          "params": [
            {
              "identifier": "EInGameMenuResult",
              "argument": "Result"
            }
          ],
          "returns": "Void"
        },
        "CloseScoresTable": {
          "params": [],
          "returns": "Void"
        },
        "PlayUiSound": {
          "params": [
            {
              "identifier": "EUISound",
              "argument": "Sound"
            },
            {
              "identifier": "Integer",
              "argument": "SoundVariant"
            },
            {
              "identifier": "Real",
              "argument": "Volume"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CMlStation": {
      "props": {
        "CManiaAppStation": [
          "ParentApp"
        ],
        "CStation": [
          "Station"
        ]
      },
      "methods": {
        "EnterStation": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CMlTextEdit": {
      "props": {
        "Text": [
          "Value"
        ],
        "Integer": [
          "MaxLine",
          "ValueLineCount"
        ],
        "Boolean": [
          "AutoNewLine",
          "ShowLineNumbers"
        ],
        "Real": [
          "LineSpacing",
          "Opacity",
          "TextSizeReal"
        ],
        "Vec3": [
          "TextColor"
        ],
        "EControlScriptEditorTextFormat": [
          "TextFormat"
        ]
      },
      "methods": {
        "StartEdition": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CMode": {
      "props": {
        "Text": [
          "ModeStatusMessage",
          "ServerLogin",
          "ServerName",
          "ServerModeName",
          "MapName",
          "MapPlayerModelName",
          "NeutralEmblemUrl",
          "ForcedClubLinkUrl1",
          "ForcedClubLinkUrl2",
          "ClientManiaAppUrl"
        ],
        "CTitle": [
          "LoadedTitle"
        ],
        "CMap": [
          "Map"
        ],
        "CUser[]": [
          "Users"
        ],
        "CTeam[]": [
          "Teams"
        ],
        "Integer": [
          "Now",
          "Period",
          "NextMapIndex"
        ],
        "Boolean": [
          "MatchEndRequested",
          "ServerShutdownRequested",
          "MapLoaded",
          "Ladder_RequestInProgress",
          "Solo_NewRecordSequenceInProgress",
          "UseMinimap",
          "Replay_AutoStart"
        ],
        "CMapInfo[]": [
          "MapList"
        ],
        "CUIConfigMgr": [
          "UIManager"
        ],
        "CModulePlaygroundHud": [
          "Hud"
        ],
        "CServerAdmin": [
          "ServerAdmin"
        ],
        "CXmlRpc": [
          "XmlRpc"
        ],
        "CXmlManager": [
          "Xml"
        ],
        "CHttpManager": [
          "Http"
        ],
        "CInputManager": [
          "Input"
        ],
        "CDataFileMgr": [
          "DataFileMgr"
        ],
        "CScoreMgr": [
          "ScoreMgr"
        ],
        "ESystemPlatform": [
          "SystemPlatform"
        ],
        "CAchievementsManager": [
          "AchievementsManager"
        ],
        "CModeTurretManager": [
          "TurretsManager"
        ]
      },
      "methods": {
        "TweakTeamColorsToAvoidHueOverlap": {
          "params": [],
          "returns": "Void"
        },
        "RequestLoadMap": {
          "params": [],
          "returns": "Void"
        },
        "RequestUnloadMap": {
          "params": [],
          "returns": "Void"
        },
        "Hud_Load": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ModuleName"
            }
          ],
          "returns": "Void"
        },
        "PassOn": {
          "params": [
            {
              "identifier": "CUIConfigEvent",
              "argument": "EventToPassOn"
            }
          ],
          "returns": "Void"
        },
        "Discard": {
          "params": [
            {
              "identifier": "CUIConfigEvent",
              "argument": "EventToDiscard"
            }
          ],
          "returns": "Void"
        },
        "Ladder_OpenMatch_Request": {
          "params": [],
          "returns": "Void"
        },
        "Ladder_AddPlayer": {
          "params": [
            {
              "identifier": "CScore",
              "argument": "PlayerScore"
            }
          ],
          "returns": "Void"
        },
        "Ladder_OpenMatch_BeginRequest": {
          "params": [],
          "returns": "Void"
        },
        "Ladder_OpenMatch_AddPlayer": {
          "params": [
            {
              "identifier": "CScore",
              "argument": "PlayerScore"
            }
          ],
          "returns": "Void"
        },
        "Ladder_OpenMatch_EndRequest": {
          "params": [],
          "returns": "Void"
        },
        "Ladder_CloseMatchRequest": {
          "params": [],
          "returns": "Void"
        },
        "Ladder_CancelMatchRequest": {
          "params": [],
          "returns": "Void"
        },
        "Ladder_SetResultsVersion": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "Version"
            }
          ],
          "returns": "Void"
        },
        "Ladder_SetMatchMakingMatchId": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "MatchId"
            }
          ],
          "returns": "Void"
        },
        "Ladder_EnableChallengeMode": {
          "params": [
            {
              "identifier": "Boolean",
              "argument": "Enable"
            }
          ],
          "returns": "Void"
        },
        "AutoTeamBalance": {
          "params": [],
          "returns": "Void"
        },
        "Solo_SetNewRecord": {
          "params": [
            {
              "identifier": "CScore",
              "argument": "PlayerScore"
            },
            {
              "identifier": "EMedal",
              "argument": "PlayerScore"
            }
          ],
          "returns": "Void"
        },
        "Synchro_AddBarrier": {
          "params": [],
          "returns": "Integer"
        },
        "Synchro_BarrierReached": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "Barrier"
            }
          ],
          "returns": "Boolean"
        },
        "Users_AreAllies": {
          "params": [
            {
              "identifier": "CUser",
              "argument": "User1"
            },
            {
              "identifier": "CUser",
              "argument": "User2"
            }
          ],
          "returns": "Boolean"
        },
        "Users_RequestSwitchToSpectator": {
          "params": [
            {
              "identifier": "CUser",
              "argument": "User"
            }
          ],
          "returns": "Void"
        },
        "Users_CreateFake": {
          "params": [
            {
              "identifier": "Text",
              "argument": "NickName"
            },
            {
              "identifier": "Integer",
              "argument": "RequestedTeam"
            }
          ],
          "returns": "CUser"
        },
        "Users_DestroyFake": {
          "params": [
            {
              "identifier": "CUser",
              "argument": "User"
            }
          ],
          "returns": "Void"
        },
        "Users_SetNbFakeUsers": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "NbTeam1"
            },
            {
              "identifier": "Integer",
              "argument": "NbTeam2"
            }
          ],
          "returns": "Void"
        },
        "Users_DestroyAllFakes": {
          "params": [],
          "returns": "Void"
        },
        "ItemList_Begin": {
          "params": [],
          "returns": "Void"
        },
        "ItemList_Add": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ModelName"
            }
          ],
          "returns": "Ident"
        },
        "ItemList_AddWithSkin": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ModelName"
            },
            {
              "identifier": "Text",
              "argument": "SkinName"
            }
          ],
          "returns": "Ident"
        },
        "ItemList_End": {
          "params": [],
          "returns": "Void"
        },
        "DemoToken_StartUsingToken": {
          "params": [],
          "returns": "Void"
        },
        "DemoToken_StopUsingToken": {
          "params": [],
          "returns": "Void"
        },
        "DemoToken_GetAndUseToken": {
          "params": [
            {
              "identifier": "CUser",
              "argument": "User"
            }
          ],
          "returns": "Void"
        },
        "ActionList_Begin": {
          "params": [],
          "returns": "Void"
        },
        "ActionList_Add": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ActionName"
            }
          ],
          "returns": "Ident"
        },
        "ActionList_End": {
          "params": [],
          "returns": "Void"
        },
        "Replay_Start": {
          "params": [],
          "returns": "Void"
        },
        "Replay_Stop": {
          "params": [],
          "returns": "Void"
        },
        "Dbg_DumpDeclareForVariables": {
          "params": [
            {
              "identifier": "CNod",
              "argument": "Nod"
            },
            {
              "identifier": "Boolean",
              "argument": "StatsOnly"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CModeTurret": {
      "props": {
        "Integer": [
          "Armor",
          "ArmorMax"
        ],
        "CModeTurret": [
          "Owner"
        ]
      }
    },
    "CModeTurretManager": {
      "props": {
        "CModeTurret[]": [
          "Turrets"
        ]
      },
      "methods": {
        "MapTurrets_Reset": {
          "params": [],
          "returns": "Void"
        },
        "Turret_Create": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "ModelId"
            },
            {
              "identifier": "Vec3",
              "argument": "Position"
            },
            {
              "identifier": "Vec3",
              "argument": "Direction"
            },
            {
              "identifier": "Integer",
              "argument": "Clan"
            },
            {
              "identifier": "CPlayer",
              "argument": "Owner"
            }
          ],
          "returns": "CModeTurret"
        },
        "Turret_Destroy": {
          "params": [
            {
              "identifier": "CModeTurret",
              "argument": "Turret"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CModuleMenu": {
      "methods": {
        "Menu_Goto": {
          "params": [
            {
              "identifier": "Text",
              "argument": "PageId"
            }
          ],
          "returns": "Void"
        },
        "Menu_Back": {
          "params": [],
          "returns": "Void"
        },
        "Menu_Previous": {
          "params": [],
          "returns": "Void"
        },
        "Menu_Quit": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CModuleMenuComponent": {
      "props": {
        "CUILayer": [
          "ComponentLayer"
        ]
      },
      "methods": {
        "Hide": {
          "params": [],
          "returns": "Void"
        },
        "Show": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CModuleMenuFileBrowser": {
      "props": {
        "Boolean": [
          "HesFinished"
        ],
        "Text[]": [
          "Selection"
        ]
      },
      "methods": {
        "SetFileType": {
          "params": [
            {
              "identifier": "EFileType",
              "argument": "FileType"
            }
          ],
          "returns": "Void"
        },
        "SetFileAction": {
          "params": [
            {
              "identifier": "EFileAction",
              "argument": "FileAction"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CModuleMenuLayer": {
      "props": {
        "CModuleMenuComponent[]": [
          "Components"
        ]
      },
      "methods": {
        "GetFirstComponent": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Name"
            }
          ],
          "returns": "CModuleMenuComponent"
        }
      }
    },
    "CModuleMenuModel": {
      "props": {
        "CModuleMenuPageModel[]": [
          "Pages"
        ],
        "Text": [
          "MenuScript"
        ]
      },
      "methods": {
        "AddPage": {
          "params": [
            {
              "identifier": "Text",
              "argument": "PageUrl"
            }
          ],
          "returns": "CModuleMenuPageModel"
        },
        "AddLink": {
          "params": [
            {
              "identifier": "CModuleMenuPageModel",
              "argument": "ParentPage"
            },
            {
              "identifier": "CModuleMenuPageModel",
              "argument": "ChildPage"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CModuleMenuPageModel": {
      "props": {
        "Text": [
          "ManialinkText"
        ]
      }
    },
    "CModulePlayground": {
      "methods": {
        "Hide": {
          "params": [
            {
              "identifier": "CUIConfig",
              "argument": "UIConfig"
            }
          ],
          "returns": "Void"
        },
        "Show": {
          "params": [
            {
              "identifier": "CUIConfig",
              "argument": "UIConfig"
            }
          ],
          "returns": "Void"
        },
        "IsVisble": {
          "params": [
            {
              "identifier": "CUIConfig",
              "argument": "UIConfig"
            }
          ],
          "returns": "Boolean"
        }
      }
    },
    "CModulePlaygroundHud": {
      "props": {
        "CModulePlaygroundInventory": [
          "Inventory"
        ],
        "CModulePlaygroundStore": [
          "Store"
        ],
        "CModulePlaygroundScoresTable": [
          "ScoresTable"
        ]
      }
    },
    "CModulePlaygroundInventory": {
      "methods": {
        "AddItem": {
          "params": [
            {
              "identifier": "CPlayer",
              "argument": "Player"
            },
            {
              "identifier": "Text",
              "argument": "Url"
            },
            {
              "identifier": "Integer",
              "argument": "Quantity"
            }
          ],
          "returns": "Integer"
        },
        "AddAction": {
          "params": [
            {
              "identifier": "CPlayer",
              "argument": "Player"
            },
            {
              "identifier": "Text",
              "argument": "Url"
            }
          ],
          "returns": "Boolean"
        },
        "RemoveInventoryItem": {
          "params": [
            {
              "identifier": "CPlayer",
              "argument": "Player"
            },
            {
              "identifier": "Text",
              "argument": "Url"
            },
            {
              "identifier": "Integer",
              "argument": "Quantity"
            }
          ],
          "returns": "Integer"
        },
        "GetInventoryItemQuantity": {
          "params": [
            {
              "identifier": "CPlayer",
              "argument": "Player"
            },
            {
              "identifier": "Text",
              "argument": "Url"
            }
          ],
          "returns": "Integer"
        },
        "IsInventoryItemStored": {
          "params": [
            {
              "identifier": "CPlayer",
              "argument": "Player"
            },
            {
              "identifier": "Text",
              "argument": "Url"
            }
          ],
          "returns": "Boolean"
        },
        "GetStoredItemsList": {
          "params": [
            {
              "identifier": "CPlayer",
              "argument": "Player"
            }
          ],
          "returns": "Tex[]"
        },
        "GetStoredActionsList": {
          "params": [
            {
              "identifier": "CPlayer",
              "argument": "Player"
            }
          ],
          "returns": "Tex[]"
        }
      }
    },
    "CModulePlaygroundScoresTable": {
      "methods": {
        "SetFooterText": {
          "params": [
            {
              "identifier": "Text",
              "argument": "FooterText"
            }
          ],
          "returns": "Void"
        },
        "ResetCustomColumns": {
          "params": [
            {
              "identifier": "CScore",
              "argument": "Score"
            }
          ],
          "returns": "Void"
        },
        "Scores_Sort": {
          "params": [
            {
              "identifier": "EScoreSortOrder",
              "argument": "SortOrder"
            }
          ],
          "returns": "Void"
        },
        "SetColumnValue": {
          "params": [
            {
              "identifier": "CScore",
              "argument": "Score"
            },
            {
              "identifier": "Text",
              "argument": "ColumnId"
            },
            {
              "identifier": "Text",
              "argument": "ColumnValue"
            }
          ],
          "returns": "Void"
        },
        "SetColumnVisibility": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ColumnId"
            },
            {
              "identifier": "Boolean",
              "argument": "Visibility"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CModulePlaygroundStore": {
      "methods": {
        "Reset": {
          "params": [],
          "returns": "Void"
        },
        "SetMoney": {
          "params": [
            {
              "identifier": "CPlayer",
              "argument": "Player"
            },
            {
              "identifier": "Integer",
              "argument": "Amount"
            }
          ],
          "returns": "Void"
        },
        "GetMoney": {
          "params": [
            {
              "identifier": "CPlayer",
              "argument": "Player"
            }
          ],
          "returns": "Integer"
        },
        "AddMoney": {
          "params": [
            {
              "identifier": "CPlayer",
              "argument": "Player"
            },
            {
              "identifier": "Integer",
              "argument": "Amount"
            }
          ],
          "returns": "Boolean"
        },
        "SubMoney": {
          "params": [
            {
              "identifier": "CPlayer",
              "argument": "Player"
            },
            {
              "identifier": "Integer",
              "argument": "Amount"
            }
          ],
          "returns": "Boolean"
        },
        "SetActionLevel": {
          "params": [
            {
              "identifier": "CPlayer",
              "argument": "Player"
            },
            {
              "identifier": "Text",
              "argument": "ActionUrl"
            },
            {
              "identifier": "Integer",
              "argument": "ActionLevel"
            }
          ],
          "returns": "Void"
        },
        "GetActionLevel": {
          "params": [
            {
              "identifier": "CPlayer",
              "argument": "Player"
            },
            {
              "identifier": "Text",
              "argument": "ActionUrl"
            }
          ],
          "returns": "Integer"
        },
        "SetItemCanBeBought": {
          "params": [
            {
              "identifier": "CPlayer",
              "argument": "Player"
            },
            {
              "identifier": "Text",
              "argument": "ActionUrl"
            },
            {
              "identifier": "Boolean",
              "argument": "CanBeBought"
            }
          ],
          "returns": "Void"
        },
        "GetItemCanBeBought": {
          "params": [
            {
              "identifier": "CPlayer",
              "argument": "Player"
            },
            {
              "identifier": "Text",
              "argument": "ActionUrl"
            }
          ],
          "returns": "Boolean"
        }
      }
    },
    "CNaturalLeaderBoardInfo": {
      "props": {
        "Integer": [
          "Rank",
          "Score"
        ],
        "Ident": [
          "UserId"
        ],
        "Text": [
          "Login",
          "DisplayName",
          "FileName",
          "ReplayUrl"
        ]
      }
    },
    "CNod": {
      "props": {
        "Ident": [
          "Id"
        ]
      }
    },
    "CNotificationsConsumer": {
      "props": {
        "CNotificationsConsumerEvent[]": [
          "Events"
        ],
        "CNotificationsConsumerNotification[]": [
          "Notifications",
          "FilteredNotifications"
        ],
        "EFilterPriority": [
          "Filter_Priority"
        ]
      }
    },
    "CNotificationsConsumerEvent": {
      "props": {
        "EType": [
          "Type"
        ],
        "CNotificationsConsumerNotification": [
          "Notification"
        ]
      }
    },
    "CNotificationsConsumerNotification": {
      "props": {
        "Text": [
          "Title",
          "Description",
          "ImageUrl"
        ],
        "ENotificationPriority": [
          "Priority"
        ],
        "Boolean": [
          "HasBeenRead",
          "HasBeenActivated"
        ]
      },
      "methods": {
        "SetRead": {
          "params": [],
          "returns": "Void"
        },
        "SetActivated": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "COnlinePresence": {
      "props": {
        "Text": [
          "Login",
          "DisplayName",
          "ServerLogin"
        ],
        "Boolean": [
          "IsOnline"
        ]
      }
    },
    "CPackCreator": {
      "props": {
        "Boolean": [
          "RegisterPack_IsInProgess"
        ],
        "CPackCreatorPack": [
          "CurrentPack"
        ]
      },
      "methods": {
        "RegisterPackForEditedTitle": {
          "params": [],
          "returns": "Void"
        },
        "Build_Begin": {
          "params": [
            {
              "identifier": "CPackCreatorPack",
              "argument": "Pack"
            },
            {
              "identifier": "CPackCreatorTitleInfo",
              "argument": "TitleInfo"
            }
          ],
          "returns": "Ident"
        },
        "Build_AddFile": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "BuildId"
            },
            {
              "identifier": "Text",
              "argument": "FileName"
            }
          ],
          "returns": "Void"
        },
        "Build_AddFolder": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "BuildId"
            },
            {
              "identifier": "Text",
              "argument": "FolderName"
            }
          ],
          "returns": "Void"
        },
        "Build_Generate": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "BuildId"
            },
            {
              "identifier": "Boolean",
              "argument": "Upload"
            }
          ],
          "returns": "Void"
        },
        "Build_IsGenerated": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "BuildId"
            }
          ],
          "returns": "Void"
        },
        "Build_ErrorMessage": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "BuildId"
            }
          ],
          "returns": "Void"
        },
        "Build_End": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "BuildId"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CPackCreatorPack": {
      "props": {
        "Ident": [
          "PackId",
          "CreatorId"
        ],
        "Boolean": [
          "IsTitlePack"
        ],
        "CPackCreatorRecipient[]": [
          "Recipients"
        ]
      },
      "methods": {
        "Recipients_Add": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Login"
            },
            {
              "identifier": "Integer",
              "argument": "UseCost"
            },
            {
              "identifier": "Integer",
              "argument": "GetCost"
            }
          ],
          "returns": "Void"
        },
        "Recipients_Remove": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Login"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CPackCreatorRecipient": {
      "props": {
        "Text": [
          "Login"
        ],
        "Integer": [
          "GetCost",
          "UseCost"
        ]
      }
    },
    "CPackCreatorTitleInfo": {
      "props": {
        "Ident": [
          "TitleId",
          "MakerTitleId"
        ],
        "Text": [
          "DisplayName",
          "Description",
          "InfoUrl",
          "DownloadUrl",
          "TitleVersion",
          "AllowedClientTitleVersion",
          "BaseTitleIds",
          "ForcedPlayerModel",
          "Packaging_ImageFileName",
          "Packaging_LogosFileName",
          "Packaging_Group",
          "Station_ManialinkUrl",
          "Menus_BgReplayFileName",
          "Menus_ManiaAppFileName",
          "Menus_MusicFileName",
          "Hud3dFontFileName",
          "MusicFolder"
        ],
        "Boolean": [
          "Solo_HasCampaign"
        ]
      }
    },
    "CPlayer": {
      "props": {
        "CUser": [
          "User"
        ],
        "Integer": [
          "RequestedClan"
        ],
        "Boolean": [
          "RequestsSpectate"
        ]
      }
    },
    "CPlaygroundClient": {
      "props": {
        "CMap": [
          "Map"
        ],
        "Integer": [
          "GameTime"
        ],
        "CUser": [
          "LocalUser"
        ],
        "CUIConfig": [
          "UI"
        ],
        "CServerInfo": [
          "ServerInfo"
        ],
        "Boolean": [
          "IsSpectator",
          "IsSpectatorClient",
          "UseClans",
          "UseForcedClans",
          "IsLoadingScreen",
          "DisablePlayingStateTracking"
        ],
        "CTeam[]": [
          "Teams"
        ]
      },
      "methods": {
        "QuitServer": {
          "params": [
            {
              "identifier": "Boolean",
              "argument": "Silent"
            }
          ],
          "returns": "Void"
        },
        "QuitServerAndSetResult": {
          "params": [
            {
              "identifier": "Boolean",
              "argument": "Silent"
            },
            {
              "identifier": "Text",
              "argument": "Type"
            },
            {
              "identifier": "Text[]",
              "argument": "Data"
            }
          ],
          "returns": "Void"
        },
        "JoinTeam1": {
          "params": [],
          "returns": "Void"
        },
        "JoinTeam2": {
          "params": [],
          "returns": "Void"
        },
        "RequestSpectatorClient": {
          "params": [
            {
              "identifier": "Boolean",
              "argument": "Spectator"
            }
          ],
          "returns": "Void"
        },
        "SepSpectateTarget": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Player"
            }
          ],
          "returns": "Void"
        },
        "ShowProfile": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Player"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CPresenceMgr": {
      "props": {
        "CTaskResult[]": [
          "TaskResults"
        ]
      },
      "methods": {
        "ReleaseTaskResult": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "TaskId"
            }
          ],
          "returns": "Void"
        },
        "SetPresence": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "ERichPresence",
              "argument": "UplayFlow"
            }
          ],
          "returns": "Void"
        },
        "GetOnlinePresenceForPlayers": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            }
          ],
          "returns": "CTaskResult_GetOnlinePresence"
        }
      }
    },
    "CPrivilegeMgr": {
      "props": {
        "CTaskResult[]": [
          "TaskResults"
        ]
      },
      "methods": {
        "ReleaseTaskResult": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "TaskId"
            }
          ],
          "returns": "Void"
        },
        "CheckPrivilege": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "EPrivilege",
              "argument": "Privilege"
            }
          ],
          "returns": "CTaskResult"
        },
        "CheckPrivilegeForAllUsers": {
          "params": [
            {
              "identifier": "EPrivilege",
              "argument": "Privilege"
            }
          ],
          "returns": "CTaskResult"
        },
        "CheckTargetedPrivilege": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "EPrivilege",
              "argument": "Privilege"
            }
          ],
          "returns": "CTaskResult_CheckTargetedPrivilege"
        },
        "CheckTargetedPrivilegeForAllUsers": {
          "params": [
            {
              "identifier": "EPrivilege",
              "argument": "Privilege"
            }
          ],
          "returns": "CTaskResult_CheckTargetedPrivilege"
        }
      }
    },
    "CRealLeaderBoardInfo": {
      "props": {
        "Integer": [
          "Rank"
        ],
        "Ident": [
          "UserId"
        ],
        "Text": [
          "Login",
          "DisplayName",
          "FileName",
          "ReplayUrl"
        ],
        "Real": [
          "Score"
        ]
      }      
    },
    "CReplayInfo": {
      "props": {
        "Text": [
          "MapUid",
          "Name",
          "Path",
          "FileName"
        ]
      }
    },
    "CScore": {
      "props": {
        "CUser": [
          "User"
        ],
        "Boolean": [
          "IsRegisteredForLadderMatch"
        ],
        "Real": [
          "LadderScore",
          "LadderMatchScoreValue"
        ],
        "Integer": [
          "LadderRankSortValue",
          "LadderClan"
        ]
      }
    },
    "CScoreMgr": {
      "props": {
        "CTaskResult[]": [
          "TaskResults"
        ]
      },
      "methods": {
        "TaskResult_Release": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "TaskId"
            }
          ],
          "returns": "Void"
        },
        "ScoreStatus_GetLocalStatus": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            }
          ],
          "returns": "ELocalScoreStatus"
        },
        "ScoreStatus_GetMasterServerStatus": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            }
          ],
          "returns": "EMasterServerScoreStatus"
        },
        "Playground_GetPlayerGhost": {
          "params": [
            {
              "identifier": "CPlayer",
              "argument": "GamePlayer"
            }
          ],
          "returns": "CGhost"
        },
        "Map_SetNewRecord": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "MapUid"
            },
            {
              "identifier": "Text",
              "argument": "Context"
            },
            {
              "identifier": "CGhost",
              "argument": "Ghost"
            }
          ],
          "returns": "CTaskResult"
        },
        "Map_GetRecord": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "MapUid"
            },
            {
              "identifier": "Text",
              "argument": "Context"
            }
          ],
          "returns": "Integer"
        },
        "Map_GetRecordGhost": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "MapUid"
            },
            {
              "identifier": "Text",
              "argument": "Context"
            }
          ],
          "returns": "CTaskResult_Ghost"
        },
        "Map_GetMultiAsyncLevel": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "MapUid"
            },
            {
              "identifier": "Text",
              "argument": "Context"
            }
          ],
          "returns": "Integer"
        },
        "Map_GetMultiAsyncLevelRecord": {
          "params": [
            {
              "identifier": "Text",
              "argument": "MapUid"
            },
            {
              "identifier": "Text",
              "argument": "Context"
            },
            {
              "identifier": "Integer",
              "argument": "MultiAsyncLevel"
            }
          ],
          "returns": "Integer"
        },
        "Map_GetMultiAsyncLevelRecordGhost": {
          "params": [
            {
              "identifier": "Text",
              "argument": "MapUid"
            },
            {
              "identifier": "Text",
              "argument": "Context"
            },
            {
              "identifier": "Integer",
              "argument": "MultiAsyncLevel"
            }
          ],
          "returns": "CTaskResult_Ghost"
        },
        "Map_GetSkillPoints": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "MapUid"
            },
            {
              "identifier": "Text",
              "argument": "Context"
            }
          ],
          "returns": "Integer"
        },
        "MapLeaderBoard_GetPlayerRanking": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "MapUid"
            },
            {
              "identifier": "Text",
              "argument": "Context"
            },
            {
              "identifier": "Text",
              "argument": "Zone"
            }
          ],
          "returns": "Integer"
        },
        "MapLeaderBoard_GetPlayerCount": {
          "params": [
            {
              "identifier": "Text",
              "argument": "MapUid"
            },
            {
              "identifier": "Text",
              "argument": "Context"
            },
            {
              "identifier": "Text",
              "argument": "Zone"
            }
          ],
          "returns": "Integer"
        },
        "MapLeaderBoard_GetPlayerList": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "MapUid"
            },
            {
              "identifier": "Text",
              "argument": "Context"
            },
            {
              "identifier": "Text",
              "argument": "Zone"
            },
            {
              "identifier": "Integer",
              "argument": "FromIndex"
            },
            {
              "identifier": "Integer",
              "argument": "Count"
            }
          ],
          "returns": "CTaskResult_NaturalLeaderBoardInfoList"
        },
        "Campaign_GetMultiAsyncLevel": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "CampaignId"
            }
          ],
          "returns": "Integer"
        },
        "Campaign_GetMultiAsyncLevelCount": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "CampaignId"
            },
            {
              "identifier": "Integer",
              "argument": "MultiAsyncLevel"
            }
          ],
          "returns": "Integer"
        },
        "Campaign_GetSkillPoints": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "CampaignId"
            }
          ],
          "returns": "Integer"
        },
        "Campaign_GetOpponentRecords": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "CampaignId"
            },
            {
              "identifier": "Text",
              "argument": "OpponentLogin"
            }
          ],
          "returns": "CWebServicesTaskResult_MapRecordListScript"
        },
        "Campaign_GetBuddiesMapRecord": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "CampaignId"
            },
            {
              "identifier": "Text",
              "argument": "MapUid"
            }
          ],
          "returns": "CTaskResult_BuddiesChallengeRecord"
        },
        "Campaign_IsBuddiesMapRecordDirty": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "CampaignId"
            },
            {
              "identifier": "Text",
              "argument": "MapUid"
            }
          ],
          "returns": "Boolean"
        },
        "Campaign_GetBuddiesMapRecordsComparison": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "CampaignId"
            }
          ],
          "returns": "CTaskResult_BuddiesChallengeRecordsComparison"
        },
        "Campaign_GetBuddyMapRecordsComparison": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "OpponentLogin"
            },
            {
              "identifier": "Text",
              "argument": "CampaignId"
            }
          ],
          "returns": "CTaskResult_BuddyChallengeRecordsComparison"
        },
        "CampaignLeaderBoard_GetPlayerRanking": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "CampaignId"
            },
            {
              "identifier": "Text",
              "argument": "Zone"
            },
            {
              "identifier": "Boolean",
              "argument": "UseSkillPoints"
            }
          ],
          "returns": "Integer"
        },
        "CampaignLeaderBoard_GetPlayerCount": {
          "params": [
            {
              "identifier": "Text",
              "argument": "CampaignId"
            },
            {
              "identifier": "Text",
              "argument": "Zone"
            },
            {
              "identifier": "Boolean",
              "argument": "UseSkillPoints"
            }
          ],
          "returns": "Integer"
        },
        "CampaignLeaderBoard_GetPlayerList": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "CampaignId"
            },
            {
              "identifier": "Text",
              "argument": "Zone"
            },
            {
              "identifier": "Boolean",
              "argument": "UseSkillPoints"
            },
            {
              "identifier": "Integer",
              "argument": "FromIndex"
            },
            {
              "identifier": "Integer",
              "argument": "Count"
            }
          ],
          "returns": "Integer"
        },
        "Multiplayer_AddToScore": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Real",
              "argument": "ScoreDiff"
            },
            {
              "identifier": "Integer",
              "argument": "Timestamp"
            }
          ],
          "returns": "Void"
        },
        "MultiplayerLeaderBoard_GetPlayerRanking": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "Zone"
            }
          ],
          "returns": "Integer"
        },
        "MultiplayerLeaderBoard_GetPlayerCount": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Zone"
            }
          ],
          "returns": "Integer"
        },
        "GlobalLeaderBoard_GetPlayerRanking": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "Zone"
            }
          ],
          "returns": "Integer"
        },
        "GlobalLeaderBoard_GetPlayerCount": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Zone"
            }
          ],
          "returns": "Integer"
        },
        "GlobalLeaderBoard_GetPlayerList": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "UserId"
            },
            {
              "identifier": "Text",
              "argument": "Zone"
            },
            {
              "identifier": "Integer",
              "argument": "FromIndex"
            },
            {
              "identifier": "Integer",
              "argument": "Count"
            }
          ],
          "returns": "CTaskResult_RealLeaderBoardInfoList"
        }
      }
    },
    "CServerAdmin": {
      "props": {
        "CServerInfo": [
          "ServerInfo"
        ]
      },
      "methods": {
        "AutoTeamBalance": {
          "params": [],
          "returns": "Void"
        },
        "KickUser": {
          "params": [
            {
              "identifier": "CUser",
              "argument": "User"
            },
            {
              "identifier": "Text",
              "argument": "Reason"
            }
          ],
          "returns": "Boolean"
        },
        "SetLobbyInfo": {
          "params": [
            {
              "identifier": "Boolean",
              "argument": "IsLobby"
            },
            {
              "identifier": "Integer",
              "argument": "LobbyPlayerCount"
            },
            {
              "identifier": "Integer",
              "argument": "LobbyMaxPlayerCount"
            },
            {
              "identifier": "Real",
              "argument": "LobbyPlayerLevel"
            }
          ],
          "returns": "Void"
        },
        "SendToServerAfterMatch": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ServerUrl"
            }
          ],
          "returns": "Void"
        },
        "CustomizeQuitDialog": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ManialinkPage"
            },
            {
              "identifier": "Text",
              "argument": "SendToServerUrl"
            },
            {
              "identifier": "Boolean",
              "argument": "ProposeAddToFavorites"
            },
            {
              "identifier": "Integer",
              "argument": "ForceDelay"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CServerInfo": {
      "props": {
        "Text": [
          "ServerName",
          "ServerLogin",
          "JoinLink",
          "Comment",
          "ServerVersionBuild",
          "ServerLevelText",
          "ModeName",
          "SendToServerAfterMatchUrl"
        ],
        "Integer": [
          "PlayerCount",
          "MaxPlayerCount",
          "SpectatorCount",
          "MaxSpectatorCount",
          "ServerLevel",
          "NbChallenges"
        ],
        "Real": [
          "PlayersLevelMin",
          "PlayersLevelAvg",
          "PlayersLevelMax",
          "LadderServerLimitMax",
          "LadderServerLimitMin"
        ],
        "Text[]": [
          "PlayerNames",
          "ChallengeNames"
        ],
        "Boolean": [
          "HasBuddies",
          "IsFavourite",
          "IsLobbyServer",
          "IsPrivate",
          "IsPrivateForSpectator"
        ]
      }
    },
    "CSmAction": {
      "props": {
        "Integer": [
          "Now",
          "Variant",
          "Energy",
          "EnergyMax",
          "EnergyCost",
          "State_Integer1",
          "Cooldown"
        ],
        "CSmPlayer[]": [
          "Players"
        ],
        "CSmPlayer": [
          "Owner"
        ],
        "Boolean": [
          "IsActive",
          "IsBound",
          "EnergyReload",
          "State_Boolean1",
          "IsJumping",
          "IsGliding",
          "IsAttractor",
          "IsFlying",
          "IsSliding",
          "IsRunning",
          "IsFrozen",
          "IsSneaking",
          "IsFreeLooking",
          "HasNoPlayerCollision"
        ],
        "Real": [
          "AmmoGain"
        ],
        "Ident": [
          "State_EntityId1"
        ],
        "CSmActionEvent[]": [
          "PendingEvents"
        ]
      },
      "methods": {
        "SendRulesEvent": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Param1"
            },
            {
              "identifier": "Text[]",
              "argument": "Param2"
            },
            {
              "identifier": "CSmPlayer",
              "argument": "Shooter"
            },
            {
              "identifier": "CSmPlayer",
              "argument": "Victim"
            }
          ],
          "returns": "Void"
        },
        "Anim_GetModelId": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ModelName"
            }
          ],
          "returns": "Ident"
        },
        "Anim_PlayAtPosition": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "AnimModelId"
            },
            {
              "identifier": "Vec3",
              "argument": "Position"
            },
            {
              "identifier": "Vec3",
              "argument": "Direction"
            }
          ],
          "returns": "Ident"
        },
        "Anim_PlayOnPlayer": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "AnimModelId"
            },
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            }
          ],
          "returns": "Ident"
        },
        "Anim_Stop": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "AnimId"
            }
          ],
          "returns": "Void"
        },
        "Projectile_GetModelId": {
          "params": [
            {
              "identifier": "Text",
              "argument": "ModelName"
            }
          ],
          "returns": "Ident"
        },
        "Projectile_CreateAtLocation": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "ProjectileModelId"
            },
            {
              "identifier": "CSmPlayer",
              "argument": "PlayerToIgnore"
            },
            {
              "identifier": "Vec3",
              "argument": "InitialPosition"
            },
            {
              "identifier": "Vec3",
              "argument": "InitialDirection"
            },
            {
              "identifier": "Vec3",
              "argument": "InitialVelocity"
            }
          ],
          "returns": "Ident"
        },
        "Projectile_CreateOnPlayer": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "ProjectileModelId"
            },
            {
              "identifier": "CSmPlayer",
              "argument": "Shooter"
            }
          ],
          "returns": "Ident"
        },
        "Cooldown_IsReady": {
          "params": [],
          "returns": "Boolean"
        },
        "Cooldown_Start": {
          "params": [],
          "returns": "Void"
        },
        "Shield_CreateAtLocation": {
          "params": [
            {
              "identifier": "Vec3",
              "argument": "Position"
            },
            {
              "identifier": "Vec3",
              "argument": "Direction"
            }
          ],
          "returns": "Ident"
        },
        "Shield_CreateOnPlayer": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "ShieldOwner"
            }
          ],
          "returns": "Ident"
        },
        "Shield_Destroy": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "ShieldId"
            }
          ],
          "returns": "Void"
        },
        "Shield_Exists": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "ShieldId"
            }
          ],
          "returns": "Boolean"
        },
        "Shield_GetArmor": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "ShieldId"
            }
          ],
          "returns": "Integer"
        },
        "Shield_SetArmor": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "ShieldId"
            },
            {
              "identifier": "Integer",
              "argument": "ShieldArmor"
            }
          ],
          "returns": "Void"
        },
        "Shield_GetIsActive": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "ShieldId"
            }
          ],
          "returns": "Boolean"
        },
        "Shield_SetIsActive": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "ShieldId"
            },
            {
              "identifier": "Boolean",
              "argument": "SheildIsActive"
            }
          ],
          "returns": "Void"
        },
        "Shield_GetArmorMax": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "ShieldId"
            }
          ],
          "returns": "Integer"
        },
        "Shield_GetTickReload": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "ShieldId"
            }
          ],
          "returns": "Integer"
        },
        "Shield_GetCooldown": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "ShieldId"
            }
          ],
          "returns": "Integer"
        },
        "GetPlayerAmmo": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            }
          ],
          "returns": "Integer"
        },
        "GetPlayerAmmoMax": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            }
          ],
          "returns": "Integer"
        }
      }
    },
    "CSmActionEvent": {
      "props": {
        "EType": [
          "Type"
        ],
        "CSmPlayer": [
          "Player"
        ],
        "CSmObject": [
          "Object"
        ],
        "Integer": [
          "Damage",
          "ContextId",
          "Shield"
        ],
        "Ident": [
          "ProjectileModelId"
        ],
        "Vec3": [
          "Position",
          "Direction",
          "Normal"
        ]
      }
    },
    "CSmBase": {
      "props": {
        "Integer": [
          "Clan",
          "NumberOfCollectors"
        ],
        "Boolean": [
          "IsActive"
        ]
      }
    },
    "CSmBlock": {
      "props": {
        "CSmBase": [
          "Base"
        ]
      }
    },
    "CSmBlockPole": {
      "props": {
        "Boolean": [
          "Captured"
        ],
        "CSmSector": [
          "Sector"
        ],
        "CSmGauge": [
          "Gauge"
        ]
      }
    },
    "CSmGauge": {
      "props": {
        "Integer": [
          "Clan",
          "Value",
          "Max",
          "Speed"
        ],
        "Real": [
          "ValueReal"
        ]
      }
    },
    "CSmLandmark": {
      "props": {
        "Text": [
          "Tag"
        ],
        "Integer": [
          "Order"
        ],
        "Vec3": [
          "Position",
          "DirFront"
        ]
      }
    },
    "CSmMapBase": {
      "props": {
        "Integer": [
          "Clan",
          "NumberOfCollectors"
        ],
        "Boolean": [
          "IsActive"
        ]
      }
    },
    "CSmMapBotPath": {
      "props": {
        "Integer": [
          "Clan"
        ],
        "Vec3[]": [
          "Path"
        ],
        "Boolean": [
          "IsFlying"
        ]
      }
    },
    "CSmMapBotSpawn": {
      "props": {
        "Boolean": [
          "IsFlying"
        ],
        "Ident": [
          "BotModelId"
        ]
      }
    },
    "CSmMapGate": {
      "props": {
        "Integer": [
          "Clan",
          "AutoCloseDelay",
          "AutoOpenSpeed"
        ],
        "Boolean": [
          "Automatic",
          "ManualClosed",
          "AutoClosed",
          "AutoIsActive"
        ]
      }
    },
    "CSmMapGauge": {
      "props": {
        "Integer": [
          "Clan",
          "Value",
          "Max",
          "Speed"
        ],
        "Real": [
          "ValueReal"
        ],
        "Boolean": [
          "Captured"
        ]
      }
    },
    "CSmMapLandmark": {
      "props": {
        "Text": [
          "Tag"
        ],
        "Integer": [
          "Order"
        ],
        "Vec3": [
          "Position"
        ],
        "CSmMapBase": [
          "Base"
        ],
        "CSmMapGate": [
          "Gate"
        ],
        "CSmMapGauge": [
          "Gauge"
        ],
        "CSmMapSector": [
          "Sector"
        ],
        "CSmMapPlayerSpawn": [
          "PlayerSpawn"
        ],
        "CSmMapBotPath": [
          "BotPath"
        ],
        "CSmMapBotSpawn": [
          "BotSpawn"
        ],
        "CSmMapObjectAnchor": [
          "ObjectAnchor"
        ]
      }
    },
    "CSmMapObjectAnchor": {
      "props": {
        "Text": [
          "ItemName"
        ],
        "Ident": [
          "ItemModelId"
        ]
      }
    },
    "CSmMapPlayerSpawn": {
      "props": {}
    },
    "CSmMapSector": {
      "props": {
        "Ident[]": [
          "PlayersIds"
        ],
        "Text": [
          "Tag"
        ]
      }
    },
    "CSmMapType": {
      "props": {
        "CSmMode": [
          "Mode"
        ],
        "CSmPlayer[]": [
          "AllPlayers",
          "Players"
        ]
      }
    },
    "CSmMlScriptIngame": {
      "props": {
        "Integer": [
          "ArenaNow"
        ],
        "CSmPlayer": [
          "InputPlayer",
          "GUIPlayer"
        ],
        "CSmPlayer[]": [
          "Players"
        ],
        "CSmScore[]": [
          "Scores"
        ],
        "Integer[]": [
          "ClanScores"
        ],
        "Boolean": [
          "HideResumePlayingButton"
        ],
        "CSmMapBase[]": [
          "MapBases"
        ],
        "CSmMapLandmark[]": [
          "MapLandmarks",
          "MapLandmarks_PlayerSpawn",
          "MapLandmarks_Gauge",
          "MapLandmarks_Sector",
          "MapLandmarks_BotPath",
          "MapLandmarks_BotSpawn",
          "MapLandmarks_ObjectAnchor",
          "MapLandmarks_Gate"
        ]
      }
    },
    "CSmMode": {
      "props": {
        "Integer": [
          "StartTime",
          "EndTime",
          "SpawnInvulnerabilityDuration",
          "GameplayVersion",
          "PlayersNbTotal",
          "PlayersNbAlive",
          "PlayersNbDead",
          "ClansNbTotal",
          "ClansNbAlive",
          "ClansNbDead"
        ],
        "Boolean": [
          "UseClans",
          "UseForcedClans",
          "UsePvPCollisions",
          "UsePvPWeapons",
          "UseInterractiveScreensIn3d",
          "UseLaserVsBullets",
          "UseLaserSkewering",
          "UsePlayerTagging",
          "UseBeaconsWithRecipients",
          "UseAmmoBonusOnHit",
          "UseSameWallJump",
          "UseDefaultActionEvents",
          "UseAllies",
          "UseAutoSpawnBots",
          "ForceNavMapsComputation",
          "UseProtectClanmates"
        ],
        "EGameplay": [
          "Gameplay"
        ],
        "Real": [
          "OffZoneRadius",
          "OffZoneRadiusSpeed"
        ],
        "Ident": [
          "OffZoneCenterLandmarkId"
        ],
        "Integer[]": [
          "ClansNbPlayers",
          "ClansNbPlayersAlive",
          "ClanScores"
        ],
        "CSmPlayer[]": [
          "Players",
          "BotPlayers",
          "Spectators",
          "AllPlayers"
        ],
        "CSmModeEvent[]": [
          "PendingEvents"
        ],
        "CSmMapBase[]": [
          "MapBases"
        ],
        "CSmMapLandmark[]": [
          "MapLandmarks",
          "MapLandmarks_PlayerSpawn",
          "MapLandmarks_Gauge",
          "MapLandmarks_Sector",
          "MapLandmarks_BotPath",
          "MapLandmarks_ObjectAnchor",
          "MapLandmarks_Gate"
        ],
        "CSmScore[]": [
          "Scores"
        ],
        "CSmObject[]": [
          "Objects"
        ]
      },
      "methods": {
        "PassOn": {
          "params": [
            {
              "identifier": "CSmModeEvent",
              "argument": "Event"
            }
          ],
          "returns": "Void"
        },
        "Discard": {
          "params": [
            {
              "identifier": "CSmModeEvent",
              "argument": "Event"
            }
          ],
          "returns": "Void"
        },
        "SpawnPlayer": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            },
            {
              "identifier": "Integer",
              "argument": "ClanNum"
            },
            {
              "identifier": "Integer",
              "argument": "Armor"
            },
            {
              "identifier": "CSmMapPlayerSpawn",
              "argument": "PlayerSpawn"
            },
            {
              "identifier": "Integer",
              "argument": "ActivationDate"
            }
          ],
          "returns": "Void"
        },
        "SpawnBotPlayer": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            },
            {
              "identifier": "Integer",
              "argument": "ClanNum"
            },
            {
              "identifier": "Integer",
              "argument": "Armor"
            },
            {
              "identifier": "CSmMapBotPath",
              "argument": "BotPath"
            },
            {
              "identifier": "Integer",
              "argument": "ActivationDate"
            }
          ],
          "returns": "Void"
        },
        "UnspawnPlayer": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            }
          ],
          "returns": "Void"
        },
        "ClearScores": {
          "params": [],
          "returns": "Void"
        },
        "SetPlayerClan": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            },
            {
              "identifier": "Integer",
              "argument": "ClanNum"
            }
          ],
          "returns": "Void"
        },
        "SetPlayerWeapon": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            },
            {
              "identifier": "EWeapon",
              "argument": "DefaultWeapon"
            },
            {
              "identifier": "Boolean",
              "argument": "AutoSwitchWeapon"
            }
          ],
          "returns": "Void"
        },
        "SetPlayerReloadAllWeapons": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            },
            {
              "identifier": "Boolean",
              "argument": "ReloadAllWeapons"
            }
          ],
          "returns": "Void"
        },
        "SetPlayerAmmo": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            },
            {
              "identifier": "EWeapon",
              "argument": "Weapon"
            },
            {
              "identifier": "Integer",
              "argument": "Count"
            }
          ],
          "returns": "Void"
        },
        "GetPlayerAmmo": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            },
            {
              "identifier": "EWeapon",
              "argument": "Weapon"
            }
          ],
          "returns": "Integer"
        },
        "AddPlayerAmmo": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            },
            {
              "identifier": "EWeapon",
              "argument": "Weapon"
            },
            {
              "identifier": "Real",
              "argument": "DeltaCount"
            }
          ],
          "returns": "Void"
        },
        "SetPlayerAmmoMax": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            },
            {
              "identifier": "EWeapon",
              "argument": "Weapon"
            },
            {
              "identifier": "Integer",
              "argument": "Count"
            }
          ],
          "returns": "Void"
        },
        "GetPlayerAmmoMax": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            },
            {
              "identifier": "EWeapon",
              "argument": "Weapon"
            }
          ],
          "returns": "Integer"
        },
        "AddPlayerArmor": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Victim"
            },
            {
              "identifier": "Integer",
              "argument": "DeltaArmor"
            },
            {
              "identifier": "CSmPlayer",
              "argument": "Shooter"
            },
            {
              "identifier": "Integer",
              "argument": "ShooterPoints"
            }
          ],
          "returns": "Void"
        },
        "RemovePlayerArmor": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Victim"
            },
            {
              "identifier": "Integer",
              "argument": "DeltaArmor"
            },
            {
              "identifier": "CSmPlayer",
              "argument": "Shooter"
            },
            {
              "identifier": "Integer",
              "argument": "ShooterPoints"
            }
          ],
          "returns": "Void"
        },
        "GetWeaponNum": {
          "params": [
            {
              "identifier": "EWeapon",
              "argument": "Weapon"
            }
          ],
          "returns": "Integer"
        },
        "CanRespawnPlayer": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            }
          ],
          "returns": "Boolean"
        },
        "RespawnPlayer": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            },
            {
              "identifier": "CSmMapLandmark",
              "argument": "CheckpointLandmark"
            }
          ],
          "returns": "Void"
        },
        "CreateBotPlayer": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "ModelId"
            },
            {
              "identifier": "Integer",
              "argument": "TeamNum"
            }
          ],
          "returns": "CSmPlayer"
        },
        "DestroyBotPlayer": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "BotPlayer"
            }
          ],
          "returns": "Void"
        },
        "DestroyAllBotPlayers": {
          "params": [],
          "returns": "Void"
        },
        "ScriptedBot_Move": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "BotPlayer"
            },
            {
              "identifier": "Vec3",
              "argument": "Goal"
            }
          ],
          "returns": "Void"
        },
        "ScriptedBot_MoveDelta": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "BotPlayer"
            },
            {
              "identifier": "Vec3",
              "argument": "Delta"
            }
          ],
          "returns": "Void"
        },
        "ScriptedBot_MoveAndAim": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "BotPlayer"
            },
            {
              "identifier": "Vec3",
              "argument": "Goal"
            }
          ],
          "returns": "Void"
        },
        "ScriptedBot_MoveDeltaAndAim": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "BotPlayer"
            },
            {
              "identifier": "Vec3",
              "argument": "Delta"
            }
          ],
          "returns": "Void"
        },
        "ScriptedBot_Aim": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "BotPlayer"
            },
            {
              "identifier": "Vec3",
              "argument": "Goal"
            }
          ],
          "returns": "Void"
        },
        "ScriptedBot_AimDelta": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "BotPlayer"
            },
            {
              "identifier": "Real",
              "argument": "DeltaYaw"
            },
            {
              "identifier": "Real",
              "argument": "DeltaPitch"
            }
          ],
          "returns": "Void"
        },
        "ScriptedBot_RequestAction": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "BotPlayer"
            }
          ],
          "returns": "Void"
        },
        "ScriptedBot_RequestGunTrigger": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "BotPlayer"
            }
          ],
          "returns": "Void"
        },
        "ActionLoad": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            },
            {
              "identifier": "EActionSlot",
              "argument": "ActionSlot"
            },
            {
              "identifier": "Ident",
              "argument": "ModelId"
            }
          ],
          "returns": "Void"
        },
        "ActionBind": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            },
            {
              "identifier": "EActionSlot",
              "argument": "ActionSlot"
            },
            {
              "identifier": "EActionInput",
              "argument": "ActionInput"
            }
          ],
          "returns": "Void"
        },
        "ActionSetVariant": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            },
            {
              "identifier": "EActionSlot",
              "argument": "ActionSlot"
            },
            {
              "identifier": "Integer",
              "argument": "ActionVariant"
            }
          ],
          "returns": "Void"
        },
        "SetNbFakePlayers": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "NbClan1"
            },
            {
              "identifier": "Integer",
              "argument": "NbClan2"
            }
          ],
          "returns": "Void"
        },
        "ObjectCreate": {
          "params": [
            {
              "identifier": "Ident",
              "argument": "ModelId"
            }
          ],
          "returns": "CSmObject"
        },
        "ObjectDestroy": {
          "params": [
            {
              "identifier": "CSmObject",
              "argument": "Object"
            }
          ],
          "returns": "Void"
        },
        "ObjectDestroyAll": {
          "params": [],
          "returns": "Void"
        },
        "Replay_SaveAttackScore": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            },
            {
              "identifier": "Integer",
              "argument": "Score"
            }
          ],
          "returns": "Void"
        },
        "Replay_SaveDefenseScore": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            },
            {
              "identifier": "Integer",
              "argument": "Score"
            }
          ],
          "returns": "Void"
        },
        "Replay_SaveTeamScore": {
          "params": [
            {
              "identifier": "Integer",
              "argument": "Team"
            },
            {
              "identifier": "Integer",
              "argument": "Score"
            }
          ],
          "returns": "Void"
        },
        "Replay_SavePlayerOfInterest": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            }
          ],
          "returns": "Void"
        },
        "Replay_SaveWinner": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            }
          ],
          "returns": "Void"
        },
        "Replay_SaveInterface": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CTmMlScriptIngame": {
      "props": {
        "CTmMlPlayer": [
          "InputPlayer",
          "GUIPlayer"
        ],
        "Integer": [
          "NbLaps",
          "MapNbLaps"
        ],
        "Boolean": [
          "IndependantLaps",
          "MapIsLapRace"
        ],
        "CTmMlPlayer[]": [
          "Players"
        ],
        "CTmScore[]": [
          "Scores"
        ],
        "Integer[]": [
          "ClanScores"
        ],
        "Vec3": [
          "MapStartLinePos"
        ],
        "Vec3[]": [
          "MapCheckpointPos",
          "MapFinishLinePos"
        ]
      }
    },
    "CTmMode": {
      "props": {
        "CTmPlayer[]": [
          "AllPlayers",
          "Spectators",
          "Players",
          "PlayersRacing",
          "PlayersWaiting"
        ],
        "CTmScore[]": [
          "Scores"
        ],
        "Integer": [
          "Clan1Score",
          "Clan2Score",
          "ClansNbTotal",
          "CutOffTimeLimit",
          "NbLaps",
          "UiScoresPointsLimit",
          "ForceMaxOpponents",
          "MapNbLaps"
        ],
        "Integer[]": [
          "ClanScores",
          "ClansNbPlayers"
        ],
        "CTmModeEvent[]": [
          "PendingEvents"
        ],
        "Boolean": [
          "IndependantLaps",
          "UseClans",
          "UseForcedClans",
          "UiRounds",
          "UiLaps",
          "UiStuntsMode",
          "UiDisplayStuntsNames",
          "UiDisableHelpMessage",
          "HideOpponents",
          "EnableLegacyXmlRpcCallbacks",
          "MedalGhost_ShowGold",
          "MedalGhost_ShowSilver",
          "MedalGhost_ShowBronze",
          "MapIsLapRace"
        ],
        "ETMRespawnBehaviour": [
          "RespawnBehaviour"
        ],
        "ETmRaceChronoBehaviour": [
          "UiRaceChrono"
        ],
        "EPersonalGhost": [
          "PersonalGhost"
        ],
        "Vec3": [
          "MapStartLinePos"
        ],
        "Vec3[]": [
          "MapCheckpointPos",
          "MapFinishLinePos"
        ]
      },
      "methods": {
        "PassOn": {
          "params": [
            {
              "identifier": "CTmModeEvent",
              "argument": "Event"
            }
          ],
          "returns": "Void"
        },
        "Discard": {
          "params": [
            {
              "identifier": "CTmModeEvent",
              "argument": "Event"
            }
          ],
          "returns": "Void"
        },
        "SpawnPlayer": {
          "params": [
            {
              "identifier": "CTmPlayer",
              "argument": "Player"
            },
            {
              "identifier": "Integer",
              "argument": "ClanNum"
            },
            {
              "identifier": "Integer",
              "argument": "RaceStartTime"
            }
          ],
          "returns": "Void"
        },
        "UnspawnPlayer": {
          "params": [
            {
              "identifier": "CTmPlayer",
              "argument": "Player"
            }
          ],
          "returns": "Void"
        },
        "SetPlayerClan": {
          "params": [
            {
              "identifier": "CTmPlayer",
              "argument": "Player"
            },
            {
              "identifier": "Integer",
              "argument": "ClanNum"
            }
          ],
          "returns": "Void"
        },
        "Scores_Sort": {
          "params": [
            {
              "identifier": "ETmScoreSortOrder",
              "argument": "SortOrder"
            }
          ],
          "returns": "Void"
        },
        "Scores_Clear": {
          "params": [],
          "returns": "Void"
        },
        "Ladder_ComputeRank": {
          "params": [
            {
              "identifier": "ETmScoreSortOrder",
              "argument": "SortOrder"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CTmMapType": {
      "props": {
        "CTmMode": [
          "Mode"
        ],
        "CTmPlayer[]": [
          "AllPlayers",
          "Players"
        ]
      }
    },
    "CUser": {
      "props": {
        "Text": [
          "Login",
          "Name",
          "AvatarUrl",
          "ZonePath",
          "ZoneFlagUrl",
          "CountryFlagUrl",
          "Language",
          "Description",
          "ClubLink",
          "BroadcastTVLogin",
          "SteamUserId",
          "LadderZoneName",
          "LadderZoneFlagUrl"
        ],
        "Vec3": [
          "Color"
        ],
        "Integer": [
          "FameStars",
          "LadderRank",
          "LadderTotal",
          "RequestedClan"
        ],
        "EEchelon": [
          "Echelon"
        ],
        "Boolean": [
          "IsBeginner",
          "RequestsSpectate",
          "IsFakeUser"
        ],
        "Real": [
          "LadderPoints"
        ],
        "Integer[]": [
          "Tags_Favored_Indices"
        ],
        "Text[]": [
          "Tags_Id",
          "Tags_Comments",
          "Tags_Deliverer",
          "AlliesConnected"
        ],
        "ETagType[]": [
          "Tags_Type"
        ],
        "EStereoDisplayMode": [
          "StereoDisplayMode"
        ]
      }
    },
    "CTitle": {
      "props": {
        "Text": [
          "TitleId",
          "BaseTitleId",
          "Name",
          "Desc",
          "InfoUrl",
          "DownloadUrl",
          "TitleVersion"
        ]
      }
    },
    "CXmlManager": {
      "props": {
        "CXmlDocument[]": [
          "Documents"
        ]
      },
      "methods": {
        "Create": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Contents"
            },
            {
              "identifier": "Boolean",
              "argument": "GenerateText"
            },
            {
              "identifier": "Boolean",
              "argument": "GenerateTextRaw"
            },
            {
              "identifier": "Boolean",
              "argument": "GenerateTextResursive"
            }
          ],
          "returns": "CXmlDocument"
        },
        "Destroy": {
          "params": [
            {
              "identifier": "CXmlDocument",
              "argument": "Document"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CUILayer": {
      "props": {
        "Boolean": [
          "IsVisible"
        ],
        "EUILayerType": [
          "Type"
        ],
        "Text": [
          "AttachId",
          "ManialinkPage"
        ],
        "CMlPage": [
          "LocalPage"
        ]
      }
    },
    "CSmPlayer": {
      "props": {
        "CSmScore": [
          "Score"
        ],
        "ESpawnStatus": [
          "SpawnStatus"
        ],
        "Integer": [
          "StartTime",
          "EndTime",
          "CurWeapon",
          "CurAmmo",
          "CurAmmoMax",
          "CurAmmoUnit",
          "Armor",
          "ArmorMax",
          "ArmorGain",
          "ArmorReplenishGain",
          "Stamina",
          "CurrentClan",
          "IdleDuration"
        ],
        "Real": [
          "AmmoGain",
          "AmmoPower",
          "ArmorPower",
          "StaminaMax",
          "StaminaGain",
          "StaminaPower",
          "SpeedPower",
          "JumpPower",
          "EnergyLevel",
          "ThrowSpeed",
          "AimYaw",
          "AimPitch",
          "Speed"
        ],
        "Boolean": [
          "AutoSwitchWeapon",
          "AllowWallJump",
          "AllowProgressiveJump",
          "UseAlternateWeaponVisual",
          "IsHighlighted",
          "HasShield",
          "IsUnderground",
          "IsTouchingGround",
          "IsInAir",
          "IsOnTechGround",
          "IsOnTechLaser",
          "IsOnTechArrow",
          "IsOnTechArmor",
          "IsOnTechSafeZone",
          "IsOnTech",
          "IsOnTechNoWeapon",
          "IsInWater",
          "IsInOffZone",
          "IsCapturing",
          "IsFakePlayer",
          "IsBot"
        ],
        "Vec3": [
          "ForceColor",
          "Position",
          "AimDirection",
          "Velocity"
        ],
        "Ident": [
          "ForceModelId"
        ],
        "CSmMapLandmark": [
          "CapturedLandmark"
        ],
        "CSmObject[]": [
          "Objects"
        ],
        "CSmPlayerDriver": [
          "Driver"
        ]
      }
    },
    "CSmModeEvent": {
      "props": {
        "EType": [
          "Type"
        ],
        "CSmPlayer": [
          "Player",
          "Shooter",
          "Victim"
        ],
        "Integer": [
          "Damage",
          "ShooterPoints",
          "WeaponNum",
          "ShooterWeaponNum",
          "VictimWeaponNum",
          "CommandValueInteger",
          "ActionChange"
        ],
        "CSmObject": [
          "VictimObject",
          "Object"
        ],
        "Real": [
          "Height",
          "MissDist",
          "CommandValueReal"
        ],
        "Boolean": [
          "ShooterUsedAction",
          "VictimUsedAction",
          "PlayerWasSpawned",
          "PlayerWasInLadderMatch",
          "GiveUp",
          "CommandValueBoolean"
        ],
        "EActionSlot": [
          "ShooterActionSlot",
          "VictimActionSlot",
          "Action_Slot"
        ],
        "Text": [
          "ShooterActionId",
          "VictimActionId",
          "ActionId",
          "Param1",
          "CommandName",
          "CommandValueText"
        ],
        "EActionInput": [
          "ActionInput"
        ],
        "Text[]": [
          "Param2"
        ],
        "CSmMapSector": [
          "Sector"
        ],
        "CSmBlockPole": [
          "BlockPole"
        ],
        "CSmMapLandmark": [
          "Landmark"
        ],
        "Ident": [
          "PlayerId"
        ],
        "CUser": [
          "User"
        ],
        "Vec3": [
          "PlayerLastPosition",
          "PlayerLastAimDirection"
        ]
      }
    },
    "CSmScore": {
      "props": {
        "Integer": [
          "TeamNum",
          "Points",
          "RoundPoints",
          "NbEliminationsInflicted",
          "NbEliminationsTaken",
          "NbRespawnsRequested",
          "DamageInflicted",
          "DamageTaken"
        ]
      },
      "methods": {
        "Clear": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CSmObject": {
      "props": {
        "EStatus": [
          "Status"
        ],
        "Ident": [
          "ModelId"
        ],
        "CSmPlayer": [
          "Player"
        ],
        "Vec3": [
          "Position",
          "Vel"
        ],
        "Integer": [
          "MachineState"
        ],
        "Boolean": [
          "Throwable"
        ]
      },
      "methods": {
        "SetAnchor": {
          "params": [
            {
              "identifier": "CSmMapObjectAnchor",
              "argument": "ObjectAnchor"
            }
          ],
          "returns": "Void"
        },
        "SetPlayer": {
          "params": [
            {
              "identifier": "CSmPlayer",
              "argument": "Player"
            }
          ],
          "returns": "Void"
        },
        "SetPosition": {
          "params": [
            {
              "identifier": "Vec3",
              "argument": "Position"
            }
          ],
          "returns": "Void"
        },
        "SetPositionAndVel": {
          "params": [
            {
              "identifier": "Vec3",
              "argument": "Position"
            },
            {
              "identifier": "Vec3",
              "argument": "Vel"
            }
          ],
          "returns": "Void"
        },
        "SetUnspawned": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CTmMlPlayer": {
      "props": {
        "Integer": [
          "CurrentClan",
          "RaceStartTime",
          "LapStartTime",
          "CurrentNbLaps",
          "CurTriggerIndex",
          "CurCheckpointRaceTime",
          "CurCheckpointLapTime",
          "DisplaySpeed"
        ],
        "ERaceState": [
          "RaceState"
        ],
        "Boolean": [
          "IsSpawned"
        ],
        "CTrackManiaScore": [
          "Score"
        ],
        "CTmResult": [
          "CurRace",
          "CurLap"
        ],
        "Real": [
          "AccelCoef",
          "ControlCoef",
          "GravityCoef",
          "AimYaw",
          "AimPitch",
          "Distance",
          "Speed"
        ],
        "Vec3": [
          "Position",
          "AimDirection"
        ]
      }
    },
    "CTmScore": {
      "props": {
        "Integer": [
          "TeamNum",
          "Points",
          "PrevRaceDeltaPoints"
        ],
        "CTmResult": [
          "BestRace",
          "BestLap",
          "PrevRace",
          "TempResult"
        ]
      },
      "methods": {
        "Clear": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CTmPlayer": {
      "props": {
        "Integer": [
          "CurrentClan",
          "RaceStartTime",
          "CurrentNbLaps",
          "CurTriggerIndex"
        ],
        "CTmScore": [
          "Score"
        ],
        "Boolean": [
          "IsSpawned"
        ],
        "CTmResult": [
          "CurRace",
          "CurLap"
        ],
        "Vec3": [
          "Position",
          "AimDirection"
        ],
        "Real": [
          "AimYaw",
          "AimPitch",
          "AccelCoef",
          "ControlCoef",
          "GravityCoef"
        ]
      }
    },
    "CTmModeEvent": {
      "props": {
        "EType": [
          "Type"
        ],
        "CTmPlayer": [
          "Player"
        ],
        "Integer": [
          "RaceTime",
          "CheckpointInRace",
          "CheckpointInLap",
          "LapTime",
          "StuntsScore",
          "NbRespawns",
          "Angle",
          "Points",
          "Combo",
          "CommandValueInteger"
        ],
        "Boolean": [
          "IsEndLap",
          "IsEndRace",
          "IsStraight",
          "IsReverse",
          "IsMasterJump",
          "PlayerWasSpawned",
          "PlayerWasInLadderMatch",
          "CommandValueBoolean"
        ],
        "Ident": [
          "BlockId"
        ],
        "Real": [
          "Speed",
          "Distance",
          "Damages",
          "Factor",
          "CommandValueReal"
        ],
        "EStuntFigure": [
          "StuntFigure"
        ],
        "CUser": [
          "User"
        ],
        "Text": [
          "CommandName",
          "CommandValueText"
        ]
      }
    },
    "CXmlDocument": {
      "props": {
        "Text": [
          "TextContents"
        ],
        "CXmlNode": [
          "Root"
        ],
        "CXmlNode[]": [
          "Nodes"
        ]
      },
      "methods": {
        "GetFirstChild": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Name"
            }
          ],
          "returns": "CXmlNode"
        }
      }
    },
    "CTeam": {
      "props": {
        "Text": [
          "Name",
          "ZonePath",
          "City",
          "EmblemUrl",
          "PresentationManialinkUrl",
          "ClubLinkUrl",
          "ColorText",
          "ColorizedName"
        ],
        "Vec3": [
          "ColorPrimary",
          "ColorSecondary"
        ]
      }
    },
    "CUIConfigMgr": {
      "props": {
        "CUIConfig": [
          "UIAll"
        ],
        "CUIConfig[]": [
          "UI"
        ],
        "CUILayer[]": [
          "UILayers",
          "UIReplayLayers"
        ],
        "Integer": [
          "UISequenceMaxDuration"
        ]
      },
      "methods": {
        "ResetAll": {
          "params": [],
          "returns": "Void"
        },
        "GetUI": {
          "params": [
            {
              "identifier": "CUser",
              "argument": "User"
            }
          ],
          "returns": "CUIConfig"
        },
        "UILayerCreate": {
          "params": [],
          "returns": "CUILayer"
        },
        "UILayerDestroy": {
          "params": [
            {
              "identifier": "CUILayer",
              "argument": "Layer"
            }
          ],
          "returns": "Void"
        },
        "UILayerDestroyAll": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CXmlRpc": {
      "props": {
        "CXmlRpcEvent[]": [
          "PendingEvents"
        ]
      },
      "methods": {
        "SendCallback": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Param1"
            },
            {
              "identifier": "Text",
              "argument": "Param2"
            }
          ],
          "returns": "Void"
        },
        "SendCallbackArray": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Type"
            },
            {
              "identifier": "Text[]",
              "argument": "Data"
            }
          ],
          "returns": "Void"
        },
        "SendCallback_BeginRound": {
          "params": [],
          "returns": "Void"
        },
        "SendCallback_EndRound": {
          "params": [],
          "returns": "Void"
        }
      }
    },
    "CSmPlayerDriver": {
      "props": {
        "ESmDriverBehaviour": [
          "Behaviour"
        ],
        "Real": [
          "AggroRadius",
          "DisengageDistance",
          "PathSpeedCoef",
          "Accuracy",
          "Fov",
          "Agressivity",
          "Escape_DistanceSafe",
          "Escape_DistanceMinEscape",
          "Escape_DistanceMaxEscape",
          "Saunter_Radius"
        ],
        "Integer": [
          "ReactionTime",
          "ShootPeriodMin",
          "ShootPeriodMax",
          "PathOffset",
          "Saunter_BaseChillingTime",
          "Saunter_ChillingTimeDelta"
        ],
        "Boolean": [
          "RocketAnticipation",
          "IsStuck",
          "IsFlying",
          "UseOldShootingSystem",
          "Scripted_ForceAimInMoveDir"
        ],
        "ESmAttackFilter": [
          "AttackFilter"
        ],
        "CSmPlayer": [
          "Target",
          "ForcedTarget"
        ],
        "ESmDriverPatrolMode": [
          "Patrol_Mode"
        ],
        "Vec3": [
          "Escape_AnchorPoint",
          "Saunter_AnchorPoint"
        ],
        "CSmPlayer[]": [
          "TargetsToAvoid"
        ]
      }
    },

    "CUIConfig": {
      "props": {
        "EUISequence": [
          "UISequence"
        ],
        "Boolean": [
          "UISequenceIsCompleted",
          "UISequence_CanSkipIntroMT",
          "OverlayHideNotices",
          "OverlayHideMapInfo",
          "OverlayHideOpponentsInfo",
          "OverlayHideChat",
          "OverlayHideCheckPointList",
          "OverlayHideRoundScores",
          "OverlayHideCountdown",
          "OverlayHideCrosshair",
          "OverlayHideGauges",
          "OverlayHideConsumables",
          "OverlayHide321Go",
          "OverlayHideBackground",
          "OverlayHideChrono",
          "OverlayHideSpeedAndDist",
          "OverlayHidePersonnalBestAndRank",
          "OverlayHidePosition",
          "OverlayHideCheckPointTime",
          "OverlayHideEndMapLadderRecap",
          "OverlayHideMultilapInfos",
          "OverlayHideSpectatorControllers",
          "OverlayHideSpectatorInfos",
          "OverlayChatHideAvatar",
          "NoticesFilter_HidePlayerInfo",
          "NoticesFilter_HidePlayerWarning",
          "NoticesFilter_HidePlayerInfoIfNotMe",
          "NoticesFilter_HidePlayerWarningIfNotMe",
          "NoticesFilter_HideMapInfo",
          "NoticesFilter_HideMapWarning",
          "NoticesFilter_HideMatchInfo",
          "NoticesFilter_HideMatchWarning",
          "ScoreTableOnlyManialink",
          "AltMenuNoDefaultScores",
          "AltMenuNoCustomScores",
          "OverlayScoreSummary",
          "ScreenIn3dHideScoreSummary",
          "ScreenIn3dHideVersus",
          "ForceSpectator"
        ],
        "Text": [
          "UISequence_CustomMTClip",
          "UISequence_PodiumPlayersWin",
          "UISequence_PodiumPlayersLose",
          "ManialinkPage",
          "BigMessage",
          "BigMessageAvatarLogin",
          "StatusMessage",
          "GaugeMessage",
          "MarkersXML",
          "ScoreTable",
          "SmallScoreTable"
        ],
        "Integer": [
          "UISequence_CustomMTRefTime",
          "BigMessageSoundVariant",
          "GaugeClan",
          "OverlayChatLineCount",
          "ScoreSummary_Points1",
          "ScoreSummary_RoundPoints1",
          "ScoreSummary_MatchPoints1",
          "ScoreSummary_Points2",
          "ScoreSummary_RoundPoints2",
          "ScoreSummary_MatchPoints2",
          "CountdownEndTime",
          "AlliesLabelsMaxCount",
          "SpectatorForceCameraType",
          "SpectatorForcedClan"
        ],
        "EAvatarVariant": [
          "BigMessageAvatarVariant"
        ],
        "EUISound": [
          "BigMessageSound"
        ],
        "Real": [
          "GaugeRatio",
          "ScoreSummary_Gauge1",
          "ScoreSummary_Gauge2",
          "SpectatorCamAutoLatitude",
          "SpectatorCamAutoLongitude",
          "SpectatorCamAutoRadius"
        ],
        "CUILayer[]": [
          "UILayers"
        ],
        "Vec2": [
          "OverlayChatOffset",
          "CountdownCoord"
        ],
        "ENoticeLevel": [
          "NoticesFilter_LevelToShowAsBigMessage"
        ],
        "EVisibility": [
          "ScoreTableVisibility",
          "SmallScoreTableVisibility",
          "AlliesLabelsShowGauges",
          "AlliesLabelsShowNames",
          "TeamLabelsShowGauges",
          "TeamLabelsShowNames",
          "OpposingTeamLabelsShowGauges",
          "OpposingTeamLabelsShowNames"
        ],
        "Ident": [
          "ScoreSummary_Player1",
          "ScoreSummary_Player2",
          "SpectatorAutoTarget",
          "SpectatorForcedTarget"
        ],
        "EUIStatus": [
          "UIStatus"
        ],
        "ELabelsVisibility": [
          "AlliesLabelsVisibility",
          "TeamLabelsVisibility",
          "OpposingTeamLabelsVisibility"
        ],
        "EObserverMode": [
          "SpectatorObserverMode"
        ]
      },
      "methods": {
        "SendChat": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Text"
            }
          ],
          "returns": "Void"
        },
        "SendNotice": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Text"
            },
            {
              "identifier": "ENoticeLevel",
              "argument": "Level"
            },
            {
              "identifier": "CUser",
              "argument": "Avatar"
            },
            {
              "identifier": "EAvatarVariant",
              "argument": "AvatarVariant"
            },
            {
              "identifier": "EUISound",
              "argument": "Sound"
            },
            {
              "identifier": "Integer",
              "argument": "SoundVariant"
            }
          ],
          "returns": "Void"
        },
        "GetLayerManialinkAction": {
          "params": [
            {
              "identifier": "CUILayer",
              "argument": "Layer"
            }
          ],
          "returns": "Text"
        },
        "ClearLayerManialinkAction": {
          "params": [
            {
              "identifier": "CUILayer",
              "argument": "Layer"
            }
          ],
          "returns": "Void"
        }
      }
    },
    "CTmResult": {
      "props": {
        "Integer": [
          "Time",
          "StuntsScore",
          "NbRespawns"
        ],
        "Integer[]": [
          "Checkpoints"
        ]
      },
      "methods": {
        "Compare": {
          "params": [
            {
              "identifier": "CTmResult",
              "argument": "Other"
            },
            {
              "identifier": "ETmRaceResultCriteria",
              "argument": "Criteria"
            }
          ],
          "returns": "Integer"
        }
      }
    },
    "CXmlNode": {
      "props": {
        "Text": [
          "Name",
          "TextContents",
          "TextRawContents",
          "TextRecursiveContents"
        ],
        "CXmlNode[]": [
          "Children"
        ]
      },
      "methods": {
        "GetAttributeText": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Name"
            },
            {
              "identifier": "Text",
              "argument": "DefaultValue"
            }
          ],
          "returns": "Text"
        },
        "GetAttributeInteger": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Name"
            },
            {
              "identifier": "Integer",
              "argument": "DefaultValue"
            }
          ],
          "returns": "Integer"
        },
        "GetAttributeReal": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Name"
            },
            {
              "identifier": "Real",
              "argument": "DefaultValue"
            }
          ],
          "returns": "Real"
        },
        "GetAttributeBoolean": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Name"
            },
            {
              "identifier": "Boolean",
              "argument": "DefaultValue"
            }
          ],
          "returns": "Boolean"
        },
        "GetFirstChild": {
          "params": [
            {
              "identifier": "Text",
              "argument": "Name"
            }
          ],
          "returns": "CXmlNode"
        }
      }
    },
    "CXmlRpcEvent": {
      "props": {
        "EType": [
          "Type"
        ],
        "Text": [
          "Param1",
          "Param2",
          "ParamArray1"
        ],
        "Text[]": [
          "ParamArray2"
        ]
      }
    },
    "CSmSector": {
      "props": {
        "Ident[]": [
          "PlayersIds"
        ]
      }
    },
    "MathLib": {
      "props": {},
      "methods": {}
    },
    "TextLib": {
      "props": {},
      "methods": {}
    },
    "MapUnits": {
      "props": {},
      "methods": {}
    },
    "AnimLib": {
      "props": {},
      "methods": {}
    }
  }
}