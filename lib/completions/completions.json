{
	"namespaces": {
		"AnimLib": {
			"enums": {},
			"methods": [
				{
					"name": "SmoothStep",
					"returns": "Real",
					"params": [
						{
							"identifier": "Real",
							"argument": "_X"
						}
					]
				},
				{
					"name": "Ease",
					"returns": "Real",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Function"
						},
						{
							"identifier": "Real",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Real",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseLinear",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInQuad",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseOutQuad",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInOutQuad",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInCubic",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseOutCubic",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInOutCubic",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInQuart",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseOutQuart",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInOutQuart",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInQuint",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseOutQuint",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInOutQuint",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInSine",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseOutSine",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInOutSine",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInExp",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseOutExp",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInOutExp",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInCirc",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseOutCirc",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInOutCirc",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInBack",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseOutBack",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInOutBack",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInElastic",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseOutElastic",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInOutElastic",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInElastic2",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseOutElastic2",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInOutElastic2",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInBounce",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseOutBounce",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				},
				{
					"name": "EaseInOutBounce",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_T"
						},
						{
							"identifier": "Real",
							"argument": "_Base"
						},
						{
							"identifier": "Real",
							"argument": "_Change"
						},
						{
							"identifier": "Integer",
							"argument": "_Duration"
						}
					]
				}
			]
		},
		"ColorLib": {
			"enums": {},
			"methods": [
				{
					"name": "HsvToRgb",
					"returns": "Vec3",
					"params": [
						{
							"identifier": "Vec3",
							"argument": "__Hsv"
						}
					]
				},
				{
					"name": "RgbToHsv",
					"returns": "Vec3",
					"params": [
						{
							"identifier": "Vec3",
							"argument": "__Rgb"
						}
					]
				},
				{
					"name": "RgbToHex",
					"returns": "Text",
					"params": [
						{
							"identifier": "Vec3",
							"argument": "__Rgb"
						}
					]
				},
				{
					"name": "HexToRgb",
					"returns": "Vec3",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Text"
						}
					]
				}
			]
		},
		"MapUnits": {
			"enums": {},
			"methods": [
				{
					"name": "GetNextDir",
					"returns": "CardinalDirections",
					"params": [
						{
							"identifier": "CardinalDirections",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "GetPreviousDir",
					"returns": "CardinalDirections",
					"params": [
						{
							"identifier": "CardinalDirections",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "GetOpposedDir",
					"returns": "CardinalDirections",
					"params": [
						{
							"identifier": "CardinalDirections",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "AddDirs",
					"returns": "CardinalDirections",
					"params": [
						{
							"identifier": "CardinalDirections",
							"argument": "Argument1"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Argument2"
						}
					]
				},
				{
					"name": "SubDirs",
					"returns": "CardinalDirections",
					"params": [
						{
							"identifier": "CardinalDirections",
							"argument": "Argument1"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Argument2"
						}
					]
				},
				{
					"name": "GetNeighbourCoord",
					"returns": "Int3",
					"params": [
						{
							"identifier": "Int3",
							"argument": "Argument1"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Argument2"
						}
					]
				},
				{
					"name": "GetRotatedOffset",
					"returns": "Int3",
					"params": [
						{
							"identifier": "Int3",
							"argument": "Argument1"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Argument2"
						}
					]
				},
				{
					"name": "GetRotatedOffsetPositive",
					"returns": "Int3",
					"params": [
						{
							"identifier": "Int3",
							"argument": "Argument1"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Argument2"
						},
						{
							"identifier": "Int3",
							"argument": "Argument3"
						}
					]
				}
			]
		},
		"MathLib": {
			"enums": {},
			"methods": [
				{
					"name": "Abs",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "Abs",
					"returns": "Real",
					"params": [
						{
							"identifier": "Real",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "ToReal",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "Sin",
					"returns": "Real",
					"params": [
						{
							"identifier": "Real",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "Cos",
					"returns": "Real",
					"params": [
						{
							"identifier": "Real",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "Tan",
					"returns": "Real",
					"params": [
						{
							"identifier": "Real",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "Atan2",
					"returns": "Real",
					"params": [
						{
							"identifier": "Real",
							"argument": "Argument1"
						},
						{
							"identifier": "Real",
							"argument": "Argument2"
						}
					]
				},
				{
					"name": "Exp",
					"returns": "Real",
					"params": [
						{
							"identifier": "Real",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "Rand",
					"returns": "Real",
					"params": [
						{
							"identifier": "Real",
							"argument": "Argument1"
						},
						{
							"identifier": "Real",
							"argument": "Argument2"
						}
					]
				},
				{
					"name": "Rand",
					"returns": "Real",
					"params": [
						{
							"identifier": "Real",
							"argument": "Argument1"
						},
						{
							"identifier": "Real",
							"argument": "Argument2"
						},
						{
							"identifier": "Integer",
							"argument": "Argument3"
						}
					]
				},
				{
					"name": "Rand",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Argument1"
						},
						{
							"identifier": "Integer",
							"argument": "Argument2"
						}
					]
				},
				{
					"name": "Rand",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Argument1"
						},
						{
							"identifier": "Integer",
							"argument": "Argument2"
						},
						{
							"identifier": "Integer",
							"argument": "Argument3"
						}
					]
				},
				{
					"name": "NearestReal",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "NearestInteger",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Real",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "FloorInteger",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Real",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "TruncInteger",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Real",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "CeilingInteger",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Real",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "Distance",
					"returns": "Real",
					"params": [
						{
							"identifier": "Real",
							"argument": "Argument1"
						},
						{
							"identifier": "Real",
							"argument": "Argument2"
						}
					]
				},
				{
					"name": "Distance",
					"returns": "Real",
					"params": [
						{
							"identifier": "Vec2",
							"argument": "Argument1"
						},
						{
							"identifier": "Vec2",
							"argument": "Argument2"
						}
					]
				},
				{
					"name": "Distance",
					"returns": "Real",
					"params": [
						{
							"identifier": "Vec3",
							"argument": "Argument1"
						},
						{
							"identifier": "Vec3",
							"argument": "Argument2"
						}
					]
				},
				{
					"name": "DotProduct",
					"returns": "Real",
					"params": [
						{
							"identifier": "Vec3",
							"argument": "Argument1"
						},
						{
							"identifier": "Vec3",
							"argument": "Argument2"
						}
					]
				},
				{
					"name": "CrossProduct",
					"returns": "Vec3",
					"params": [
						{
							"identifier": "Vec3",
							"argument": "Argument1"
						},
						{
							"identifier": "Vec3",
							"argument": "Argument2"
						}
					]
				},
				{
					"name": "Angle",
					"returns": "Real",
					"params": [
						{
							"identifier": "Vec3",
							"argument": "Argument1"
						},
						{
							"identifier": "Vec3",
							"argument": "Argument2"
						}
					]
				},
				{
					"name": "OrientedAngle",
					"returns": "Real",
					"params": [
						{
							"identifier": "Vec3",
							"argument": "Argument1"
						},
						{
							"identifier": "Vec3",
							"argument": "Argument2"
						}
					]
				},
				{
					"name": "Angle",
					"returns": "Real",
					"params": [
						{
							"identifier": "Vec2",
							"argument": "Argument1"
						},
						{
							"identifier": "Vec2",
							"argument": "Argument2"
						}
					]
				},
				{
					"name": "OrientedAngle",
					"returns": "Real",
					"params": [
						{
							"identifier": "Vec2",
							"argument": "Argument1"
						},
						{
							"identifier": "Vec2",
							"argument": "Argument2"
						}
					]
				},
				{
					"name": "PI",
					"returns": "Real",
					"params": []
				},
				{
					"name": "Asin",
					"returns": "Real",
					"params": [
						{
							"identifier": "Real",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "Acos",
					"returns": "Real",
					"params": [
						{
							"identifier": "Real",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "Pow",
					"returns": "Real",
					"params": [
						{
							"identifier": "Real",
							"argument": "Argument1"
						},
						{
							"identifier": "Real",
							"argument": "Argument2"
						}
					]
				},
				{
					"name": "Ln",
					"returns": "Real",
					"params": [
						{
							"identifier": "Real",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "Sqrt",
					"returns": "Real",
					"params": [
						{
							"identifier": "Real",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "Max",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_A"
						},
						{
							"identifier": "Integer",
							"argument": "_B"
						}
					]
				},
				{
					"name": "Min",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_A"
						},
						{
							"identifier": "Integer",
							"argument": "_B"
						}
					]
				},
				{
					"name": "Clamp",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_X"
						},
						{
							"identifier": "Integer",
							"argument": "_Min"
						},
						{
							"identifier": "Integer",
							"argument": "_Max"
						}
					]
				},
				{
					"name": "Max",
					"returns": "Real",
					"params": [
						{
							"identifier": "Real",
							"argument": "_A"
						},
						{
							"identifier": "Real",
							"argument": "_B"
						}
					]
				},
				{
					"name": "Min",
					"returns": "Real",
					"params": [
						{
							"identifier": "Real",
							"argument": "_A"
						},
						{
							"identifier": "Real",
							"argument": "_B"
						}
					]
				},
				{
					"name": "Clamp",
					"returns": "Real",
					"params": [
						{
							"identifier": "Real",
							"argument": "_X"
						},
						{
							"identifier": "Real",
							"argument": "_Min"
						},
						{
							"identifier": "Real",
							"argument": "_Max"
						}
					]
				},
				{
					"name": "Mod",
					"returns": "Real",
					"params": [
						{
							"identifier": "Real",
							"argument": "_X"
						},
						{
							"identifier": "Real",
							"argument": "_Min"
						},
						{
							"identifier": "Real",
							"argument": "_Max"
						}
					]
				}
			]
		},
		"TextLib": {
			"enums": {},
			"methods": [
				{
					"name": "ToReal",
					"returns": "Real",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Text"
						}
					]
				},
				{
					"name": "ToInteger",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Text"
						}
					]
				},
				{
					"name": "ToColor",
					"returns": "Vec3",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Text"
						}
					]
				},
				{
					"name": "SubString",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Text"
						},
						{
							"identifier": "Integer",
							"argument": "_Start"
						},
						{
							"identifier": "Integer",
							"argument": "_Length"
						}
					]
				},
				{
					"name": "SubText",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Text"
						},
						{
							"identifier": "Integer",
							"argument": "_Start"
						},
						{
							"identifier": "Integer",
							"argument": "_Length"
						}
					]
				},
				{
					"name": "Length",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Text"
						}
					]
				},
				{
					"name": "ToText",
					"returns": "Text",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_Integer"
						}
					]
				},
				{
					"name": "ToText",
					"returns": "Text",
					"params": [
						{
							"identifier": "Real",
							"argument": "_Real"
						}
					]
				},
				{
					"name": "ToText",
					"returns": "Text",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "_Boolean"
						}
					]
				},
				{
					"name": "ToText",
					"returns": "Text",
					"params": [
						{
							"identifier": "Int3",
							"argument": "_Int3"
						}
					]
				},
				{
					"name": "ToText",
					"returns": "Text",
					"params": [
						{
							"identifier": "Vec3",
							"argument": "_Vec3"
						}
					]
				},
				{
					"name": "TimeToText",
					"returns": "Text",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_Time"
						},
						{
							"identifier": "Boolean",
							"argument": "_IncludeCentiSeconds"
						}
					]
				},
				{
					"name": "TimeToText",
					"returns": "Text",
					"params": [
						{
							"identifier": "Integer",
							"argument": "_Time"
						}
					]
				},
				{
					"name": "ColorToText",
					"returns": "Text",
					"params": [
						{
							"identifier": "Vec3",
							"argument": "_Color"
						}
					]
				},
				{
					"name": "FormatInteger",
					"returns": "Text",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Argument1"
						},
						{
							"identifier": "Integer",
							"argument": "Argument2"
						}
					]
				},
				{
					"name": "FormatReal",
					"returns": "Text",
					"params": [
						{
							"identifier": "Real",
							"argument": "_Value"
						},
						{
							"identifier": "Integer",
							"argument": "_FPartLength"
						},
						{
							"identifier": "Boolean",
							"argument": "_HideZeroes"
						},
						{
							"identifier": "Boolean",
							"argument": "_HideDot"
						}
					]
				},
				{
					"name": "ToUpperCase",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "_TextToChange"
						}
					]
				},
				{
					"name": "ToLowerCase",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "_TextToChange"
						}
					]
				},
				{
					"name": "CloseStyleTags",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "_String"
						}
					]
				},
				{
					"name": "CompareWithoutFormat",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Text1"
						},
						{
							"identifier": "Text",
							"argument": "_Text2"
						},
						{
							"identifier": "Boolean",
							"argument": "_IsCaseSensitive"
						}
					]
				},
				{
					"name": "Find",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Text",
							"argument": "_TextToFind"
						},
						{
							"identifier": "Text",
							"argument": "_TextToSearchIn"
						},
						{
							"identifier": "Boolean",
							"argument": "_IsFormatSensitive"
						},
						{
							"identifier": "Boolean",
							"argument": "_IsCaseSensitive"
						}
					]
				},
				{
					"name": "EndsWith",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Text",
							"argument": "_TextToFind"
						},
						{
							"identifier": "Text",
							"argument": "_TextToSearchIn"
						}
					]
				},
				{
					"name": "EndsWith",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Text",
							"argument": "_TextToFind"
						},
						{
							"identifier": "Text",
							"argument": "_TextToSearchIn"
						},
						{
							"identifier": "Boolean",
							"argument": "_IsFormatSensitive"
						},
						{
							"identifier": "Boolean",
							"argument": "_IsCaseSensitive"
						}
					]
				},
				{
					"name": "StartsWith",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Text",
							"argument": "_TextToFind"
						},
						{
							"identifier": "Text",
							"argument": "_TextToSearchIn"
						}
					]
				},
				{
					"name": "StartsWith",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Text",
							"argument": "_TextToFind"
						},
						{
							"identifier": "Text",
							"argument": "_TextToSearchIn"
						},
						{
							"identifier": "Boolean",
							"argument": "_IsFormatSensitive"
						},
						{
							"identifier": "Boolean",
							"argument": "_IsCaseSensitive"
						}
					]
				},
				{
					"name": "Compose",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "Compose",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "Argument1"
						},
						{
							"identifier": "Text",
							"argument": "Argument2"
						}
					]
				},
				{
					"name": "Compose",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "Argument1"
						},
						{
							"identifier": "Text",
							"argument": "Argument2"
						},
						{
							"identifier": "Text",
							"argument": "Argument3"
						}
					]
				},
				{
					"name": "Compose",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "Argument1"
						},
						{
							"identifier": "Text",
							"argument": "Argument2"
						},
						{
							"identifier": "Text",
							"argument": "Argument3"
						},
						{
							"identifier": "Text",
							"argument": "Argument4"
						}
					]
				},
				{
					"name": "Compose",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "Argument1"
						},
						{
							"identifier": "Text",
							"argument": "Argument2"
						},
						{
							"identifier": "Text",
							"argument": "Argument3"
						},
						{
							"identifier": "Text",
							"argument": "Argument4"
						},
						{
							"identifier": "Text",
							"argument": "Argument5"
						}
					]
				},
				{
					"name": "Compose",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "Argument1"
						},
						{
							"identifier": "Text",
							"argument": "Argument2"
						},
						{
							"identifier": "Text",
							"argument": "Argument3"
						},
						{
							"identifier": "Text",
							"argument": "Argument4"
						},
						{
							"identifier": "Text",
							"argument": "Argument5"
						},
						{
							"identifier": "Text",
							"argument": "Argument6"
						}
					]
				},
				{
					"name": "MLEncode",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "URLEncode",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "StripFormatting",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "Split",
					"returns": "Text[Void]",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Separators"
						},
						{
							"identifier": "Text",
							"argument": "_Text"
						}
					]
				},
				{
					"name": "Join",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Separator"
						},
						{
							"identifier": "Text[Void]",
							"argument": "_Texts"
						}
					]
				},
				{
					"name": "Trim",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "Argument1"
						}
					]
				},
				{
					"name": "ReplaceChars",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "Argument1"
						},
						{
							"identifier": "Text",
							"argument": "Argument2"
						},
						{
							"identifier": "Text",
							"argument": "Argument3"
						}
					]
				},
				{
					"name": "Replace",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Text"
						},
						{
							"identifier": "Text",
							"argument": "_ToReplace"
						},
						{
							"identifier": "Text",
							"argument": "_Replacement"
						}
					]
				},
				{
					"name": "RegexFind",
					"returns": "Text[Void]",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Pattern"
						},
						{
							"identifier": "Text",
							"argument": "_Text"
						},
						{
							"identifier": "Text",
							"argument": "_Flags"
						}
					]
				},
				{
					"name": "RegexMatch",
					"returns": "Text[Void]",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Pattern"
						},
						{
							"identifier": "Text",
							"argument": "_Text"
						},
						{
							"identifier": "Text",
							"argument": "_Flags"
						}
					]
				},
				{
					"name": "RegexReplace",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Pattern"
						},
						{
							"identifier": "Text",
							"argument": "_Text"
						},
						{
							"identifier": "Text",
							"argument": "_Flags"
						},
						{
							"identifier": "Text",
							"argument": "_Replacement"
						}
					]
				},
				{
					"name": "GetTranslatedText",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Text"
						}
					]
				}
			]
		},
		"TimeLib": {
			"enums": {
				"EDateFormats": [
					"Full",
					"Date",
					"DateShort",
					"Time",
					"TimeShort",
					"Relative",
					"RelativeShort"
				],
				"EDurationFormats": [
					"Full",
					"Abbreviated",
					"Chrono"
				]
			},
			"methods": [
				{
					"name": "FormatDate",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Timestamp"
						},
						{
							"identifier": "EDateFormats",
							"argument": "_Format"
						}
					]
				},
				{
					"name": "FormatDelta",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Timestamp1"
						},
						{
							"identifier": "Text",
							"argument": "_Timestamp2"
						},
						{
							"identifier": "EDurationFormats",
							"argument": "_Format"
						}
					]
				},
				{
					"name": "FormatDelta",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Delta"
						},
						{
							"identifier": "EDurationFormats",
							"argument": "_Format"
						}
					]
				},
				{
					"name": "Compare",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Timestamp1"
						},
						{
							"identifier": "Text",
							"argument": "_Timestamp2"
						}
					]
				},
				{
					"name": "Clamp01",
					"returns": "Real",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Boundary1"
						},
						{
							"identifier": "Text",
							"argument": "_Boundary2"
						},
						{
							"identifier": "Text",
							"argument": "_Timestamp"
						}
					]
				},
				{
					"name": "GetCurrent",
					"returns": "Text",
					"params": []
				},
				{
					"name": "GetDelta",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Text",
							"argument": "_Timestamp1"
						},
						{
							"identifier": "Text",
							"argument": "_Timestamp2"
						}
					]
				}
			]
		}
	},
	"primitives": [
		"Boolean",
		"Ident",
		"Int3",
		"Integer",
		"Real",
		"Text",
		"Vec2",
		"Vec3",
		"Void"
	],
	"classes": {
		"CAchievementsAchievement": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CAchievementsAchievementDesc": [
					"AchievementDesc"
				],
				"Ident": [
					"UserId"
				]
			},
			"methods": []
		},
		"CAchievementsAchievementDesc": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Text": [
					"Description",
					"DisplayName",
					"IconUrl",
					"TitleId"
				]
			},
			"methods": []
		},
		"CAchievementsEvent": {
			"inherit": "CBaseConstEvent",
			"enums": {
				"EType": [
					"NewAchievement"
				]
			},
			"props": {
				"CAchievementsAchievement": [
					"Achievement"
				],
				"EType": [
					"Type"
				]
			},
			"methods": []
		},
		"CAchievementsManager": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CAchievementsAchievement[]": [
					"Achievements"
				],
				"CAchievementsAchievementDesc[]": [
					"AchievementDescriptions"
				],
				"CAchievementsEvent[]": [
					"PendingEvents"
				],
				"CAchievementsStat[]": [
					"Stats"
				],
				"CAchievementsStatDesc[]": [
					"StatDescriptions"
				]
			},
			"methods": [
				{
					"name": "SendEvent",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "Mnemo"
						},
						{
							"identifier": "Integer[]",
							"argument": "Params"
						}
					]
				}
			]
		},
		"CAchievementsStat": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CAchievementsStatDesc": [
					"StatDesc"
				],
				"Ident": [
					"UserId"
				],
				"Integer": [
					"Value"
				]
			},
			"methods": []
		},
		"CAchievementsStatDesc": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Text": [
					"Description",
					"DisplayName",
					"TitleId"
				]
			},
			"methods": []
		},
		"CAction": {
			"inherit": "CNod",
			"enums": {},
			"props": {},
			"methods": []
		},
		"CActionInterface": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Integer": [
					"Cooldown",
					"CooldownStartTime",
					"Energy",
					"EnergyCost",
					"EnergyMax"
				]
			},
			"methods": []
		},
		"CActionManager": {
			"inherit": "CNod",
			"enums": {
				"EActionSlot": [
					"Slot_A",
					"Slot_B",
					"Slot_C",
					"Slot_D",
					"Slot_E",
					"Slot_F",
					"Slot_G",
					"Slot_H"
				]
			},
			"props": {
				"CActionInterface[]": [
					"Actions"
				]
			},
			"methods": [
				{
					"name": "Action_GetState",
					"returns": "CActionInterface",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						},
						{
							"identifier": "EActionSlot",
							"argument": "Slot"
						}
					]
				},
				{
					"name": "Action_GetState",
					"returns": "CActionInterface",
					"params": [
						{
							"identifier": "CModeVehicle",
							"argument": "Vehicle"
						},
						{
							"identifier": "Integer",
							"argument": "VehicleSlotIndex"
						},
						{
							"identifier": "EActionSlot",
							"argument": "Slot"
						}
					]
				},
				{
					"name": "Action_GetState",
					"returns": "CActionInterface",
					"params": [
						{
							"identifier": "CModeTurret",
							"argument": "Turret"
						},
						{
							"identifier": "EActionSlot",
							"argument": "Slot"
						}
					]
				}
			]
		},
		"CAnchorData": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CBlock": [
					"Block"
				],
				"CItemAnchor": [
					"Item"
				],
				"Integer": [
					"DefaultOrder",
					"Order"
				],
				"Text": [
					"DefaultTag",
					"Tag"
				]
			},
			"methods": []
		},
		"CAnimManager": {
			"inherit": "CNod",
			"enums": {
				"EAnimManagerEasing": [
					"Linear",
					"QuadIn",
					"QuadOut",
					"QuadInOut",
					"CubicIn",
					"CubicOut",
					"CubicInOut",
					"QuartIn",
					"QuartOut",
					"QuartInOut",
					"QuintIn",
					"QuintOut",
					"QuintInOut",
					"SineIn",
					"SineOut",
					"SineInOut",
					"ExpIn",
					"ExpOut",
					"ExpInOut",
					"CircIn",
					"CircOut",
					"CircInOut",
					"BackIn",
					"BackOut",
					"BackInOut",
					"ElasticIn",
					"ElasticOut",
					"ElasticInOut",
					"ElasticIn2",
					"ElasticOut2",
					"ElasticInOut2",
					"BounceIn",
					"BounceOut",
					"BounceInOut"
				]
			},
			"props": {},
			"methods": [
				{
					"name": "Add",
					"returns": "Void",
					"params": [
						{
							"identifier": "CMlControl",
							"argument": "Control"
						},
						{
							"identifier": "Text",
							"argument": "XmlTarget"
						},
						{
							"identifier": "Integer",
							"argument": "StartTime"
						},
						{
							"identifier": "Integer",
							"argument": "Duration"
						},
						{
							"identifier": "EAnimManagerEasing",
							"argument": "EasingFunc"
						}
					]
				},
				{
					"name": "AddChain",
					"returns": "Void",
					"params": [
						{
							"identifier": "CMlControl",
							"argument": "Control"
						},
						{
							"identifier": "Text",
							"argument": "XmlTarget"
						},
						{
							"identifier": "Integer",
							"argument": "Duration"
						},
						{
							"identifier": "EAnimManagerEasing",
							"argument": "EasingFunc"
						}
					]
				},
				{
					"name": "Add",
					"returns": "Void",
					"params": [
						{
							"identifier": "CMlControl",
							"argument": "Control"
						},
						{
							"identifier": "Text",
							"argument": "XmlTarget"
						},
						{
							"identifier": "Integer",
							"argument": "Duration"
						},
						{
							"identifier": "EAnimManagerEasing",
							"argument": "EasingFunc"
						}
					]
				},
				{
					"name": "Flush",
					"returns": "Void",
					"params": [
						{
							"identifier": "CMlControl",
							"argument": "Control"
						}
					]
				}
			]
		},
		"CAnyEditorPlugin": {
			"inherit": "CManiaApp",
			"enums": {
				"EInteractionStatus": [
					"Active",
					"Closed",
					"Aborted"
				]
			},
			"props": {
				"CEditorEditor": [
					"EditorEditor"
				],
				"CEditorMesh": [
					"MeshEditor"
				],
				"CEditorModule": [
					"ModuleEditor"
				],
				"CManiaAppEvent[]": [
					"PendingEvents"
				],
				"EInteractionStatus": [
					"InteractionStatus"
				]
			},
			"methods": []
		},
		"CAudioManager": {
			"inherit": "CNod",
			"enums": {
				"ELibSound": [
					"Alert",
					"ShowDialog",
					"HideDialog",
					"ShowMenu",
					"HideMenu",
					"Focus",
					"Valid",
					"Start",
					"Countdown",
					"Victory",
					"ScoreIncrease",
					"Checkpoint"
				]
			},
			"props": {
				"Boolean": [
					"ForceEnableMusic"
				],
				"CAudioSource[]": [
					"Sounds"
				],
				"Real": [
					"LimitMusicVolumedB",
					"LimitSceneSoundVolumedB",
					"LimitUiSoundVolumedB"
				]
			},
			"methods": [
				{
					"name": "CreateSound",
					"returns": "CAudioSource",
					"params": [
						{
							"identifier": "Text",
							"argument": "Url"
						}
					]
				},
				{
					"name": "CreateSound",
					"returns": "CAudioSource",
					"params": [
						{
							"identifier": "Text",
							"argument": "Url"
						},
						{
							"identifier": "Real",
							"argument": "VolumedB"
						},
						{
							"identifier": "Boolean",
							"argument": "IsMusic"
						},
						{
							"identifier": "Boolean",
							"argument": "IsLooping"
						},
						{
							"identifier": "Boolean",
							"argument": "IsSpatialized"
						}
					]
				},
				{
					"name": "DestroySound",
					"returns": "Void",
					"params": [
						{
							"identifier": "CAudioSource",
							"argument": "Sound"
						}
					]
				},
				{
					"name": "CreateMusic",
					"returns": "CAudioSourceMusic",
					"params": [
						{
							"identifier": "Text",
							"argument": "Url"
						}
					]
				},
				{
					"name": "DestroyMusic",
					"returns": "Void",
					"params": [
						{
							"identifier": "CAudioSourceMusic",
							"argument": "Music"
						}
					]
				},
				{
					"name": "PlaySoundEvent",
					"returns": "Void",
					"params": [
						{
							"identifier": "CAudioSource",
							"argument": "Sound"
						},
						{
							"identifier": "Real",
							"argument": "VolumedB"
						}
					]
				},
				{
					"name": "PlaySoundEvent",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Url"
						},
						{
							"identifier": "Real",
							"argument": "VolumedB"
						}
					]
				},
				{
					"name": "PlaySoundEvent",
					"returns": "Void",
					"params": [
						{
							"identifier": "ELibSound",
							"argument": "Sound"
						},
						{
							"identifier": "Integer",
							"argument": "SoundVariant"
						},
						{
							"identifier": "Real",
							"argument": "VolumedB"
						}
					]
				},
				{
					"name": "PlaySoundEvent",
					"returns": "Void",
					"params": [
						{
							"identifier": "CAudioSource",
							"argument": "Sound"
						},
						{
							"identifier": "Real",
							"argument": "VolumedB"
						},
						{
							"identifier": "Integer",
							"argument": "Delay"
						}
					]
				},
				{
					"name": "PlaySoundEvent",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Url"
						},
						{
							"identifier": "Real",
							"argument": "VolumedB"
						},
						{
							"identifier": "Integer",
							"argument": "Delay"
						}
					]
				},
				{
					"name": "PlaySoundEvent",
					"returns": "Void",
					"params": [
						{
							"identifier": "ELibSound",
							"argument": "Sound"
						},
						{
							"identifier": "Integer",
							"argument": "SoundVariant"
						},
						{
							"identifier": "Real",
							"argument": "VolumedB"
						},
						{
							"identifier": "Integer",
							"argument": "Delay"
						}
					]
				},
				{
					"name": "PlaySoundEvent",
					"returns": "Void",
					"params": [
						{
							"identifier": "CAudioSource",
							"argument": "Sound"
						},
						{
							"identifier": "Real",
							"argument": "VolumedB"
						},
						{
							"identifier": "Vec3",
							"argument": "PanRadiusLfe"
						}
					]
				},
				{
					"name": "PlaySoundEvent",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Url"
						},
						{
							"identifier": "Real",
							"argument": "VolumedB"
						},
						{
							"identifier": "Vec3",
							"argument": "PanRadiusLfe"
						}
					]
				},
				{
					"name": "PlaySoundEvent",
					"returns": "Void",
					"params": [
						{
							"identifier": "CAudioSource",
							"argument": "Sound"
						},
						{
							"identifier": "Real",
							"argument": "VolumedB"
						},
						{
							"identifier": "Vec3",
							"argument": "PanRadiusLfe"
						},
						{
							"identifier": "Integer",
							"argument": "Delay"
						}
					]
				},
				{
					"name": "PlaySoundEvent",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Url"
						},
						{
							"identifier": "Real",
							"argument": "VolumedB"
						},
						{
							"identifier": "Vec3",
							"argument": "PanRadiusLfe"
						},
						{
							"identifier": "Integer",
							"argument": "Delay"
						}
					]
				},
				{
					"name": "ClearAllDelayedSoundsEvents",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CAudioSource": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"DownloadInProgress",
					"IsPlaying"
				],
				"Real": [
					"FadeDuration",
					"Pitch",
					"PlayCursor",
					"PlayLength",
					"Volume",
					"VolumedB"
				],
				"Vec3": [
					"PanRadiusLfe",
					"RelativePosition"
				]
			},
			"methods": [
				{
					"name": "Play",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Stop",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CAudioSourceMusic": {
			"inherit": "CAudioSource",
			"enums": {
				"EUpdateMode": [
					"Cut",
					"OnNextBar",
					"OnNextHalfBar",
					"OnNextBeat"
				]
			},
			"props": {
				"Boolean": [
					"Dbg_ForceIntensity",
					"Dbg_ForceRandom",
					"Dbg_ForceSequential",
					"UseNewImplem"
				],
				"EUpdateMode": [
					"UpdateMode"
				],
				"Integer": [
					"BeatsPerBar",
					"Tracks_Count"
				],
				"Real": [
					"BeatDuration",
					"BeatsPerMinute",
					"FadeFiltersDuration",
					"FadeTracksDuration",
					"HPF_CutoffRatio",
					"HPF_Q",
					"LPF_CutoffRatio",
					"LPF_Q"
				],
				"Real[]": [
					"Tracks_Length",
					"Tracks_Volume",
					"Tracks_VolumedB"
				],
				"Text[]": [
					"Tracks_Name"
				]
			},
			"methods": [
				{
					"name": "MuteAllTracks",
					"returns": "Void",
					"params": []
				},
				{
					"name": "UnmuteAllTracks",
					"returns": "Void",
					"params": []
				},
				{
					"name": "NextVariant",
					"returns": "Void",
					"params": []
				},
				{
					"name": "NextVariant",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "IsIntensityDecreasing"
						}
					]
				},
				{
					"name": "EnableSegment",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "SegmentName"
						}
					]
				}
			]
		},
		"CBadge": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Text": [
					"SkinName"
				],
				"Text[]": [
					"Layers"
				],
				"Vec3": [
					"PrimaryColor"
				]
			},
			"methods": [
				{
					"name": "StickerSlot_Get",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "Slot"
						}
					]
				},
				{
					"name": "StickerSlot_Set",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Slot"
						},
						{
							"identifier": "Text",
							"argument": "Sticker"
						}
					]
				},
				{
					"name": "StickerSlot_Clear",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CBadgeEditor": {
			"inherit": "CManiaAppBase",
			"enums": {},
			"props": {
				"CBadge": [
					"DisplayCurrentBadge"
				],
				"CBadge[]": [
					"Badges"
				],
				"Ident": [
					"DisplayCurrentMeshId"
				],
				"Ident[]": [
					"MeshIds"
				],
				"Real": [
					"CameraTransitionDuration",
					"DisplayFoV",
					"MeshRotation_Acceleration",
					"MeshRotation_MaxSpeed"
				],
				"Vec2": [
					"DisplayPosN",
					"DisplaySize"
				]
			},
			"methods": [
				{
					"name": "Leave",
					"returns": "Void",
					"params": []
				},
				{
					"name": "MeshId_Next",
					"returns": "Void",
					"params": []
				},
				{
					"name": "MeshId_Previous",
					"returns": "Void",
					"params": []
				},
				{
					"name": "BadgeCreate",
					"returns": "CBadge",
					"params": []
				},
				{
					"name": "BadgeDestroy",
					"returns": "Void",
					"params": [
						{
							"identifier": "CBadge",
							"argument": "Badge"
						}
					]
				},
				{
					"name": "BadgeCopy",
					"returns": "Void",
					"params": [
						{
							"identifier": "CBadge",
							"argument": "Source"
						},
						{
							"identifier": "CBadge",
							"argument": "Destination"
						}
					]
				},
				{
					"name": "BadgeReadFromProfile",
					"returns": "Void",
					"params": [
						{
							"identifier": "CBadge",
							"argument": "Badge"
						},
						{
							"identifier": "Ident",
							"argument": "UserId"
						}
					]
				},
				{
					"name": "BadgeWriteToProfile",
					"returns": "Void",
					"params": [
						{
							"identifier": "CBadge",
							"argument": "Badge"
						},
						{
							"identifier": "Ident",
							"argument": "UserId"
						}
					]
				}
			]
		},
		"CBadgeManager": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CBadge[]": [
					"Badges"
				]
			},
			"methods": [
				{
					"name": "BadgeCreate",
					"returns": "CBadge",
					"params": []
				},
				{
					"name": "BadgeDestroy",
					"returns": "Void",
					"params": [
						{
							"identifier": "CBadge",
							"argument": "Badge"
						}
					]
				},
				{
					"name": "BadgeCopy",
					"returns": "Void",
					"params": [
						{
							"identifier": "CBadge",
							"argument": "Source"
						},
						{
							"identifier": "CBadge",
							"argument": "Destination"
						}
					]
				},
				{
					"name": "BadgeReadFromProfile",
					"returns": "Void",
					"params": [
						{
							"identifier": "CBadge",
							"argument": "Badge"
						},
						{
							"identifier": "Ident",
							"argument": "UserId"
						}
					]
				},
				{
					"name": "BadgeWriteToProfile",
					"returns": "Void",
					"params": [
						{
							"identifier": "CBadge",
							"argument": "Badge"
						},
						{
							"identifier": "Ident",
							"argument": "UserId"
						}
					]
				},
				{
					"name": "ProfileIsReady",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						}
					]
				}
			]
		},
		"CBaseConstEvent": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"HasBeenProcessed"
				]
			},
			"methods": []
		},
		"CBaseEvent": {
			"inherit": "CBaseConstEvent",
			"enums": {},
			"props": {
				"Boolean": [
					"HasBeenDiscarded",
					"HasBeenPassed"
				]
			},
			"methods": []
		},
		"CBlock": {
			"inherit": "CNod",
			"enums": {
				"CardinalDirections": [
					"North",
					"East",
					"South",
					"West"
				]
			},
			"props": {
				"Boolean": [
					"CanHaveAnchor"
				],
				"CBlockModel": [
					"BlockModel"
				],
				"CBlockUnit[]": [
					"BlockUnits"
				],
				"CardinalDirections": [
					"Direction"
				],
				"Int3": [
					"Coord"
				],
				"Integer": [
					"BlockScriptId"
				]
			},
			"methods": [
				{
					"name": "UseDefaultAnchor",
					"returns": "Void",
					"params": []
				},
				{
					"name": "UseCustomAnchor",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CBlockClip": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CardinalDirections": [
					"Dir"
				],
				"Int3": [
					"Coord",
					"Offset"
				],
				"Integer": [
					"ClipId"
				],
				"Text": [
					"Name"
				]
			},
			"methods": [
				{
					"name": "GetConnectableCoord",
					"returns": "Int3",
					"params": []
				}
			]
		},
		"CBlockClipList": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CBlockClip[]": [
					"Clips"
				],
				"Int3": [
					"Size"
				]
			},
			"methods": [
				{
					"name": "SetClipListFromMacroblock",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CMacroblockModel",
							"argument": "MacroblockModel"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						}
					]
				},
				{
					"name": "SetClipListFromMacroblock",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CMacroblockModel",
							"argument": "MacroblockModel"
						}
					]
				},
				{
					"name": "SetClipListFromBlock",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CBlockModel",
							"argument": "BlockModel"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						}
					]
				},
				{
					"name": "SetClipListFromBlock",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CBlockModel",
							"argument": "BlockModel"
						}
					]
				},
				{
					"name": "CreateAndAddClip",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Name"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "Int3",
							"argument": "Offset"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						},
						{
							"identifier": "Integer",
							"argument": "ClipId"
						}
					]
				},
				{
					"name": "SetFromClipList",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CBlockClipList",
							"argument": "ClipList"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						}
					]
				},
				{
					"name": "RemoveClip",
					"returns": "Void",
					"params": [
						{
							"identifier": "CBlockClip",
							"argument": "Clip"
						}
					]
				},
				{
					"name": "ClearClips",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Destroy",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CBlockModel": {
			"inherit": "CCollector",
			"enums": {
				"EWayPointType": [
					"Start",
					"Finish",
					"Checkpoint",
					"None",
					"StartFinish",
					"Dispenser"
				]
			},
			"props": {
				"Boolean": [
					"IsPodium",
					"IsRoad",
					"IsTerrain",
					"NoRespawn"
				],
				"CBlockModelVariantAir": [
					"VariantAir"
				],
				"CBlockModelVariantGround": [
					"VariantGround"
				],
				"EWayPointType": [
					"WaypointType"
				],
				"Text": [
					"Name"
				]
			},
			"methods": []
		},
		"CBlockModelClip": {
			"inherit": "CBlockModel",
			"enums": {},
			"props": {},
			"methods": []
		},
		"CBlockModelVariant": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"IsAllUnderground",
					"IsPartUnderground"
				],
				"CBlockUnitModel[]": [
					"BlockUnitModels"
				],
				"Int3": [
					"OffsetBoundingBoxMax",
					"OffsetBoundingBoxMin",
					"Size"
				],
				"Text": [
					"Name"
				]
			},
			"methods": []
		},
		"CBlockModelVariantAir": {
			"inherit": "CBlockModelVariant",
			"enums": {},
			"props": {},
			"methods": []
		},
		"CBlockModelVariantGround": {
			"inherit": "CBlockModelVariant",
			"enums": {},
			"props": {},
			"methods": []
		},
		"CBlockUnit": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CBlock": [
					"Block",
					"BlockUnitModel"
				],
				"Int3": [
					"AbsoluteOffset"
				]
			},
			"methods": []
		},
		"CBlockUnitModel": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CBlockModelClip[]": [
					"Clips"
				],
				"Int3": [
					"RelativeOffset"
				]
			},
			"methods": []
		},
		"CCampaign": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"OfficialRecordEnabled"
				],
				"CMapGroup[]": [
					"MapGroups"
				],
				"Text": [
					"CampaignId",
					"ScoreContext"
				]
			},
			"methods": [
				{
					"name": "GetMapGroupCount",
					"returns": "Integer",
					"params": []
				},
				{
					"name": "GetMapGroup",
					"returns": "CMapGroup",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Index"
						}
					]
				},
				{
					"name": "GetNextMap",
					"returns": "CMapInfo",
					"params": [
						{
							"identifier": "CMapInfo",
							"argument": "CurrentMapInfo"
						}
					]
				}
			]
		},
		"CClient": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"IsConnectedToMasterServer",
					"IsSpectator"
				],
				"CUIConfig": [
					"UI"
				],
				"CUser": [
					"User"
				],
				"Integer": [
					"IdleDuration"
				],
				"Text": [
					"ClientTitleVersion",
					"ClientVersion"
				]
			},
			"methods": []
		},
		"CCollector": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CImage": [
					"Icon"
				],
				"Integer": [
					"InterfaceNumber"
				],
				"Text": [
					"Name",
					"PageName"
				]
			},
			"methods": []
		},
		"CDataFileMgr": {
			"inherit": "CNod",
			"enums": {
				"EMediaType": [
					"Image",
					"Sound",
					"Script",
					"MatchSettings",
					"Module",
					"Skins"
				]
			},
			"props": {
				"CCampaign[]": [
					"Campaigns"
				],
				"CGhost[]": [
					"Ghosts"
				],
				"CTaskResult[]": [
					"TaskResults"
				]
			},
			"methods": [
				{
					"name": "TaskResult_Release",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "TaskId"
						}
					]
				},
				{
					"name": "Campaign_Get",
					"returns": "CCampaign",
					"params": [
						{
							"identifier": "Text",
							"argument": "CampaignId"
						}
					]
				},
				{
					"name": "Map_RefreshFromDisk",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Map_GetUserList",
					"returns": "CTaskResult_MapList",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						}
					]
				},
				{
					"name": "Map_GetGameList",
					"returns": "CTaskResult_MapList",
					"params": [
						{
							"identifier": "Text",
							"argument": "Path"
						},
						{
							"identifier": "Boolean",
							"argument": "Flatten"
						}
					]
				},
				{
					"name": "Map_GetGameList",
					"returns": "CTaskResult_MapList",
					"params": [
						{
							"identifier": "Text",
							"argument": "Path"
						},
						{
							"identifier": "Boolean",
							"argument": "Flatten"
						},
						{
							"identifier": "Boolean",
							"argument": "SortByNameElseByDate"
						},
						{
							"identifier": "Boolean",
							"argument": "SortOrderAsc"
						}
					]
				},
				{
					"name": "Map_GetFilteredGameList",
					"returns": "CTaskResult_MapList",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Scope"
						},
						{
							"identifier": "Text",
							"argument": "Path"
						},
						{
							"identifier": "Boolean",
							"argument": "Flatten"
						}
					]
				},
				{
					"name": "Ghost_Release",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "GhostId"
						}
					]
				},
				{
					"name": "Ghost_Download",
					"returns": "CTaskResult_Ghost",
					"params": [
						{
							"identifier": "Text",
							"argument": "FileName"
						},
						{
							"identifier": "Text",
							"argument": "Url"
						}
					]
				},
				{
					"name": "Replay_RefreshFromDisk",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Replay_GetGameList",
					"returns": "CTaskResult_ReplayList",
					"params": [
						{
							"identifier": "Text",
							"argument": "Path"
						},
						{
							"identifier": "Boolean",
							"argument": "Flatten"
						}
					]
				},
				{
					"name": "Replay_GetGameList",
					"returns": "CTaskResult_ReplayList",
					"params": [
						{
							"identifier": "Text",
							"argument": "Path"
						},
						{
							"identifier": "Boolean",
							"argument": "Flatten"
						},
						{
							"identifier": "Boolean",
							"argument": "SortByNameElseByDate"
						},
						{
							"identifier": "Boolean",
							"argument": "SortOrderAsc"
						}
					]
				},
				{
					"name": "Replay_GetFilteredGameList",
					"returns": "CTaskResult_ReplayList",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Scope"
						},
						{
							"identifier": "Text",
							"argument": "Path"
						},
						{
							"identifier": "Boolean",
							"argument": "Flatten"
						}
					]
				},
				{
					"name": "Replay_Load",
					"returns": "CTaskResult_GhostList",
					"params": [
						{
							"identifier": "Text",
							"argument": "Path"
						}
					]
				},
				{
					"name": "Replay_Save",
					"returns": "CTaskResult",
					"params": [
						{
							"identifier": "Text",
							"argument": "Path"
						},
						{
							"identifier": "CMap",
							"argument": "Map"
						},
						{
							"identifier": "CGhost",
							"argument": "Ghost"
						}
					]
				},
				{
					"name": "Media_GetGameList",
					"returns": "CTaskResult_FileList",
					"params": [
						{
							"identifier": "EMediaType",
							"argument": "Type"
						},
						{
							"identifier": "Text",
							"argument": "Path"
						},
						{
							"identifier": "Boolean",
							"argument": "Flatten"
						}
					]
				},
				{
					"name": "Media_GetGameList",
					"returns": "CTaskResult_FileList",
					"params": [
						{
							"identifier": "EMediaType",
							"argument": "Type"
						},
						{
							"identifier": "Text",
							"argument": "Path"
						},
						{
							"identifier": "Boolean",
							"argument": "Flatten"
						},
						{
							"identifier": "Boolean",
							"argument": "SortByNameElseByDate"
						},
						{
							"identifier": "Boolean",
							"argument": "SortOrderAsc"
						}
					]
				},
				{
					"name": "Media_GetFilteredGameList",
					"returns": "CTaskResult_FileList",
					"params": [
						{
							"identifier": "EMediaType",
							"argument": "Type"
						},
						{
							"identifier": "Integer",
							"argument": "Scope"
						},
						{
							"identifier": "Text",
							"argument": "Path"
						},
						{
							"identifier": "Boolean",
							"argument": "Flatten"
						}
					]
				},
				{
					"name": "GameMode_GetGameList",
					"returns": "CTaskResult_GameModeList",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Scope"
						},
						{
							"identifier": "Text",
							"argument": "Path"
						},
						{
							"identifier": "Boolean",
							"argument": "Flatten"
						}
					]
				},
				{
					"name": "Pack_DownloadOrUpdate",
					"returns": "CTaskResult",
					"params": [
						{
							"identifier": "Text",
							"argument": "DisplayName"
						},
						{
							"identifier": "Text",
							"argument": "Url"
						}
					]
				}
			]
		},
		"CEditorAsset": {
			"inherit": "CEditorBase",
			"enums": {},
			"props": {},
			"methods": []
		},
		"CEditorBase": {
			"inherit": "CNod",
			"enums": {},
			"props": {},
			"methods": []
		},
		"CEditorEditor": {
			"inherit": "CEditorBase",
			"enums": {},
			"props": {
				"Boolean": [
					"Bindings_RequestInput_Done"
				],
				"CEditorEvent[]": [
					"PendingEvents"
				],
				"Text[]": [
					"BindingContexts",
					"RequestedContextBindings"
				]
			},
			"methods": [
				{
					"name": "Bindings_AddContext",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ContextName"
						}
					]
				},
				{
					"name": "Bindings_AddBinding",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ContextName"
						},
						{
							"identifier": "Text",
							"argument": "BindingScriptId"
						},
						{
							"identifier": "Text",
							"argument": "BindingDisplayName"
						}
					]
				},
				{
					"name": "Bindings_RemoveContext",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ContextName"
						}
					]
				},
				{
					"name": "Bindings_RemoveBinding",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ContextName"
						},
						{
							"identifier": "Text",
							"argument": "BindingName"
						}
					]
				},
				{
					"name": "Bindings_RequestInput",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ContextName"
						},
						{
							"identifier": "Text",
							"argument": "BindingName"
						}
					]
				},
				{
					"name": "Bindings_SetBindingScriptId",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ContextName"
						},
						{
							"identifier": "Text",
							"argument": "BindingScriptId"
						},
						{
							"identifier": "Text",
							"argument": "NewBindingScriptId"
						}
					]
				},
				{
					"name": "Bindings_SetBindingDisplayName",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ContextName"
						},
						{
							"identifier": "Text",
							"argument": "BindingScriptId"
						},
						{
							"identifier": "Text",
							"argument": "BindingDisplayName"
						}
					]
				},
				{
					"name": "Bindings_SetContextName",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ContextName"
						},
						{
							"identifier": "Text",
							"argument": "NewContextName"
						}
					]
				},
				{
					"name": "Bindings_GetContextBindings",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ContextName"
						}
					]
				},
				{
					"name": "Bindings_GetBindingActionName",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "ContextName"
						},
						{
							"identifier": "Text",
							"argument": "BindingName"
						}
					]
				},
				{
					"name": "Bindings_GetBindingDisplayName",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "ContextName"
						},
						{
							"identifier": "Text",
							"argument": "BindingName"
						}
					]
				}
			]
		},
		"CEditorEvent": {
			"inherit": "CManiaAppEvent",
			"enums": {
				"Type": [
					"LayerCustomEvent",
					"KeyPress",
					"MenuNavigation",
					"FileChanged",
					"Exit",
					"FileSave",
					"OnUndo",
					"OnRedo",
					"OnSwitchedBack",
					"CameraButtonOn",
					"CameraButtonOff",
					"VoxelUpdateMaterial",
					"OpenUVEditor",
					"CloseUVEditor",
					"EnableUndo",
					"DisableUndo",
					"EnableRedo",
					"DisableRedo"
				]
			},
			"props": {
				"Type": [
					"Type"
				]
			},
			"methods": []
		},
		"CEditorMainPlugin": {
			"inherit": "CAnyEditorPlugin",
			"enums": {
				"EMeshEditorAPI": [
					"Materials",
					"Interactions",
					"Display",
					"Global",
					"Sets",
					"Voxel",
					"PickInfo",
					"UndoRedo"
				]
			},
			"props": {
				"CEditorPluginHandle[]": [
					"Plugins"
				]
			},
			"methods": [
				{
					"name": "Help_Open",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Help_Close",
					"returns": "Void",
					"params": []
				},
				{
					"name": "GetPluginHandle",
					"returns": "CEditorPluginHandle",
					"params": [
						{
							"identifier": "Text",
							"argument": "Name"
						}
					]
				},
				{
					"name": "SendPluginEvent",
					"returns": "Void",
					"params": [
						{
							"identifier": "CEditorPluginHandle",
							"argument": "Handle"
						},
						{
							"identifier": "Text",
							"argument": "Type"
						},
						{
							"identifier": "Text[]",
							"argument": "Data"
						}
					]
				},
				{
					"name": "Context_SetActive",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ContextName"
						},
						{
							"identifier": "Boolean",
							"argument": "IsActive"
						}
					]
				},
				{
					"name": "Context_IsActive",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Text",
							"argument": "ContextName"
						}
					]
				},
				{
					"name": "Binding_IsActive",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Text",
							"argument": "BindingName"
						}
					]
				},
				{
					"name": "Binding_IsActive",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Text",
							"argument": "ContextName"
						},
						{
							"identifier": "Text",
							"argument": "BindingName"
						}
					]
				},
				{
					"name": "Plugin_SetClearance",
					"returns": "Void",
					"params": [
						{
							"identifier": "CEditorPluginHandle",
							"argument": "Handle"
						},
						{
							"identifier": "EMeshEditorAPI",
							"argument": "API"
						},
						{
							"identifier": "Boolean",
							"argument": "IsAllowed"
						}
					]
				}
			]
		},
		"CEditorMesh": {
			"inherit": "CEditorAsset",
			"enums": {
				"EEdgesDisplay": [
					"Any",
					"Borders",
					"None"
				],
				"EEdgesConstraint": [
					"Any",
					"Adjacent",
					"Closed"
				],
				"EElemType": [
					"Vertex",
					"Edge",
					"Face",
					"Any"
				],
				"EInteraction": [
					"Creation",
					"Pick",
					"PickJoint",
					"VoxelPickDrag_Base",
					"VoxelPickDrag_Creation",
					"VoxelPickDrag_Delete",
					"VoxelPickDrag_Select",
					"VoxelPickDrag_Pick",
					"VoxelPickDrag_SelectTranslation",
					"VoxelPickDrag_SelectRotation",
					"VoxelPickDrag_Paste",
					"Selection",
					"Translation",
					"PickTranslation",
					"ExtrudeTranslation",
					"Rotation",
					"PickRotation",
					"Scale",
					"Curve2D",
					"Merge",
					"Split",
					"Mirror",
					"Paste",
					"PasteMaterial",
					"BlocTransformation",
					"None"
				],
				"ETexCoordLayer": [
					"Lightmap"
				],
				"EMaterialFilterCriterion": [
					"IsAutomatic",
					"IsBadForHorizontalFaces",
					"IsBadForVerticalFaces"
				],
				"EFilterKind": [
					"NoFilter",
					"PassIfMatches",
					"CutIfMatches"
				],
				"EUVEditorMode": [
					"UV",
					"Atlas_ApplyOnClic",
					"Atlas_SelectOnClic"
				],
				"EUVEditorProjectionType": [
					"Planar",
					"Curve2D",
					"Cylindrical2D",
					"Cubic",
					"Polyedric",
					"Cylindrical",
					"ApplyOnlyMaterial"
				],
				"ELayerType": [
					"AddGeometry",
					"SubdivideSmooth",
					"Translation",
					"Rotation",
					"Scale",
					"Mirror",
					"MoveToGround",
					"Extrude",
					"Subdivide",
					"Chaos",
					"Smooth",
					"BorderTransition",
					"BlocTransfo",
					"Voxels",
					"TriggerShape",
					"RespawnPos",
					"Sector",
					"None"
				],
				"ETitleCoreType": [
					"TrackMania",
					"ShootMania"
				]
			},
			"props": {
				"Boolean": [
					"AddTransitionInProgress",
					"CameraEatingInputsScript",
					"DisplayFaces",
					"DisplayJoints",
					"DisplayVertices",
					"Display_HideElemsByDistance_IsActive",
					"EditionBox_IsPlaneOriented",
					"GoToMaterialEditor",
					"GridSnap_IsActive",
					"IsCreateMaterial",
					"IsDebug",
					"IsEditingLayer",
					"IsExperimental",
					"LayerIndep",
					"LayerIndexAxisX",
					"LayerIndexAxisY",
					"LayerIndexAxisZ",
					"LayerVisible",
					"Layer_IsCollidable",
					"Layer_IsVisible",
					"MustClearLastSaveBuffer",
					"Tmp_UseParts",
					"VoxelSpaceIsInteractive"
				],
				"CEditorEvent[]": [
					"PendingEvents"
				],
				"EEdgesDisplay": [
					"DisplayEdges"
				],
				"EInteraction": [
					"CurrentInteraction"
				],
				"Ident": [
					"SelectionSet"
				],
				"Ident[]": [
					"MaterialIds"
				],
				"Integer": [
					"CreationElemsCount",
					"Display_HideElemsByDistance_Distance",
					"EdgeCount",
					"FaceCount",
					"Material_Atlas_SelectedSubTexIndex",
					"MaterialsUpdateId",
					"NewTransitionPosition",
					"PrefabListCurrentPage",
					"PrefabNamesUpdateId",
					"Prefab_TotalNb",
					"RotateAxis",
					"RotationStep",
					"SubdivideSmooth_NbSteps",
					"VertexCount"
				],
				"Real": [
					"Display_HideElemsByDistance_Opacity",
					"LayerValueAxisX",
					"LayerValueAxisY",
					"LayerValueAxisZ",
					"LayerValueParam1",
					"LayerValueParam2",
					"NewTransitionSize",
					"RotationValue",
					"Scale",
					"ScalingRatio",
					"ScalingStep",
					"Size",
					"Step",
					"VoxelSpaceStep"
				],
				"Text": [
					"LayerName",
					"NewTransitionName"
				],
				"Text[]": [
					"MaterialNames",
					"PrefabNames"
				],
				"Vec3": [
					"VoxelSpaceCenter"
				]
			},
			"methods": [
				{
					"name": "Layers_GetCount",
					"returns": "Integer",
					"params": []
				},
				{
					"name": "Layers_GetLayerIdFromIndex",
					"returns": "Ident",
					"params": [
						{
							"identifier": "Integer",
							"argument": "LayerIndex"
						}
					]
				},
				{
					"name": "Layers_GetLayerNameFromIndex",
					"returns": "Text",
					"params": [
						{
							"identifier": "Integer",
							"argument": "LayerIndex"
						}
					]
				},
				{
					"name": "Layers_GetLayerTypeFromIndex",
					"returns": "ELayerType",
					"params": [
						{
							"identifier": "Integer",
							"argument": "LayerIndex"
						}
					]
				},
				{
					"name": "Layers_GetLayerVisibleFromIndex",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Integer",
							"argument": "LayerIndex"
						}
					]
				},
				{
					"name": "Layers_SetLayerVisibleFromIndex",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "LayerIndex"
						},
						{
							"identifier": "Boolean",
							"argument": "LayerVisibility"
						}
					]
				},
				{
					"name": "Layers_AddLayer",
					"returns": "Void",
					"params": [
						{
							"identifier": "ELayerType",
							"argument": "LayerType"
						}
					]
				},
				{
					"name": "Layers_GetLayerIdSelected",
					"returns": "Ident",
					"params": []
				},
				{
					"name": "Layers_SetLayerIdSelected",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "LayerId"
						}
					]
				},
				{
					"name": "Layers_GetLayerSelectedType",
					"returns": "ELayerType",
					"params": []
				},
				{
					"name": "Layers_GetLayerSelectedIndex",
					"returns": "Integer",
					"params": []
				},
				{
					"name": "Layers_GetEditedLayerType",
					"returns": "ELayerType",
					"params": []
				},
				{
					"name": "Layers_GetLayerSelectedName",
					"returns": "Text",
					"params": []
				},
				{
					"name": "Layers_EditMask",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "LayerIndex"
						}
					]
				},
				{
					"name": "Layers_EditMaskValidate",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "LayerIndex"
						}
					]
				},
				{
					"name": "Layers_MoveSelectedLayerUp",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Layers_MoveSelectedLayerDown",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Layers_EditSelectedLayer",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "RegenerateSolid"
						}
					]
				},
				{
					"name": "Layers_CloseEditSelectedLayer",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Layers_DeleteSelectedLayer",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Transitions_GetCount",
					"returns": "Integer",
					"params": []
				},
				{
					"name": "Transitions_AddTransition",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "TransitionName"
						},
						{
							"identifier": "Integer",
							"argument": "TransitionPosition"
						},
						{
							"identifier": "Real",
							"argument": "TransitionSize"
						}
					]
				},
				{
					"name": "Transitions_DeleteCurrentTransition",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Transitions_GetTransitionSelectedIndex",
					"returns": "Integer",
					"params": []
				},
				{
					"name": "Transitions_SetTransitionSelectedIndex",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "TransitionIndex"
						}
					]
				},
				{
					"name": "Transitions_GetTransitionCurrentPage",
					"returns": "Integer",
					"params": []
				},
				{
					"name": "Transitions_SetTransitionCurrentPage",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "TransitionCurrentPage"
						}
					]
				},
				{
					"name": "Transitions_GetTransitionNameFromIndex",
					"returns": "Text",
					"params": [
						{
							"identifier": "Integer",
							"argument": "TransitionIndex"
						}
					]
				},
				{
					"name": "Transitions_SetTransitionNameFromIndex",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "TransitionIndex"
						},
						{
							"identifier": "Real",
							"argument": "TransitionName"
						}
					]
				},
				{
					"name": "Transitions_GetTransitionVisibilityFromIndex",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Integer",
							"argument": "TransitionIndex"
						}
					]
				},
				{
					"name": "Transitions_SetTransitionVisibilityFromIndex",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "TransitionIndex"
						},
						{
							"identifier": "Boolean",
							"argument": "TransitionVisibility"
						}
					]
				},
				{
					"name": "Transitions_GetTransitionSizeFromIndex",
					"returns": "Real",
					"params": [
						{
							"identifier": "Integer",
							"argument": "TransitionIndex"
						}
					]
				},
				{
					"name": "Transitions_SetTransitionSizeFromIndex",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "TransitionIndex"
						},
						{
							"identifier": "Real",
							"argument": "TransitionSize"
						}
					]
				},
				{
					"name": "Transitions_GetTransitionPositionFromIndex",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Integer",
							"argument": "TransitionIndex"
						}
					]
				},
				{
					"name": "Transitions_SetTransitionPositionFromIndex",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "TransitionIndex"
						},
						{
							"identifier": "Integer",
							"argument": "TransitionPosition"
						}
					]
				},
				{
					"name": "EditionBox_SetStep",
					"returns": "Void",
					"params": [
						{
							"identifier": "Real",
							"argument": "Step"
						}
					]
				},
				{
					"name": "EditedMesh_Clear",
					"returns": "Void",
					"params": []
				},
				{
					"name": "EditedMesh_Simplify",
					"returns": "Void",
					"params": []
				},
				{
					"name": "EditedMesh_Lod",
					"returns": "Void",
					"params": [
						{
							"identifier": "Real",
							"argument": "Faces"
						}
					]
				},
				{
					"name": "UVUnwrap",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						},
						{
							"identifier": "ETexCoordLayer",
							"argument": "ETexCoordLayer"
						}
					]
				},
				{
					"name": "Undo",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Redo",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SwitchPlane",
					"returns": "Void",
					"params": []
				},
				{
					"name": "GridSnap_SetActive",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "IsActive"
						}
					]
				},
				{
					"name": "PickInfo_GetNormal",
					"returns": "Vec3",
					"params": []
				},
				{
					"name": "PickInfo_GetPosition",
					"returns": "Vec3",
					"params": []
				},
				{
					"name": "PickInfo_GetAnchorId",
					"returns": "Ident",
					"params": []
				},
				{
					"name": "PickInfo_GetEdgeLength",
					"returns": "Real",
					"params": []
				},
				{
					"name": "PickInfo_GetNextVertexPosition",
					"returns": "Vec3",
					"params": []
				},
				{
					"name": "PickInfo_GetMaterial",
					"returns": "Ident",
					"params": []
				},
				{
					"name": "PickInfo_GetError",
					"returns": "Text",
					"params": []
				},
				{
					"name": "Part_SetAnchorPos",
					"returns": "Void",
					"params": [
						{
							"identifier": "Vec3",
							"argument": "Position"
						}
					]
				},
				{
					"name": "Part_SetIsJoint",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "IsJoint"
						}
					]
				},
				{
					"name": "Part_ClearAnchor",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Joint_Add",
					"returns": "Void",
					"params": [
						{
							"identifier": "Vec3",
							"argument": "Position"
						}
					]
				},
				{
					"name": "Joint_Link",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "IdChild"
						},
						{
							"identifier": "Ident",
							"argument": "IdParent"
						}
					]
				},
				{
					"name": "Anchor_Remove",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "Id"
						}
					]
				},
				{
					"name": "Material_GetMaterialIdSelected",
					"returns": "Ident",
					"params": []
				},
				{
					"name": "Material_SetMaterialIdSelected",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "MaterialEditorId"
						}
					]
				},
				{
					"name": "Material_GetSubTexIndexSelected",
					"returns": "Integer",
					"params": []
				},
				{
					"name": "Material_MaterialLibGetCount",
					"returns": "Integer",
					"params": []
				},
				{
					"name": "Material_SetDefault",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "MaterialId"
						}
					]
				},
				{
					"name": "Material_GetDefault",
					"returns": "Ident",
					"params": []
				},
				{
					"name": "Material_GetBitmapBase",
					"returns": "CImage",
					"params": [
						{
							"identifier": "Ident",
							"argument": "MaterialId"
						}
					]
				},
				{
					"name": "Material_GetBitmap",
					"returns": "CImage",
					"params": [
						{
							"identifier": "Ident",
							"argument": "MaterialId"
						}
					]
				},
				{
					"name": "Material_MatchesCriterion",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "MaterialId"
						},
						{
							"identifier": "EMaterialFilterCriterion",
							"argument": "ResultSetHandle"
						}
					]
				},
				{
					"name": "Material_SetFilter",
					"returns": "Void",
					"params": [
						{
							"identifier": "EMaterialFilterCriterion",
							"argument": "Criterion"
						},
						{
							"identifier": "EFilterKind",
							"argument": "FilterKind"
						}
					]
				},
				{
					"name": "Material_GetFilter",
					"returns": "EFilterKind",
					"params": [
						{
							"identifier": "EMaterialFilterCriterion",
							"argument": "Criterion"
						}
					]
				},
				{
					"name": "Material_ClearFilters",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Material_UVEditor_SetIsRotation",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "IsRotation"
						}
					]
				},
				{
					"name": "Material_UVEditor_SetIsScale",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "IsScale"
						}
					]
				},
				{
					"name": "Material_UVEditor_SetIsScale1D",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "IsScale"
						}
					]
				},
				{
					"name": "Material_UVEditor_Open",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "MaterialId"
						},
						{
							"identifier": "CMlQuad",
							"argument": "LocationQuad"
						}
					]
				},
				{
					"name": "Material_UVEditor_Close",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Material_UVEditor_IsRunning",
					"returns": "Boolean",
					"params": []
				},
				{
					"name": "Material_UVEditor_SetMode",
					"returns": "Void",
					"params": [
						{
							"identifier": "EUVEditorMode",
							"argument": "Mode"
						}
					]
				},
				{
					"name": "Material_UVEditor_GetMode",
					"returns": "EUVEditorMode",
					"params": []
				},
				{
					"name": "Material_UVEditor_SetProjectionType",
					"returns": "Void",
					"params": [
						{
							"identifier": "EUVEditorProjectionType",
							"argument": "ProjectionType"
						}
					]
				},
				{
					"name": "Material_IsGameMaterial",
					"returns": "Boolean",
					"params": []
				},
				{
					"name": "Material_IsCustomLinkFull",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "MaterialId"
						}
					]
				},
				{
					"name": "Material_UVEditor_Apply",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Material_CopyMaterial",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "Material_PasteMaterial",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "Interaction_Close",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Interaction_SetPreview",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetToPreview"
						}
					]
				},
				{
					"name": "Interaction_StartCreation",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "CreationSetHandle"
						},
						{
							"identifier": "EElemType",
							"argument": "ElemType"
						},
						{
							"identifier": "Ident",
							"argument": "SetToPickFromHandle"
						}
					]
				},
				{
					"name": "Interaction_Creation_GetElems",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ResultSetHandle"
						}
					]
				},
				{
					"name": "Interaction_Creation_ClearParams",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Interaction_Creation_SetEdgesConstraint",
					"returns": "Void",
					"params": [
						{
							"identifier": "EEdgesConstraint",
							"argument": "EdgesConstraint"
						}
					]
				},
				{
					"name": "Interaction_Creation_SetAutoMerge",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "AutoMerge"
						}
					]
				},
				{
					"name": "Interaction_StartPaste",
					"returns": "Boolean",
					"params": []
				},
				{
					"name": "Interaction_StartBlocTransformation",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "TransformationSetHandle"
						}
					]
				},
				{
					"name": "Interaction_StartCurve2D",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "BordersSetHandle"
						}
					]
				},
				{
					"name": "Interaction_CloseCurve2D",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "CanDoCurve2D"
						}
					]
				},
				{
					"name": "Interaction_StartPick",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "EElemType",
							"argument": "ElemType"
						},
						{
							"identifier": "Ident",
							"argument": "SetToPickFrom"
						}
					]
				},
				{
					"name": "Interaction_StartPickJoint",
					"returns": "Boolean",
					"params": []
				},
				{
					"name": "Interaction_StartVoxelPickDrag_Base",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "EElemType",
							"argument": "ElemType"
						}
					]
				},
				{
					"name": "Interaction_StartVoxelPickDrag_Creation",
					"returns": "Boolean",
					"params": []
				},
				{
					"name": "Interaction_StartVoxelPickDrag_Delete",
					"returns": "Boolean",
					"params": []
				},
				{
					"name": "Interaction_StartVoxelPickDrag_Select",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SelectionSetHandle"
						}
					]
				},
				{
					"name": "Interaction_CloseVoxelPickDrag_Select",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Interaction_StartVoxelPickDrag_Pick",
					"returns": "Boolean",
					"params": []
				},
				{
					"name": "Interaction_CloseVoxelPickDrag_Pick",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Interaction_StartVoxelPickDrag_SelectTranslation",
					"returns": "Boolean",
					"params": []
				},
				{
					"name": "Interaction_StartVoxelPickDrag_SelectRotation",
					"returns": "Boolean",
					"params": []
				},
				{
					"name": "Interaction_StartVoxelPickDrag_Paste",
					"returns": "Boolean",
					"params": []
				},
				{
					"name": "CutVoxels",
					"returns": "Void",
					"params": []
				},
				{
					"name": "CopyVoxels",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Interaction_StartMerge",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "MergeSetHandle"
						}
					]
				},
				{
					"name": "Interaction_StartMirror",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "Interaction_Selection_ClearParams",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Interaction_Selection_SetUseParts",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "UseParts"
						}
					]
				},
				{
					"name": "Interaction_Selection_SetCanEnterLeaf",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "CanEnterLeaf"
						}
					]
				},
				{
					"name": "Interaction_StartSelection",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SelectionSetHandle"
						},
						{
							"identifier": "EElemType",
							"argument": "ElemType"
						},
						{
							"identifier": "Ident",
							"argument": "SelectionSetToPickFrom"
						},
						{
							"identifier": "Boolean",
							"argument": "IsFromALayer"
						},
						{
							"identifier": "Boolean",
							"argument": "AllowDoubleClick"
						}
					]
				},
				{
					"name": "Interaction_CloseSelection",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Interaction_StartTranslation",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "TranslationSetHandle"
						}
					]
				},
				{
					"name": "Interaction_StartPickTranslation",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "TranslationSetHandle"
						}
					]
				},
				{
					"name": "Interaction_StartRotation",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "RotationSetHandle"
						}
					]
				},
				{
					"name": "Interaction_StartPickRotation",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "RotationSetHandle"
						}
					]
				},
				{
					"name": "Interaction_Rotation_SetStep",
					"returns": "Void",
					"params": [
						{
							"identifier": "Real",
							"argument": "RotationStep"
						}
					]
				},
				{
					"name": "Interaction_StartPickScale",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ScalingSetHandle"
						}
					]
				},
				{
					"name": "Interaction_Scale_SetStep",
					"returns": "Void",
					"params": [
						{
							"identifier": "Real",
							"argument": "ScalingStep"
						}
					]
				},
				{
					"name": "Interaction_StartSplit",
					"returns": "Boolean",
					"params": []
				},
				{
					"name": "Display_HighlightSet",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "Display_ClearHighlighting",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Display_HideElemsByDistance_Start",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "Display_HideElemsByDistance_Stop",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Display_HideMap",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Display_ShowMap",
					"returns": "Void",
					"params": []
				},
				{
					"name": "MergeAllSuperposedElements",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "Selection_Undo",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Selection_Redo",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Selection_Invert",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SetOfElements_Create",
					"returns": "Ident",
					"params": []
				},
				{
					"name": "SetOfElements_CopyFrom",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "DestinationSet"
						},
						{
							"identifier": "Ident",
							"argument": "SourceSet"
						}
					]
				},
				{
					"name": "SetOfElements_Append",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "DestinationSet"
						},
						{
							"identifier": "Ident",
							"argument": "SourceSet"
						}
					]
				},
				{
					"name": "SetOfElements_Destroy",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "SetOfElements_Empty",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "SetOfElements_SetAllElements",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "SetOfElements_SetAllFaces",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "SetOfElements_DeleteElements",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "SetOfElements_DeleteElements",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						},
						{
							"identifier": "Boolean",
							"argument": "Spread"
						}
					]
				},
				{
					"name": "SetOfElements_HasHorizontalFaces",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "SetOfElements_HasVerticalFaces",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "SetOfElements_GetElemsCount",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "SetOfElements_GetVerticesCount",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "SetOfElements_GetEdgesCount",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "SetOfElements_GetFacesCount",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "ExtendSelectedSet",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "GetBordersSet",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						},
						{
							"identifier": "Ident",
							"argument": "SetBordersHandle"
						}
					]
				},
				{
					"name": "GetBordersVertexs",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						},
						{
							"identifier": "Ident",
							"argument": "SetVertexHandle"
						}
					]
				},
				{
					"name": "SelectionSet_SelectAll",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Curve2DPolygon",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "FourVertexSetHandle"
						},
						{
							"identifier": "Ident",
							"argument": "Sethandle"
						},
						{
							"identifier": "Integer",
							"argument": "SubTexIndex"
						}
					]
				},
				{
					"name": "Preview_Clear",
					"returns": "Void",
					"params": []
				},
				{
					"name": "VoxelSpace_SetVec3",
					"returns": "Void",
					"params": [
						{
							"identifier": "Vec3",
							"argument": "Pos"
						}
					]
				},
				{
					"name": "VoxelSpace_GetVoxelsCount",
					"returns": "Integer",
					"params": []
				},
				{
					"name": "VoxelSpace_SelectAll",
					"returns": "Void",
					"params": []
				},
				{
					"name": "VoxelSpace_DeleteOneVoxel",
					"returns": "Void",
					"params": []
				},
				{
					"name": "VoxelSpace_DeleteSelection",
					"returns": "Void",
					"params": []
				},
				{
					"name": "VoxelSpace_ApplyMaterialToVoxel",
					"returns": "Void",
					"params": []
				},
				{
					"name": "VoxelSpace_GenerateMesh",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SetOfElements_ProjectOnPlane",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "SetOfElements_ProjectOnGround",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						},
						{
							"identifier": "Real",
							"argument": "Height"
						}
					]
				},
				{
					"name": "SetOfElements_SplitEdgeWithVertex",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "SetOfElements_CollapseEdgeWithVertex",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "SetOfElements_Subdivide",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "SetOfElements_Subdivide_Interpolation",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "SetOfVertices_DrawCircle",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "InputSetHandle"
						},
						{
							"identifier": "Ident",
							"argument": "ResultSetHandle"
						}
					]
				},
				{
					"name": "SetOfVertices_DrawDisc",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "InputSetHandle"
						},
						{
							"identifier": "Ident",
							"argument": "ResultSetHandle"
						}
					]
				},
				{
					"name": "SetOfVertices_DrawCircle",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "CenterSetHandle"
						},
						{
							"identifier": "Vec3",
							"argument": "PointOnCircle"
						},
						{
							"identifier": "Ident",
							"argument": "ResultSetHandle"
						}
					]
				},
				{
					"name": "SetOfVertices_DrawIcosahedron",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "InputSetHandle"
						},
						{
							"identifier": "Ident",
							"argument": "ResultSetHandle"
						}
					]
				},
				{
					"name": "SetOfVertices_DrawIcosahedron",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "CenterSetHandle"
						},
						{
							"identifier": "Vec3",
							"argument": "PointOnCircle"
						},
						{
							"identifier": "Ident",
							"argument": "ResultSetHandle"
						}
					]
				},
				{
					"name": "SetOfVertices_DrawIcosahedricSphere",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "InputSetHandle"
						},
						{
							"identifier": "Ident",
							"argument": "ResultSetHandle"
						}
					]
				},
				{
					"name": "SetOfVertices_DrawPoly",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "InputSetHandle"
						},
						{
							"identifier": "Ident",
							"argument": "ResultSetHandle"
						},
						{
							"identifier": "Integer",
							"argument": "VerticesCount"
						}
					]
				},
				{
					"name": "SetOfVertices_DrawPoly",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "CenterSetHandle"
						},
						{
							"identifier": "Vec3",
							"argument": "PointOnPoly"
						},
						{
							"identifier": "Ident",
							"argument": "ResultSetHandle"
						},
						{
							"identifier": "Integer",
							"argument": "VerticesCount"
						}
					]
				},
				{
					"name": "SetOfVertices_DrawSpline",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ControlSetHandle"
						},
						{
							"identifier": "Ident",
							"argument": "ResultSetHandle"
						}
					]
				},
				{
					"name": "SetOfVertices_Weld",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "VerticesSetHandle"
						}
					]
				},
				{
					"name": "SetOfVertices_DrawBox",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ControlSetHandle"
						},
						{
							"identifier": "Ident",
							"argument": "ResultSetHandle"
						}
					]
				},
				{
					"name": "SetOfEdges_Fill",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "SetOfEdges_Flip",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						},
						{
							"identifier": "Ident",
							"argument": "ResultSetHandle"
						}
					]
				},
				{
					"name": "SetOfEdges_BorderExpand",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "SetOfOneEdge_FaceLoopExpand",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "SetOfOneEdge_EdgeLoopExpand",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						}
					]
				},
				{
					"name": "SetOfOneFace_CutHole",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "FaceSetHandle"
						},
						{
							"identifier": "Ident",
							"argument": "EdgesSetHandle"
						}
					]
				},
				{
					"name": "SetOfFaces_Extrude",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						},
						{
							"identifier": "Ident",
							"argument": "ResultSetHandle"
						}
					]
				},
				{
					"name": "SetOfFaces_QuadsToTriangles",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						},
						{
							"identifier": "Ident",
							"argument": "ResultSetHandle"
						}
					]
				},
				{
					"name": "SetOfFaces_ApplyMaterial",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "SetHandle"
						},
						{
							"identifier": "Ident",
							"argument": "MaterialId"
						}
					]
				},
				{
					"name": "SetOfFaces_PlanarExpand",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "FacesSetHandle"
						}
					]
				},
				{
					"name": "SetOfFaces_ChangeOrientation",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "FacesSetHandle"
						}
					]
				},
				{
					"name": "Prefabs_Reload",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Prefab_Export",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Prefab_Import",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "PrefabIndex"
						}
					]
				},
				{
					"name": "Parts_CanMergeParts",
					"returns": "Boolean",
					"params": []
				},
				{
					"name": "Parts_CanGroupParts",
					"returns": "Boolean",
					"params": []
				},
				{
					"name": "Parts_CanUngroupParts",
					"returns": "Boolean",
					"params": []
				},
				{
					"name": "Parts_GetOpsState",
					"returns": "Int3",
					"params": []
				},
				{
					"name": "Parts_MergeSelectedParts",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Parts_Group",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Parts_UngroupSelectedParts",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Cut",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Copy",
					"returns": "Void",
					"params": []
				},
				{
					"name": "AddUndoState",
					"returns": "Void",
					"params": []
				},
				{
					"name": "AutoSave",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Text",
							"argument": "FileName"
						}
					]
				},
				{
					"name": "GetTitleCoreType",
					"returns": "ETitleCoreType",
					"params": []
				}
			]
		},
		"CEditorModule": {
			"inherit": "CEditorBase",
			"enums": {
				"EModuleType": [
					"Undefined",
					"Hud",
					"Inventory",
					"Store",
					"ScoresTable",
					"Equipment",
					"MenuBase",
					"MenuPage",
					"Chrono",
					"SpeedMeter",
					"PlayerState",
					"TeamState"
				]
			},
			"props": {
				"Boolean": [
					"FileBrowser_IsRunning",
					"IsPreviewMode"
				],
				"CEditorPluginModuleEvent[]": [
					"PendingEvents"
				],
				"CModuleMenuModel": [
					"EditedMenu"
				],
				"CModuleMenuPageModel": [
					"EditedMenuPage"
				],
				"CModulePlaygroundHudModel": [
					"EditedPlaygroundHud"
				],
				"Text": [
					"FileBrowser_FilePath"
				]
			},
			"methods": [
				{
					"name": "NewModule",
					"returns": "Void",
					"params": [
						{
							"identifier": "EModuleType",
							"argument": "ModuleType"
						}
					]
				},
				{
					"name": "OpenModule",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Path"
						}
					]
				},
				{
					"name": "Save",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SaveAs",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Path"
						}
					]
				},
				{
					"name": "SaveCopyAs",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Path"
						}
					]
				},
				{
					"name": "ForceExit",
					"returns": "Void",
					"params": []
				},
				{
					"name": "EditedPlaygroundHud_SetPreviewContext",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ContextId"
						}
					]
				},
				{
					"name": "FileBrowser_Open",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CEditorPluginHandle": {
			"inherit": "CNod",
			"enums": {},
			"props": {},
			"methods": []
		},
		"CEditorPluginModuleEvent": {
			"inherit": "CManiaAppEvent",
			"enums": {
				"Type": [
					"LayerCustomEvent",
					"KeyPress",
					"MenuNavigation",
					"Exit",
					"FileNew",
					"FileOpen",
					"FileSave",
					"FileSaveAs"
				]
			},
			"props": {
				"Type": [
					"Type"
				]
			},
			"methods": [
				{
					"name": "Eat",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CEntity": {
			"inherit": "CNod",
			"enums": {},
			"props": {},
			"methods": []
		},
		"CGhost": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CTmResult": [
					"Result"
				],
				"Ident": [
					"Id"
				],
				"Text": [
					"Nickname"
				]
			},
			"methods": []
		},
		"CHighScoreComparison": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CMapInfo": [
					"MapInfo"
				],
				"Integer": [
					"OpponentRecordCount",
					"OpponentRecordDate",
					"OpponentRecordElapsedTime",
					"OpponentRecordRespawnCount",
					"OpponentRecordScore",
					"OpponentRecordTime",
					"RecordCount",
					"RecordDate",
					"RecordElapsedTime",
					"RecordRespawnCount",
					"RecordScore",
					"RecordTime"
				],
				"Text": [
					"Login",
					"OpponentDisplayName",
					"OpponentLogin",
					"OpponentRecordDateString",
					"OpponentRecordUrl",
					"RecordDateString"
				]
			},
			"methods": []
		},
		"CHighScoreComparisonSummary": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Integer": [
					"BestRecordCount",
					"BestRecordElapsedTime",
					"BestRecordLastDate",
					"OpponentBestRecordCount",
					"OpponentBestRecordElapsedTime",
					"OpponentBestRecordLastDate"
				],
				"Text": [
					"BestRecordLastDateString",
					"Login",
					"OpponentBestRecordLastDateString",
					"OpponentDisplayName",
					"OpponentLogin"
				]
			},
			"methods": []
		},
		"CHttpEvent": {
			"inherit": "CNod",
			"enums": {
				"EType": [
					"RequestComplete"
				]
			},
			"props": {
				"CHttpRequest": [
					"Request"
				],
				"EType": [
					"Type"
				]
			},
			"methods": []
		},
		"CHttpManager": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"AutomaticHeaders_Timezone"
				],
				"CHttpEvent[]": [
					"PendingEvents"
				],
				"CHttpRequest[]": [
					"Requests"
				],
				"Integer": [
					"SlotsAvailable"
				]
			},
			"methods": [
				{
					"name": "CreateGet",
					"returns": "CHttpRequest",
					"params": [
						{
							"identifier": "Text",
							"argument": "Url"
						}
					]
				},
				{
					"name": "CreateGet",
					"returns": "CHttpRequest",
					"params": [
						{
							"identifier": "Text",
							"argument": "Url"
						},
						{
							"identifier": "Boolean",
							"argument": "UseCache"
						}
					]
				},
				{
					"name": "CreateGet",
					"returns": "CHttpRequest",
					"params": [
						{
							"identifier": "Text",
							"argument": "Url"
						},
						{
							"identifier": "Boolean",
							"argument": "UseCache"
						},
						{
							"identifier": "Text",
							"argument": "AdditionalHeaders"
						}
					]
				},
				{
					"name": "CreatePost",
					"returns": "CHttpRequest",
					"params": [
						{
							"identifier": "Text",
							"argument": "Url"
						},
						{
							"identifier": "Text",
							"argument": "Resource"
						}
					]
				},
				{
					"name": "CreatePost",
					"returns": "CHttpRequest",
					"params": [
						{
							"identifier": "Text",
							"argument": "Url"
						},
						{
							"identifier": "Text",
							"argument": "Resource"
						},
						{
							"identifier": "Text",
							"argument": "AdditionalHeaders"
						}
					]
				},
				{
					"name": "CreatePostFile",
					"returns": "CHttpRequest",
					"params": [
						{
							"identifier": "Text",
							"argument": "Url"
						},
						{
							"identifier": "Text",
							"argument": "FileName"
						},
						{
							"identifier": "Text",
							"argument": "AdditionalHeaders"
						}
					]
				},
				{
					"name": "Destroy",
					"returns": "Void",
					"params": [
						{
							"identifier": "CHttpRequest",
							"argument": "Request"
						}
					]
				},
				{
					"name": "IsValidUrl",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Text",
							"argument": "Url"
						}
					]
				}
			]
		},
		"CHttpRequest": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"IsCompleted"
				],
				"Integer": [
					"StatusCode"
				],
				"Text": [
					"Result",
					"Url"
				]
			},
			"methods": []
		},
		"CImage": {
			"inherit": "CPlug",
			"enums": {},
			"props": {},
			"methods": []
		},
		"CInputEvent": {
			"inherit": "CNod",
			"enums": {
				"EType": [
					"PadButtonPress"
				],
				"EButton": [
					"Left",
					"Right",
					"Up",
					"Down",
					"A",
					"B",
					"X",
					"Y",
					"L1",
					"R1",
					"LeftStick",
					"RightStick",
					"Menu",
					"View",
					"LeftStick_Left",
					"LeftStick_Right",
					"LeftStick_Up",
					"LeftStick_Down",
					"RightStick_Left",
					"RightStick_Right",
					"RightStick_Up",
					"RightStick_Down",
					"L2",
					"R2",
					"None"
				]
			},
			"props": {
				"Boolean": [
					"IsAutoRepeat"
				],
				"CInputPad": [
					"Pad"
				],
				"EButton": [
					"Button"
				],
				"EType": [
					"Type"
				],
				"Integer": [
					"KeyCode"
				],
				"Text": [
					"KeyName"
				]
			},
			"methods": []
		},
		"CInputManager": {
			"inherit": "CNod",
			"enums": {
				"EButton": [
					"Left",
					"Right",
					"Up",
					"Down",
					"A",
					"B",
					"X",
					"Y",
					"L1",
					"R1",
					"LeftStick",
					"RightStick",
					"Menu",
					"View",
					"LeftStick_Left",
					"LeftStick_Right",
					"LeftStick_Up",
					"LeftStick_Down",
					"RightStick_Left",
					"RightStick_Right",
					"RightStick_Up",
					"RightStick_Down",
					"L2",
					"R2",
					"None"
				]
			},
			"props": {
				"Boolean": [
					"ExclusiveMode",
					"MouseLeftButton",
					"MouseMiddleButton",
					"MouseRightButton"
				],
				"CInputEvent[]": [
					"PendingEvents"
				],
				"CInputPad[]": [
					"Pads"
				],
				"Integer": [
					"Now",
					"Period"
				],
				"Vec2": [
					"MouseKineticScrollVel",
					"MousePos"
				]
			},
			"methods": [
				{
					"name": "GetPadButtonPlaygroundBinding",
					"returns": "Text",
					"params": [
						{
							"identifier": "CInputPad",
							"argument": "Pad"
						},
						{
							"identifier": "EButton",
							"argument": "Button"
						}
					]
				},
				{
					"name": "GetPadButtonCurrentBinding",
					"returns": "Text",
					"params": [
						{
							"identifier": "CInputPad",
							"argument": "Pad"
						},
						{
							"identifier": "EButton",
							"argument": "Button"
						}
					]
				},
				{
					"name": "IsKeyPressed",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Integer",
							"argument": "KeyCode"
						}
					]
				}
			]
		},
		"CInputPad": {
			"inherit": "CNod",
			"enums": {
				"EButton": [
					"Left",
					"Right",
					"Up",
					"Down",
					"A",
					"B",
					"X",
					"Y",
					"L1",
					"R1",
					"LeftStick",
					"RightStick",
					"Menu",
					"View",
					"LeftStick_Left",
					"LeftStick_Right",
					"LeftStick_Up",
					"LeftStick_Down",
					"RightStick_Left",
					"RightStick_Right",
					"RightStick_Up",
					"RightStick_Down",
					"L2",
					"R2",
					"None"
				],
				"EPadType": [
					"Keyboard",
					"Mouse",
					"Generic",
					"XBox",
					"PlayStation",
					"Vive"
				]
			},
			"props": {
				"EButton[]": [
					"ButtonEvents"
				],
				"EPadType": [
					"Type"
				],
				"Ident": [
					"UserId"
				],
				"Integer": [
					"A",
					"B",
					"ControllerId",
					"Down",
					"IdleDuration",
					"L1",
					"Left",
					"LeftStickBut",
					"Menu",
					"R1",
					"Right",
					"RightStickBut",
					"Up",
					"View",
					"X",
					"Y"
				],
				"Real": [
					"L2",
					"LeftStickX",
					"LeftStickY",
					"R2",
					"RightStickX",
					"RightStickY"
				],
				"Text": [
					"ModelName"
				]
			},
			"methods": [
				{
					"name": "ClearRumble",
					"returns": "Void",
					"params": []
				},
				{
					"name": "AddRumble",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Duration"
						},
						{
							"identifier": "Real",
							"argument": "LargeMotor"
						},
						{
							"identifier": "Real",
							"argument": "SmallMotor"
						}
					]
				},
				{
					"name": "SetColor",
					"returns": "Void",
					"params": [
						{
							"identifier": "Vec3",
							"argument": "Color"
						}
					]
				}
			]
		},
		"CItemAnchor": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Vec3": [
					"Position"
				]
			},
			"methods": []
		},
		"CMacroblockInstance": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CBlockClipList": [
					"ClipList"
				],
				"CMacroblockModel": [
					"MacroblockModel"
				],
				"CardinalDirections": [
					"Dir"
				],
				"Int3": [
					"Coord"
				],
				"Int3[]": [
					"UnitCoords"
				],
				"Integer": [
					"Order",
					"UserData"
				]
			},
			"methods": [
				{
					"name": "GetSize",
					"returns": "Int3",
					"params": []
				}
			]
		},
		"CMacroblockModel": {
			"inherit": "CCollector",
			"enums": {},
			"props": {
				"Boolean": [
					"HasCheckpoint",
					"HasFinish",
					"HasMultilap",
					"HasStart",
					"IsGround"
				],
				"CBlockModel": [
					"GeneratedBlockModel"
				],
				"Text": [
					"Name"
				]
			},
			"methods": [
				{
					"name": "ClearScriptMetadata",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CManiaApp": {
			"inherit": "CNod",
			"enums": {
				"ELinkType": [
					"ExternalBrowser",
					"ManialinkBrowser"
				]
			},
			"props": {
				"Boolean": [
					"EnableMenuNavigationInputs",
					"IsVisible"
				],
				"CAudioManager": [
					"Audio"
				],
				"CDataFileMgr": [
					"DataFileMgr"
				],
				"CHttpManager": [
					"Http"
				],
				"CInputManager": [
					"Input"
				],
				"CParsingManager": [
					"Xml"
				],
				"CScoreMgr": [
					"ScoreMgr"
				],
				"CSystemPlatform": [
					"System"
				],
				"CTitle": [
					"LoadedTitle"
				],
				"CUILayer[]": [
					"UILayers"
				],
				"CUser": [
					"LocalUser",
					"UserMgr"
				],
				"CVideoManager": [
					"Video"
				],
				"Integer": [
					"LayersDefaultManialinkVersion",
					"Now"
				],
				"Text": [
					"ManiaAppBaseUrl",
					"ManiaAppUrl"
				]
			},
			"methods": [
				{
					"name": "UILayerCreate",
					"returns": "CUILayer",
					"params": []
				},
				{
					"name": "UILayerDestroy",
					"returns": "Void",
					"params": [
						{
							"identifier": "CUILayer",
							"argument": "Layer"
						}
					]
				},
				{
					"name": "UILayerDestroyAll",
					"returns": "Void",
					"params": []
				},
				{
					"name": "LayerCustomEvent",
					"returns": "Void",
					"params": [
						{
							"identifier": "CUILayer",
							"argument": "Layer"
						},
						{
							"identifier": "Text",
							"argument": "Type"
						},
						{
							"identifier": "Text[]",
							"argument": "Data"
						}
					]
				},
				{
					"name": "OpenLink",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Url"
						},
						{
							"identifier": "ELinkType",
							"argument": "LinkType"
						}
					]
				},
				{
					"name": "OpenFileInExplorer",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Text",
							"argument": "FileName"
						}
					]
				},
				{
					"name": "Dialog_Message",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Message"
						}
					]
				},
				{
					"name": "Dbg_DumpDeclareForVariables",
					"returns": "Text",
					"params": [
						{
							"identifier": "CNod",
							"argument": "Nod"
						},
						{
							"identifier": "Boolean",
							"argument": "StatsOnly"
						}
					]
				}
			]
		},
		"CManiaAppBase": {
			"inherit": "CManiaApp",
			"enums": {},
			"props": {
				"CManiaAppEvent[]": [
					"PendingEvents"
				]
			},
			"methods": []
		},
		"CManiaAppBrowser": {
			"inherit": "CManiaApp",
			"enums": {},
			"props": {
				"CManiaAppEvent[]": [
					"PendingEvents"
				],
				"Text": [
					"BrowserFocusedFrameId"
				]
			},
			"methods": [
				{
					"name": "BrowserBack",
					"returns": "Void",
					"params": []
				},
				{
					"name": "BrowserQuit",
					"returns": "Void",
					"params": []
				},
				{
					"name": "BrowserHome",
					"returns": "Void",
					"params": []
				},
				{
					"name": "BrowserReload",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CManiaAppEvent": {
			"inherit": "CBaseConstEvent",
			"enums": {
				"EType": [
					"LayerCustomEvent",
					"KeyPress",
					"ExternalCustomEvent",
					"MenuNavigation"
				],
				"EMenuNavAction": [
					"Up",
					"Right",
					"Left",
					"Down",
					"Select",
					"Cancel",
					"PageUp",
					"PageDown",
					"AppMenu",
					"Action1",
					"Action2",
					"ScrollUp",
					"ScrollDown"
				]
			},
			"props": {
				"Boolean": [
					"IsActionAutoRepeat"
				],
				"CUILayer": [
					"CustomEventLayer"
				],
				"EMenuNavAction": [
					"MenuNavAction"
				],
				"EType": [
					"Type"
				],
				"Integer": [
					"KeyCode"
				],
				"Text": [
					"CustomEventType",
					"ExternalEventType",
					"KeyName"
				],
				"Text[]": [
					"CustomEventData",
					"ExternalEventData"
				]
			},
			"methods": []
		},
		"CManiaAppPlayground": {
			"inherit": "CManiaAppPlaygroundCommon",
			"enums": {},
			"props": {},
			"methods": [
				{
					"name": "SendCustomEvent",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Type"
						},
						{
							"identifier": "Text[]",
							"argument": "Data"
						}
					]
				}
			]
		},
		"CManiaAppPlaygroundCommon": {
			"inherit": "CManiaApp",
			"enums": {},
			"props": {
				"CManiaAppPlaygroundEvent[]": [
					"PendingEvents"
				],
				"CMap": [
					"Map"
				],
				"CPlaygroundClient": [
					"Playground"
				],
				"CUIConfig": [
					"ClientUI",
					"UI"
				],
				"Integer": [
					"SplitScreenCount"
				]
			},
			"methods": [
				{
					"name": "SplitScreenAssignLayer",
					"returns": "Void",
					"params": [
						{
							"identifier": "CUILayer",
							"argument": "UILayer"
						},
						{
							"identifier": "Integer",
							"argument": "ScreenNum"
						}
					]
				}
			]
		},
		"CManiaAppPlaygroundEvent": {
			"inherit": "CManiaAppEvent",
			"enums": {},
			"props": {
				"Text": [
					"PlaygroundScriptEventType"
				],
				"Text[]": [
					"PlaygroundScriptEventData"
				]
			},
			"methods": []
		},
		"CManiaAppStation": {
			"inherit": "CManiaAppBase",
			"enums": {},
			"props": {
				"CPackCreatorTitleInfo[]": [
					"Maker_EditedTitles"
				],
				"CStation": [
					"Station"
				]
			},
			"methods": [
				{
					"name": "EnterStation",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Maker_EditTitle",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "EditedTitleId"
						}
					]
				},
				{
					"name": "Maker_EditNewTitle",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "EditedTitleName"
						}
					]
				}
			]
		},
		"CManiaAppTitle": {
			"inherit": "CManiaApp",
			"enums": {},
			"props": {
				"Boolean": [
					"Authentication_GetTokenResponseReceived",
					"DontScaleMainMenuForHMD",
					"LoadingScreenRequireKeyPressed"
				],
				"CAchievementsManager": [
					"AchievementsManager"
				],
				"CBadgeManager": [
					"BadgeManager"
				],
				"CManiaAppEvent[]": [
					"PendingEvents"
				],
				"CMatchSettingsManager": [
					"MatchSettingsManager"
				],
				"CNotificationsConsumer": [
					"Notifications"
				],
				"CTitleControl": [
					"TitleControl",
					"TitleFlow"
				],
				"CTitleEdition": [
					"TitleEdition"
				],
				"Integer": [
					"Authentication_ErrorCode"
				],
				"Text": [
					"Authentication_Token",
					"ExternalRequest_Type"
				],
				"Text[]": [
					"ExternalRequest_Data"
				]
			},
			"methods": [
				{
					"name": "Menu_Quit",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Menu_Home",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Menu_Solo",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Menu_Local",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Menu_Internet",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Menu_Editor",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Menu_Profile",
					"returns": "Void",
					"params": []
				},
				{
					"name": "PlayMap",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Map"
						}
					]
				},
				{
					"name": "ExternalRequest_Clear",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Authentication_GetToken",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "AppLogin"
						}
					]
				}
			]
		},
		"CManiaAppTitleLayer": {
			"inherit": "CMlScript",
			"enums": {},
			"props": {
				"CManiaAppTitle": [
					"ParentApp"
				],
				"CTitleControl": [
					"TitleControl"
				]
			},
			"methods": []
		},
		"CMap": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"HasCustomIntro",
					"HasCustomMusic",
					"TMObjective_IsLapRace"
				],
				"CMapInfo": [
					"MapInfo"
				],
				"Int3": [
					"Size"
				],
				"Integer": [
					"CopperPrice",
					"TMObjective_AuthorTime",
					"TMObjective_BronzeTime",
					"TMObjective_GoldTime",
					"TMObjective_NbLaps",
					"TMObjective_SilverTime"
				],
				"Text": [
					"AuthorLogin",
					"AuthorNickName",
					"AuthorZoneIconUrl",
					"AuthorZonePath",
					"CollectionName",
					"Comments",
					"DecorationName",
					"MapName",
					"MapStyle",
					"MapType",
					"ObjectiveTextAuthor",
					"ObjectiveTextBronze",
					"ObjectiveTextGold",
					"ObjectiveTextSilver"
				]
			},
			"methods": []
		},
		"CMapBotPath": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"IsFlying"
				],
				"Integer": [
					"Clan"
				],
				"Vec3[]": [
					"Path"
				]
			},
			"methods": []
		},
		"CMapBotSpawn": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"IsFlying"
				],
				"Ident": [
					"BotModelId"
				]
			},
			"methods": []
		},
		"CMapEditorPlugin": {
			"inherit": "CManiaApp",
			"enums": {
				"CardinalDirections": [
					"North",
					"East",
					"South",
					"West"
				],
				"PlaceMode": [
					"Unknown",
					"Terraform",
					"Block",
					"Macroblock",
					"Skin",
					"CopyPaste",
					"Test",
					"Plugin",
					"CustomSelection",
					"OffZone",
					"BlockProperty",
					"Path",
					"GhostBlock",
					"Item",
					"Light"
				],
				"EditMode": [
					"Unknown",
					"Place",
					"FreeLook",
					"Erase",
					"Pick",
					"SelectionAdd",
					"SelectionRemove"
				],
				"ShadowsQuality": [
					"NotComputed",
					"VeryFast",
					"Fast",
					"Default",
					"High",
					"Ultra"
				],
				"ValidationStatus": [
					"NotValidable",
					"Validable",
					"Validated"
				]
			},
			"props": {
				"Boolean": [
					"BlockStockMode",
					"EditorInputIsDown_Camera0",
					"EditorInputIsDown_Camera1",
					"EditorInputIsDown_Camera3",
					"EditorInputIsDown_Camera7",
					"EditorInputIsDown_Camera9",
					"EditorInputIsDown_CameraDown",
					"EditorInputIsDown_CameraLeft",
					"EditorInputIsDown_CameraRight",
					"EditorInputIsDown_CameraUp",
					"EditorInputIsDown_CameraZoomNext",
					"EditorInputIsDown_ClassicMapEditor",
					"EditorInputIsDown_CursorDelete",
					"EditorInputIsDown_CursorDown",
					"EditorInputIsDown_CursorLeft",
					"EditorInputIsDown_CursorLower",
					"EditorInputIsDown_CursorPick",
					"EditorInputIsDown_CursorPlace",
					"EditorInputIsDown_CursorRaise",
					"EditorInputIsDown_CursorRight",
					"EditorInputIsDown_CursorTurn",
					"EditorInputIsDown_CursorTurnSlightly",
					"EditorInputIsDown_CursorTurnSlightlyAntiClockwise",
					"EditorInputIsDown_CursorUp",
					"EditorInputIsDown_IconDown",
					"EditorInputIsDown_IconLeft",
					"EditorInputIsDown_IconRight",
					"EditorInputIsDown_IconUp",
					"EditorInputIsDown_MapStyle",
					"EditorInputIsDown_Menu",
					"EditorInputIsDown_PivotChange",
					"EditorInputIsDown_Redo",
					"EditorInputIsDown_RemoveAll",
					"EditorInputIsDown_Save",
					"EditorInputIsDown_SaveAs",
					"EditorInputIsDown_SwitchToRace",
					"EditorInputIsDown_Undo",
					"EnableAirMapping",
					"EnableCursorShowingWhenInterfaceIsFocused",
					"EnableEditorInputsCustomProcessing",
					"EnableMixMapping",
					"HideAlwaysCursorDirectionalArrow",
					"HideBlockHelpers",
					"HideEditorInterface",
					"HoldLoadingScreen",
					"IsEditorReadyForRequest",
					"IsTesting",
					"IsUltraShadowsQualityAvailable",
					"IsValidating",
					"ShowPlacementGrid",
					"UndergroundMode"
				],
				"CAnchorData[]": [
					"AnchorData"
				],
				"CBlock[]": [
					"Blocks"
				],
				"CBlockClipList[]": [
					"FixedClipLists",
					"FrameClipLists",
					"MacroblockInstanceClipLists"
				],
				"CBlockModel": [
					"CursorBlockModel",
					"CursorTerrainBlockModel"
				],
				"CBlockModel[]": [
					"BlockModels",
					"TerrainBlockModels"
				],
				"CItemAnchor[]": [
					"Items"
				],
				"CMacroblockInstance[]": [
					"MacroblockInstances"
				],
				"CMacroblockModel": [
					"CursorMacroblockModel"
				],
				"CMacroblockModel[]": [
					"MacroblockModels"
				],
				"CMap": [
					"Map"
				],
				"CMapEditorPluginEvent[]": [
					"PendingEvents"
				],
				"CMlPage": [
					"ManialinkPage"
				],
				"CardinalDirections": [
					"CursorDir"
				],
				"EditMode": [
					"EditMode"
				],
				"Int3": [
					"CursorCoord"
				],
				"Int3[]": [
					"CustomSelectionCoords"
				],
				"Integer": [
					"CollectionGroundY",
					"MediatrackIngameEditedClipIndex"
				],
				"PlaceMode": [
					"PlaceMode"
				],
				"Real": [
					"CameraHAngle",
					"CameraToTargetDistance",
					"CameraVAngle",
					"CollectionSquareHeight",
					"CollectionSquareSize",
					"CursorBrightnessFactor",
					"ThumbnailCameraFovY",
					"ThumbnailCameraHAngle",
					"ThumbnailCameraRoll",
					"ThumbnailCameraVAngle"
				],
				"ShadowsQuality": [
					"CurrentShadowsQuality"
				],
				"Text": [
					"ManialinkText",
					"MapFileName",
					"MapName"
				],
				"Text[]": [
					"MediatrackIngameClips"
				],
				"ValidationStatus": [
					"ValidationStatus"
				],
				"Vec3": [
					"CameraPosition",
					"CameraTargetPosition",
					"CustomSelectionRGB",
					"ThumbnailCameraPosition"
				]
			},
			"methods": [
				{
					"name": "ComputeShadows",
					"returns": "Void",
					"params": []
				},
				{
					"name": "ComputeShadows",
					"returns": "Void",
					"params": [
						{
							"identifier": "ShadowsQuality",
							"argument": "ShadowsQuality"
						}
					]
				},
				{
					"name": "DisplayDefaultSetObjectivesDialog",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Undo",
					"returns": "Boolean",
					"params": []
				},
				{
					"name": "Redo",
					"returns": "Boolean",
					"params": []
				},
				{
					"name": "Help",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Validate",
					"returns": "Void",
					"params": []
				},
				{
					"name": "AutoSave",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Quit",
					"returns": "Void",
					"params": []
				},
				{
					"name": "QuickQuit",
					"returns": "Void",
					"params": []
				},
				{
					"name": "QuitAndSetResult",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Type"
						},
						{
							"identifier": "Text[]",
							"argument": "Data"
						}
					]
				},
				{
					"name": "QuickQuitAndSetResult",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Type"
						},
						{
							"identifier": "Text[]",
							"argument": "Data"
						}
					]
				},
				{
					"name": "TestMapFromStart",
					"returns": "Void",
					"params": []
				},
				{
					"name": "TestMapFromCoord",
					"returns": "Void",
					"params": [
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						}
					]
				},
				{
					"name": "TestMapWithMode",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "RulesModeName"
						}
					]
				},
				{
					"name": "TestMapWithMode_SplitScreen",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "RulesModeName"
						}
					]
				},
				{
					"name": "TestMapWithMode_SplitScreen",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "RulesModeName"
						},
						{
							"identifier": "Integer",
							"argument": "ScreenCount"
						}
					]
				},
				{
					"name": "TestMapWithMode_SplitScreen",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "RulesModeName"
						},
						{
							"identifier": "Integer",
							"argument": "ScreenCount"
						},
						{
							"identifier": "Integer",
							"argument": "FakeCount"
						}
					]
				},
				{
					"name": "SaveMap",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "FileName"
						}
					]
				},
				{
					"name": "SaveMap",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "FileName"
						},
						{
							"identifier": "Text",
							"argument": "Path"
						}
					]
				},
				{
					"name": "GetRaceCamera",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Vec3",
							"argument": "Position"
						},
						{
							"identifier": "Real",
							"argument": "Yaw"
						},
						{
							"identifier": "Real",
							"argument": "Pitch"
						},
						{
							"identifier": "Real",
							"argument": "Roll"
						},
						{
							"identifier": "Real",
							"argument": "FovY"
						}
					]
				},
				{
					"name": "RemoveAllBlocks",
					"returns": "Void",
					"params": []
				},
				{
					"name": "RemoveAllTerrain",
					"returns": "Void",
					"params": []
				},
				{
					"name": "RemoveAllOffZone",
					"returns": "Void",
					"params": []
				},
				{
					"name": "RemoveAllObjects",
					"returns": "Void",
					"params": []
				},
				{
					"name": "RemoveAll",
					"returns": "Void",
					"params": []
				},
				{
					"name": "RemoveAllBlocksAndTerrain",
					"returns": "Void",
					"params": []
				},
				{
					"name": "ShowCustomSelection",
					"returns": "Void",
					"params": []
				},
				{
					"name": "HideCustomSelection",
					"returns": "Void",
					"params": []
				},
				{
					"name": "CopyPaste_Copy",
					"returns": "Void",
					"params": []
				},
				{
					"name": "CopyPaste_Cut",
					"returns": "Void",
					"params": []
				},
				{
					"name": "CopyPaste_Remove",
					"returns": "Void",
					"params": []
				},
				{
					"name": "CopyPaste_SelectAll",
					"returns": "Void",
					"params": []
				},
				{
					"name": "CopyPaste_ResetSelection",
					"returns": "Void",
					"params": []
				},
				{
					"name": "OpenToolsMenu",
					"returns": "Void",
					"params": []
				},
				{
					"name": "EditMediatrackIngame",
					"returns": "Void",
					"params": []
				},
				{
					"name": "PreloadAllBlocks",
					"returns": "Void",
					"params": []
				},
				{
					"name": "PreloadAllItems",
					"returns": "Void",
					"params": []
				},
				{
					"name": "CanPlaceBlock",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CBlockModel",
							"argument": "BlockModel"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						},
						{
							"identifier": "Boolean",
							"argument": "OnGround"
						},
						{
							"identifier": "Integer",
							"argument": "VariantIndex"
						}
					]
				},
				{
					"name": "PlaceBlock",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CBlockModel",
							"argument": "BlockModel"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						}
					]
				},
				{
					"name": "CanPlaceBlock_NoDestruction",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CBlockModel",
							"argument": "BlockModel"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						},
						{
							"identifier": "Boolean",
							"argument": "OnGround"
						},
						{
							"identifier": "Integer",
							"argument": "VariantIndex"
						}
					]
				},
				{
					"name": "PlaceBlock_NoDestruction",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CBlockModel",
							"argument": "BlockModel"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						}
					]
				},
				{
					"name": "CanPlaceRoadBlocks",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CBlockModel",
							"argument": "BlockModel"
						},
						{
							"identifier": "Int3",
							"argument": "StartCoord"
						},
						{
							"identifier": "Int3",
							"argument": "EndCoord"
						}
					]
				},
				{
					"name": "PlaceRoadBlocks",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CBlockModel",
							"argument": "BlockModel"
						},
						{
							"identifier": "Int3",
							"argument": "StartCoord"
						},
						{
							"identifier": "Int3",
							"argument": "EndCoord"
						}
					]
				},
				{
					"name": "CanPlaceTerrainBlocks",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CBlockModel",
							"argument": "BlockModel"
						},
						{
							"identifier": "Int3",
							"argument": "StartCoord"
						},
						{
							"identifier": "Int3",
							"argument": "EndCoord"
						}
					]
				},
				{
					"name": "PlaceTerrainBlocks",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CBlockModel",
							"argument": "BlockModel"
						},
						{
							"identifier": "Int3",
							"argument": "StartCoord"
						},
						{
							"identifier": "Int3",
							"argument": "EndCoord"
						}
					]
				},
				{
					"name": "PlaceTerrainBlocks_NoDestruction",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CBlockModel",
							"argument": "BlockModel"
						},
						{
							"identifier": "Int3",
							"argument": "StartCoord"
						},
						{
							"identifier": "Int3",
							"argument": "EndCoord"
						}
					]
				},
				{
					"name": "CanPlaceMacroblock",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CMacroblockModel",
							"argument": "MacroblockModel"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						}
					]
				},
				{
					"name": "PlaceMacroblock",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CMacroblockModel",
							"argument": "MacroblockModel"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						}
					]
				},
				{
					"name": "CanPlaceMacroblock_NoDestruction",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CMacroblockModel",
							"argument": "MacroblockModel"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						}
					]
				},
				{
					"name": "PlaceMacroblock_NoDestruction",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CMacroblockModel",
							"argument": "MacroblockModel"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						}
					]
				},
				{
					"name": "CanPlaceMacroblock_NoTerrain",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CMacroblockModel",
							"argument": "MacroblockModel"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						}
					]
				},
				{
					"name": "PlaceMacroblock_NoTerrain",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CMacroblockModel",
							"argument": "MacroblockModel"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						}
					]
				},
				{
					"name": "RemoveMacroblock",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CMacroblockModel",
							"argument": "MacroblockModel"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						}
					]
				},
				{
					"name": "RemoveMacroblock_NoTerrain",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CMacroblockModel",
							"argument": "MacroblockModel"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						}
					]
				},
				{
					"name": "GetBlock",
					"returns": "CBlock",
					"params": [
						{
							"identifier": "Int3",
							"argument": "Coord"
						}
					]
				},
				{
					"name": "IsBlockModelSkinnable",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CBlockModel",
							"argument": "BlockModel"
						}
					]
				},
				{
					"name": "GetNbBlockModelSkins",
					"returns": "Integer",
					"params": [
						{
							"identifier": "CBlockModel",
							"argument": "BlockModel"
						}
					]
				},
				{
					"name": "GetBlockModelSkin",
					"returns": "Text",
					"params": [
						{
							"identifier": "CBlockModel",
							"argument": "BlockModel"
						},
						{
							"identifier": "Integer",
							"argument": "SkinIndex"
						}
					]
				},
				{
					"name": "GetSkinDisplayName",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "SkinFileName"
						}
					]
				},
				{
					"name": "GetBlockSkin",
					"returns": "Text",
					"params": [
						{
							"identifier": "CBlock",
							"argument": "Block"
						}
					]
				},
				{
					"name": "SetBlockSkin",
					"returns": "Void",
					"params": [
						{
							"identifier": "CBlock",
							"argument": "Block"
						},
						{
							"identifier": "Text",
							"argument": "SkinFileName"
						}
					]
				},
				{
					"name": "OpenBlockSkinDialog",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CBlock",
							"argument": "Block"
						}
					]
				},
				{
					"name": "RemoveBlock",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Int3",
							"argument": "Coord"
						}
					]
				},
				{
					"name": "RemoveTerrainBlocks",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Int3",
							"argument": "StartCoord"
						},
						{
							"identifier": "Int3",
							"argument": "EndCoord"
						}
					]
				},
				{
					"name": "GetBlockGroundHeight",
					"returns": "Integer",
					"params": [
						{
							"identifier": "CBlockModel",
							"argument": "BlockModel"
						},
						{
							"identifier": "Integer",
							"argument": "CoordX"
						},
						{
							"identifier": "Integer",
							"argument": "CoordZ"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						}
					]
				},
				{
					"name": "GetGroundHeight",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Integer",
							"argument": "CoordX"
						},
						{
							"identifier": "Integer",
							"argument": "CoordZ"
						}
					]
				},
				{
					"name": "GetMouseCoordOnGround",
					"returns": "Int3",
					"params": []
				},
				{
					"name": "GetMouseCoordAtHeight",
					"returns": "Int3",
					"params": [
						{
							"identifier": "Integer",
							"argument": "CoordY"
						}
					]
				},
				{
					"name": "GetStartLineBlock",
					"returns": "CBlock",
					"params": []
				},
				{
					"name": "RemoveItem",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CAnchorData",
							"argument": "Item"
						}
					]
				},
				{
					"name": "CopyPaste_AddOrSubSelection",
					"returns": "Void",
					"params": [
						{
							"identifier": "Int3",
							"argument": "StartCoord"
						},
						{
							"identifier": "Int3",
							"argument": "EndCoord"
						}
					]
				},
				{
					"name": "CopyPaste_Symmetrize",
					"returns": "Boolean",
					"params": []
				},
				{
					"name": "SaveMacroblock",
					"returns": "Void",
					"params": [
						{
							"identifier": "CMacroblockModel",
							"argument": "MacroblockModel"
						}
					]
				},
				{
					"name": "GetMacroblockModelFromFilePath",
					"returns": "CMacroblockModel",
					"params": [
						{
							"identifier": "Text",
							"argument": "MacroblockModelFilePath"
						}
					]
				},
				{
					"name": "GetTerrainBlockModelFromName",
					"returns": "CBlockModel",
					"params": [
						{
							"identifier": "Text",
							"argument": "TerrainBlockModelName"
						}
					]
				},
				{
					"name": "GetBlockModelFromName",
					"returns": "CBlockModel",
					"params": [
						{
							"identifier": "Text",
							"argument": "BlockModelName"
						}
					]
				},
				{
					"name": "CreateFrameClipList",
					"returns": "CBlockClipList",
					"params": []
				},
				{
					"name": "CreateFixedClipList",
					"returns": "CBlockClipList",
					"params": []
				},
				{
					"name": "UnvalidateMetadata",
					"returns": "Void",
					"params": []
				},
				{
					"name": "UnvalidateGameplayInfo",
					"returns": "Void",
					"params": []
				},
				{
					"name": "UnvalidatePlayfield",
					"returns": "Void",
					"params": []
				},
				{
					"name": "RemoveMacroblock_NoTerrain_NoUnvalidate",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CMacroblockModel",
							"argument": "MacroblockModel"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						}
					]
				},
				{
					"name": "PlaceMacroblock_NoTerrain_NoUnvalidate",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CMacroblockModel",
							"argument": "MacroblockModel"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						}
					]
				},
				{
					"name": "CreateMacroblockInstance",
					"returns": "CMacroblockInstance",
					"params": [
						{
							"identifier": "CMacroblockModel",
							"argument": "MacroblockModel"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						}
					]
				},
				{
					"name": "CreateMacroblockInstance",
					"returns": "CMacroblockInstance",
					"params": [
						{
							"identifier": "CMacroblockModel",
							"argument": "MacroblockModel"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						},
						{
							"identifier": "Integer",
							"argument": "UserData"
						}
					]
				},
				{
					"name": "CreateMacroblockInstance",
					"returns": "CMacroblockInstance",
					"params": [
						{
							"identifier": "CMacroblockModel",
							"argument": "MacroblockModel"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						},
						{
							"identifier": "CBlockClipList",
							"argument": "DefaultClipList"
						}
					]
				},
				{
					"name": "CreateMacroblockInstance",
					"returns": "CMacroblockInstance",
					"params": [
						{
							"identifier": "CMacroblockModel",
							"argument": "MacroblockModel"
						},
						{
							"identifier": "Int3",
							"argument": "Coord"
						},
						{
							"identifier": "CardinalDirections",
							"argument": "Dir"
						},
						{
							"identifier": "CBlockClipList",
							"argument": "DefaultClipList"
						},
						{
							"identifier": "Integer",
							"argument": "UserData"
						}
					]
				},
				{
					"name": "GetMacroblockInstanceFromOrder",
					"returns": "CMacroblockInstance",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Order"
						}
					]
				},
				{
					"name": "GetMacroblockInstanceFromUnitCoord",
					"returns": "CMacroblockInstance",
					"params": [
						{
							"identifier": "Int3",
							"argument": "Coord"
						}
					]
				},
				{
					"name": "GetLatestMacroblockInstance",
					"returns": "CMacroblockInstance",
					"params": []
				},
				{
					"name": "GetLatestMacroblockInstance",
					"returns": "CMacroblockInstance",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Offset"
						}
					]
				},
				{
					"name": "GetMacroblockInstanceConnectedToClip",
					"returns": "CMacroblockInstance",
					"params": [
						{
							"identifier": "CBlockClip",
							"argument": "Clip"
						}
					]
				},
				{
					"name": "RemoveMacroblockInstance",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CMacroblockInstance",
							"argument": "MacroblockInstance"
						}
					]
				},
				{
					"name": "RemoveMacroblockInstanceFromOrder",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Order"
						}
					]
				},
				{
					"name": "RemoveMacroblockInstanceFromUnitCoord",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Order"
						}
					]
				},
				{
					"name": "RemoveMacroblockInstancesByUserData",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Integer",
							"argument": "UserData"
						}
					]
				},
				{
					"name": "ResetAllMacroblockInstances",
					"returns": "Void",
					"params": []
				},
				{
					"name": "GetMaxOrder",
					"returns": "Integer",
					"params": []
				},
				{
					"name": "SetMapType",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Text",
							"argument": "MapType"
						}
					]
				},
				{
					"name": "SetMapStyle",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "MapStyle"
						}
					]
				},
				{
					"name": "GetMapStyle",
					"returns": "Text",
					"params": []
				},
				{
					"name": "SetMapIsCreatedWithPartyEditor",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "IsCreatedWithPartyEditor"
						}
					]
				},
				{
					"name": "GetAvailableMapName",
					"returns": "Text",
					"params": []
				}
			]
		},
		"CMapEditorPluginEvent": {
			"inherit": "CManiaAppEvent",
			"enums": {
				"Type": [
					"LayerCustomEvent",
					"KeyPress",
					"MenuNavigation",
					"CursorSelectionBegin",
					"CursorSelectionEnd",
					"CursorChange",
					"MapModified",
					"EditorInput",
					"MapSavedOrSaveCancelled",
					"EditAnchor",
					"EditObjectives",
					"StartValidation",
					"StartTest"
				],
				"EInput": [
					"Unknown",
					"Menu",
					"SwitchToRace",
					"Undo",
					"Redo",
					"CursorUp",
					"CursorRight",
					"CursorDown",
					"CursorLeft",
					"CursorRaise",
					"CursorLower",
					"CursorTurn",
					"CursorPick",
					"CursorPlace",
					"CursorDelete",
					"CameraUp",
					"CameraRight",
					"CameraDown",
					"CameraLeft",
					"CameraZoomNext",
					"Camera0",
					"Camera1",
					"Camera3",
					"Camera7",
					"Camera9",
					"PivotChange",
					"CursorTurnSlightly",
					"CursorTurnSlightlyAntiClockwise",
					"IconUp",
					"IconRight",
					"IconDown",
					"IconLeft",
					"RemoveAll",
					"Save",
					"SaveAs",
					"MapStyle",
					"ClassicMapEditor"
				]
			},
			"props": {
				"Boolean": [
					"IsFromKeyboard",
					"IsFromMouse",
					"IsFromPad",
					"MapSavedOrSaveCancelled",
					"OnlyScriptMetadataModified"
				],
				"EInput": [
					"Input"
				],
				"Ident": [
					"EditedAnchorDataId"
				],
				"Type": [
					"Type"
				]
			},
			"methods": []
		},
		"CMapEditorPluginLayer": {
			"inherit": "CMlScript",
			"enums": {},
			"props": {
				"CMapEditorPlugin": [
					"Editor"
				]
			},
			"methods": []
		},
		"CMapGroup": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CMapInfo[]": [
					"MapInfos"
				]
			},
			"methods": [
				{
					"name": "IsUnlocked",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CMapInfo": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"CreatedWithPartyEditor",
					"CreatedWithSimpleEditor",
					"IsPlayable",
					"TMObjective_IsLapRace",
					"Unlocked"
				],
				"Integer": [
					"CopperPrice",
					"TMObjective_AuthorTime",
					"TMObjective_BronzeTime",
					"TMObjective_GoldTime",
					"TMObjective_NbLaps",
					"TMObjective_SilverTime"
				],
				"Text": [
					"AuthorCountryFlagUrl",
					"AuthorLogin",
					"AuthorNickName",
					"AuthorZoneFlagUrl",
					"AuthorZonePath",
					"CollectionName",
					"Comments",
					"FileName",
					"MapStyle",
					"MapType",
					"MapUid",
					"Name",
					"Path"
				]
			},
			"methods": []
		},
		"CMapLandmark": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CMapBotPath": [
					"BotPath"
				],
				"CMapBotSpawn": [
					"BotSpawn"
				],
				"CMapObjectAnchor": [
					"ObjectAnchor"
				],
				"CMapSector": [
					"Sector"
				],
				"CMapSpawn": [
					"PlayerSpawn"
				],
				"CMapWaypoint": [
					"Waypoint"
				],
				"Integer": [
					"Order"
				],
				"Text": [
					"Tag"
				],
				"Vec3": [
					"Position"
				]
			},
			"methods": []
		},
		"CMapObjectAnchor": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Ident": [
					"ItemModelId"
				],
				"Text": [
					"ItemName"
				]
			},
			"methods": []
		},
		"CMapSector": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Ident[]": [
					"PlayersIds"
				],
				"Text": [
					"Tag"
				]
			},
			"methods": []
		},
		"CMapSpawn": {
			"inherit": "CNod",
			"enums": {},
			"props": {},
			"methods": []
		},
		"CMapType": {
			"inherit": "CMapEditorPlugin",
			"enums": {
				"ValidationStatus": [
					"NotValidable",
					"Validable",
					"Validated"
				]
			},
			"props": {
				"Boolean": [
					"CustomEditAnchorData",
					"IsSwitchedToPlayground",
					"ValidationEndNoConfirm",
					"ValidationEndRequested"
				],
				"CUIConfigMgr": [
					"UIManager"
				],
				"CUser[]": [
					"Users"
				],
				"Text": [
					"ValidabilityRequirementsMessage"
				],
				"ValidationStatus": [
					"ValidationStatus"
				]
			},
			"methods": [
				{
					"name": "ClearMapMetadata",
					"returns": "Void",
					"params": []
				},
				{
					"name": "RequestEnterPlayground",
					"returns": "Void",
					"params": []
				},
				{
					"name": "RequestLeavePlayground",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CMapWaypoint": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"IsFinish",
					"IsMultiLap"
				]
			},
			"methods": []
		},
		"CMatchSettings": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CMatchSettingsPlaylistItem[]": [
					"Playlist"
				],
				"Text": [
					"FileName",
					"Name",
					"ScriptModeName"
				]
			},
			"methods": [
				{
					"name": "ScriptModeName_Check",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Text",
							"argument": "ScriptModeName"
						}
					]
				},
				{
					"name": "ScriptModeName_Set",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ScriptModeName"
						}
					]
				},
				{
					"name": "Playlist_FileExists",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Text",
							"argument": "File"
						}
					]
				},
				{
					"name": "Playlist_FileMatchesMode",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Text",
							"argument": "File"
						}
					]
				},
				{
					"name": "Playlist_Add",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "File"
						}
					]
				},
				{
					"name": "Playlist_Remove",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Index"
						}
					]
				},
				{
					"name": "Playlist_SwapUp",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Index"
						}
					]
				},
				{
					"name": "Playlist_SwapDown",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Index"
						}
					]
				}
			]
		},
		"CMatchSettingsManager": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"MatchSettings_EditScriptSettings_Ongoing"
				],
				"CMatchSettings[]": [
					"MatchSettings"
				]
			},
			"methods": [
				{
					"name": "MatchSettings_Refresh",
					"returns": "Void",
					"params": []
				},
				{
					"name": "MatchSettings_Create",
					"returns": "CMatchSettings",
					"params": [
						{
							"identifier": "Text",
							"argument": "FilePath"
						}
					]
				},
				{
					"name": "MatchSettings_Save",
					"returns": "Void",
					"params": [
						{
							"identifier": "CMatchSettings",
							"argument": "MatchSettings"
						}
					]
				},
				{
					"name": "MatchSettings_SaveAs",
					"returns": "CMatchSettings",
					"params": [
						{
							"identifier": "Text",
							"argument": "FilePath"
						},
						{
							"identifier": "CMatchSettings",
							"argument": "MatchSettings"
						}
					]
				},
				{
					"name": "MatchSettings_EditScriptSettings",
					"returns": "Void",
					"params": [
						{
							"identifier": "CMatchSettings",
							"argument": "MatchSettings"
						}
					]
				}
			]
		},
		"CMatchSettingsPlaylistItem": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"FileExists"
				],
				"Text": [
					"Name"
				]
			},
			"methods": []
		},
		"CMlBrowser": {
			"inherit": "CMlScript",
			"enums": {
				"EBuddyResult": [
					"Ok",
					"Error",
					"NotFinished"
				]
			},
			"props": {
				"Boolean": [
					"IsInBrowser"
				],
				"CManiaAppBrowser": [
					"ParentApp"
				],
				"CMap": [
					"CurMap"
				],
				"EBuddyResult": [
					"BuddyDoResult"
				],
				"Text": [
					"BrowserFocusedFrameId",
					"BuddyDoErrorMessage"
				]
			},
			"methods": [
				{
					"name": "ShowCurMapCard",
					"returns": "Void",
					"params": []
				},
				{
					"name": "BrowserBack",
					"returns": "Void",
					"params": []
				},
				{
					"name": "BrowserQuit",
					"returns": "Void",
					"params": []
				},
				{
					"name": "BrowserHome",
					"returns": "Void",
					"params": []
				},
				{
					"name": "BrowserReload",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SetLocalUserClubLink",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ClubLink"
						}
					]
				}
			]
		},
		"CMlCamera": {
			"inherit": "CMlControl",
			"enums": {},
			"props": {},
			"methods": []
		},
		"CMlControl": {
			"inherit": "CNod",
			"enums": {
				"AlignHorizontal": [
					"Left",
					"HCenter",
					"Right",
					"None"
				],
				"AlignVertical": [
					"Top",
					"VCenter",
					"Bottom",
					"None",
					"VCenter2"
				]
			},
			"props": {
				"AlignHorizontal": [
					"HorizontalAlign"
				],
				"AlignVertical": [
					"VerticalAlign"
				],
				"Boolean": [
					"IsFocused",
					"Visible"
				],
				"CMlFrame": [
					"Parent"
				],
				"Real": [
					"AbsoluteRotation",
					"AbsoluteScale",
					"RelativeRotation",
					"RelativeScale",
					"ZIndex"
				],
				"Text": [
					"ControlId",
					"ToolTip"
				],
				"Text[]": [
					"ControlClasses"
				],
				"Vec2": [
					"AbsolutePosition_V3",
					"RelativePosition_V3",
					"Size"
				]
			},
			"methods": [
				{
					"name": "HasClass",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Text",
							"argument": "Class"
						}
					]
				},
				{
					"name": "DataAttributeExists",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Text",
							"argument": "DataName"
						}
					]
				},
				{
					"name": "DataAttributeGet",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "DataName"
						}
					]
				},
				{
					"name": "DataAttributeSet",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "DataName"
						},
						{
							"identifier": "Text",
							"argument": "DataValue"
						}
					]
				},
				{
					"name": "Show",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Hide",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Focus",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CMlEntry": {
			"inherit": "CMlControl",
			"enums": {
				"ETextFormat": [
					"Basic",
					"Script",
					"Password",
					"Newpassword"
				]
			},
			"props": {
				"Boolean": [
					"AutoNewLine"
				],
				"ETextFormat": [
					"TextFormat"
				],
				"Integer": [
					"MaxLine"
				],
				"Real": [
					"Opacity",
					"TextSizeReal"
				],
				"Text": [
					"Value",
					"TextColor"
				]
			},
			"methods": [
				{
					"name": "StartEdition",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SetText",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "NewText"
						},
						{
							"identifier": "Boolean",
							"argument": "SendSubmitEvent"
						}
					]
				}
			]
		},
		"CMlFileEntry": {
			"inherit": "CMlEntry",
			"enums": {},
			"props": {
				"Text": [
					"FullFileName"
				]
			},
			"methods": []
		},
		"CMlFrame": {
			"inherit": "CMlControl",
			"enums": {},
			"props": {
				"Boolean": [
					"ClipWindowActive",
					"DisablePreload",
					"ScrollActive",
					"ScrollGridSnap"
				],
				"CMlControl[]": [
					"Controls"
				],
				"Vec2": [
					"ClipWindowRelativePosition",
					"ClipWindowSize",
					"ScrollAnimOffset",
					"ScrollGrid",
					"ScrollMax",
					"ScrollMin",
					"ScrollOffset"
				]
			},
			"methods": [
				{
					"name": "GetFirstChild",
					"returns": "CMlControl",
					"params": [
						{
							"identifier": "Text",
							"argument": "ControlId"
						}
					]
				},
				{
					"name": "Scroll",
					"returns": "Void",
					"params": [
						{
							"identifier": "Vec2",
							"argument": "DeltaInGridUnits"
						}
					]
				},
				{
					"name": "ScrollBumpTop",
					"returns": "Void",
					"params": []
				},
				{
					"name": "ScrollBumpBottom",
					"returns": "Void",
					"params": []
				},
				{
					"name": "ScrollBumpLeft",
					"returns": "Void",
					"params": []
				},
				{
					"name": "ScrollBumpRight",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CMlGauge": {
			"inherit": "CMlControl",
			"enums": {},
			"props": {
				"Boolean": [
					"CenteredBar",
					"DrawBackground",
					"DrawBlockBackground"
				],
				"Integer": [
					"Clan"
				],
				"Real": [
					"GradingRatio",
					"Ratio"
				],
				"Text": [
					"Style"
				],
				"Vec3": [
					"Color"
				]
			},
			"methods": [
				{
					"name": "SetRatio",
					"returns": "Void",
					"params": [
						{
							"identifier": "Real",
							"argument": "NewRatio"
						}
					]
				},
				{
					"name": "SetClan",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "NewClan"
						}
					]
				}
			]
		},
		"CMlGraph": {
			"inherit": "CMlControl",
			"enums": {},
			"props": {
				"CMlGraphCurve[]": [
					"Curves"
				],
				"Vec2": [
					"CoordsMax",
					"CoordsMin"
				]
			},
			"methods": [
				{
					"name": "AddCurve",
					"returns": "CMlGraphCurve",
					"params": []
				},
				{
					"name": "RemoveCurve",
					"returns": "Void",
					"params": [
						{
							"identifier": "CMlGraphCurve",
							"argument": "Curve"
						}
					]
				}
			]
		},
		"CMlGraphCurve": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Real": [
					"Width"
				],
				"Text": [
					"Style"
				],
				"Vec2[]": [
					"Points"
				],
				"Vec3": [
					"Color"
				]
			},
			"methods": [
				{
					"name": "SortPoints",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CMlLabel": {
			"inherit": "CMlControl",
			"enums": {
				"EBlendMode": [
					"Default",
					"Add"
				]
			},
			"props": {
				"Boolean": [
					"AppendEllipsis",
					"AutoNewLine"
				],
				"EBlendMode": [
					"Blend"
				],
				"Integer": [
					"MaxLine",
					"ValueLineCount"
				],
				"Real": [
					"LineSpacing",
					"Opacity",
					"TextSizeReal"
				],
				"Text": [
					"Style",
					"Substyle",
					"TextFont",
					"Value",
					"TextColor"
				]
			},
			"methods": [
				{
					"name": "SetText",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "NewText"
						}
					]
				},
				{
					"name": "ComputeWidth",
					"returns": "Real",
					"params": [
						{
							"identifier": "Text",
							"argument": "Text"
						}
					]
				},
				{
					"name": "ComputeWidth",
					"returns": "Real",
					"params": [
						{
							"identifier": "Text",
							"argument": "Text"
						},
						{
							"identifier": "Boolean",
							"argument": "Translated"
						}
					]
				},
				{
					"name": "ComputeHeight",
					"returns": "Real",
					"params": [
						{
							"identifier": "Text",
							"argument": "Text"
						}
					]
				}
			]
		},
		"CMlMediaPlayer": {
			"inherit": "CMlControl",
			"enums": {},
			"props": {
				"Boolean": [
					"IsInitPlay",
					"IsLooping",
					"Music"
				],
				"Real": [
					"Volume"
				],
				"Text": [
					"Url"
				]
			},
			"methods": [
				{
					"name": "Play",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Stop",
					"returns": "Void",
					"params": []
				},
				{
					"name": "StopAndRewind",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CMlMinimap": {
			"inherit": "CMlControl",
			"enums": {},
			"props": {
				"Boolean": [
					"DisableAutoUnderground",
					"Underground"
				],
				"Real": [
					"MapYaw",
					"ZoomFactor"
				],
				"Vec2": [
					"MapPosition"
				],
				"Vec3": [
					"WorldPosition"
				]
			},
			"methods": [
				{
					"name": "Fog_SetAll",
					"returns": "Void",
					"params": [
						{
							"identifier": "Real",
							"argument": "Value"
						}
					]
				},
				{
					"name": "Fog_ClearDisk",
					"returns": "Void",
					"params": [
						{
							"identifier": "Vec3",
							"argument": "WorldCenter"
						},
						{
							"identifier": "Real",
							"argument": "Radius"
						},
						{
							"identifier": "Real",
							"argument": "FadeSize"
						}
					]
				}
			]
		},
		"CMlPage": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"LinksInhibited"
				],
				"CMlControl": [
					"FocusedControl"
				],
				"CMlControl[]": [
					"GetClassChildren_Result"
				],
				"CMlFrame": [
					"MainFrame"
				]
			},
			"methods": [
				{
					"name": "GetFirstChild",
					"returns": "CMlControl",
					"params": [
						{
							"identifier": "Text",
							"argument": "ControlId"
						}
					]
				},
				{
					"name": "GetClassChildren",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Class"
						},
						{
							"identifier": "CMlFrame",
							"argument": "Frame"
						},
						{
							"identifier": "Boolean",
							"argument": "Recursive"
						}
					]
				},
				{
					"name": "ScrollToControl",
					"returns": "Void",
					"params": [
						{
							"identifier": "CMlControl",
							"argument": "Control"
						}
					]
				}
			]
		},
		"CMlQuad": {
			"inherit": "CMlControl",
			"enums": {
				"EKeepRatioMode": [
					"Inactive",
					"Clip",
					"Fit"
				],
				"EBlendMode": [
					"Default",
					"Add"
				]
			},
			"props": {
				"Boolean": [
					"DownloadInProgress",
					"StyleSelected"
				],
				"CImage": [
					"Image"
				],
				"EBlendMode": [
					"Blend"
				],
				"EKeepRatioMode": [
					"KeepRatio"
				],
				"Real": [
					"Opacity"
				],
				"Text": [
					"ImageUrl",
					"ImageUrlFocus",
					"Style",
					"Substyle"
				],
				"Vec3": [
					"BgColor",
					"BgColorFocus",
					"Colorize",
					"ModulateColor"
				]
			},
			"methods": [
				{
					"name": "ChangeImageUrl",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "fieldName"
						}
					]
				},
				{
					"name": "RefreshImages",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CMlScript": {
			"inherit": "CNod",
			"enums": {
				"LinkType": [
					"ExternalBrowser",
					"ManialinkBrowser",
					"Goto",
					"ExternalFromId",
					"ManialinkFromId",
					"GotoFromId"
				]
			},
			"props": {
				"Boolean": [
					"Dbg_WarnOnDroppedEvents",
					"EnableMenuNavigationInputs",
					"IsMenuNavigationForeground",
					"KeyDelete",
					"KeyDown",
					"KeyLeft",
					"KeyReturn",
					"KeyRight",
					"KeySpace",
					"KeyUp",
					"MouseLeftButton",
					"MouseMiddleButton",
					"MouseRightButton",
					"PageAlwaysUpdateScript",
					"PageIsVisible"
				],
				"CAnimManager": [
					"AnimMgr"
				],
				"CAudioManager": [
					"Audio"
				],
				"CDataFileMgr": [
					"DataFileMgr"
				],
				"CHttpManager": [
					"Http"
				],
				"CInputManager": [
					"Input"
				],
				"CMlPage": [
					"Page"
				],
				"CMlScriptEvent[]": [
					"PendingEvents"
				],
				"CParsingManager": [
					"Xml"
				],
				"CScoreMgr": [
					"ScoreMgr"
				],
				"CSystemPlatform": [
					"System"
				],
				"CTitle": [
					"LoadedTitle"
				],
				"CUser": [
					"LocalUser"
				],
				"CVideoManager": [
					"Video"
				],
				"Integer": [
					"CurrentTime",
					"Now",
					"Period"
				],
				"Real": [
					"MouseX",
					"MouseY"
				]
			},
			"methods": [
				{
					"name": "Dbg_SetProcessed",
					"returns": "Void",
					"params": [
						{
							"identifier": "CMlScriptEvent",
							"argument": "Event"
						}
					]
				},
				{
					"name": "IsKeyPressed",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Integer",
							"argument": "KeyCode"
						}
					]
				},
				{
					"name": "EnableMenuNavigation",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "EnableInputs"
						},
						{
							"identifier": "Boolean",
							"argument": "WithAutoFocus"
						},
						{
							"identifier": "CMlControl",
							"argument": "AutoBackControl"
						},
						{
							"identifier": "Integer",
							"argument": "InputPriority"
						}
					]
				},
				{
					"name": "EnableMenuNavigation",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "EnableInputs"
						},
						{
							"identifier": "Boolean",
							"argument": "WithAutoFocus"
						},
						{
							"identifier": "Boolean",
							"argument": "WithManualScroll"
						},
						{
							"identifier": "CMlControl",
							"argument": "AutoBackControl"
						},
						{
							"identifier": "Integer",
							"argument": "InputPriority"
						}
					]
				},
				{
					"name": "OpenLink",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Url"
						},
						{
							"identifier": "LinkType",
							"argument": "LinkType"
						}
					]
				},
				{
					"name": "TriggerPageAction",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ActionString"
						}
					]
				},
				{
					"name": "SendCustomEvent",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Type"
						},
						{
							"identifier": "Text[]",
							"argument": "Data"
						}
					]
				},
				{
					"name": "PreloadImage",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ImageUrl"
						}
					]
				},
				{
					"name": "PreloadAll",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Dbg_DumpDeclareForVariables",
					"returns": "Text",
					"params": [
						{
							"identifier": "CNod",
							"argument": "Nod"
						},
						{
							"identifier": "Boolean",
							"argument": "StatsOnly"
						}
					]
				}
			]
		},
		"CMlScriptEvent": {
			"inherit": "CBaseConstEvent",
			"enums": {
				"Type": [
					"KeyPress",
					"MouseClick",
					"MouseOver",
					"MouseOut",
					"EntrySubmit",
					"MenuNavigation",
					"PluginCustomEvent"
				],
				"EMenuNavAction": [
					"Up",
					"Right",
					"Left",
					"Down",
					"Select",
					"Cancel",
					"PageUp",
					"PageDown",
					"AppMenu",
					"Action1",
					"Action2",
					"ScrollUp",
					"ScrollDown"
				]
			},
			"props": {
				"Boolean": [
					"IsActionAutoRepeat"
				],
				"CMlControl": [
					"Control"
				],
				"EMenuNavAction": [
					"MenuNavAction"
				],
				"Integer": [
					"KeyCode"
				],
				"Text": [
					"CharPressed",
					"ControlId",
					"CustomEventType",
					"KeyName"
				],
				"Text[]": [
					"CustomEventData"
				],
				"Type": [
					"Type"
				]
			},
			"methods": []
		},
		"CMlScriptIngame": {
			"inherit": "CMlScript",
			"enums": {
				"EUISound": [
					"Default",
					"Silence",
					"StartMatch",
					"EndMatch",
					"StartRound",
					"EndRound",
					"PhaseChange",
					"TieBreakPoint",
					"TiePoint",
					"VictoryPoint",
					"Capture",
					"TimeOut",
					"Notice",
					"Warning",
					"PlayerEliminated",
					"PlayerHit",
					"Checkpoint",
					"Finish",
					"Record",
					"ScoreProgress",
					"RankChange",
					"Bonus",
					"FirstHit",
					"Combo",
					"PlayersRemaining",
					"Custom1",
					"Custom2",
					"Custom3",
					"Custom4"
				],
				"EInGameMenuResult": [
					"Resume",
					"Quit",
					"NormalMenu",
					"AdvancedMenu",
					"ServerSettings"
				]
			},
			"props": {
				"Boolean": [
					"IsInGameMenuDisplayed",
					"IsSpectator",
					"IsSpectatorClient",
					"UseClans",
					"UseForcedClans"
				],
				"CAchievementsManager": [
					"AchievementsManager"
				],
				"CManiaAppPlaygroundCommon": [
					"ParentApp"
				],
				"CMap": [
					"Map"
				],
				"CPlaygroundClient": [
					"Playground"
				],
				"CTeam[]": [
					"Teams"
				],
				"CUIConfig": [
					"ClientUI",
					"UI"
				],
				"Integer": [
					"GameTime",
					"SplitScreenCount",
					"SplitScreenNum"
				],
				"Text": [
					"CurrentServerDesc",
					"CurrentServerJoinLink",
					"CurrentServerLogin",
					"CurrentServerModeName",
					"CurrentServerName"
				]
			},
			"methods": [
				{
					"name": "ShowCurChallengeCard",
					"returns": "Void",
					"params": []
				},
				{
					"name": "ShowModeHelp",
					"returns": "Void",
					"params": []
				},
				{
					"name": "CopyServerLinkToClipBoard",
					"returns": "Void",
					"params": []
				},
				{
					"name": "JoinTeam1",
					"returns": "Void",
					"params": []
				},
				{
					"name": "JoinTeam2",
					"returns": "Void",
					"params": []
				},
				{
					"name": "RequestSpectatorClient",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "Spectator"
						}
					]
				},
				{
					"name": "SetSpectateTarget",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Player"
						}
					]
				},
				{
					"name": "ShowProfile",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Player"
						}
					]
				},
				{
					"name": "ShowInGameMenu",
					"returns": "Void",
					"params": []
				},
				{
					"name": "CloseInGameMenu",
					"returns": "Void",
					"params": [
						{
							"identifier": "EInGameMenuResult",
							"argument": "Result"
						}
					]
				},
				{
					"name": "CloseScoresTable",
					"returns": "Void",
					"params": []
				},
				{
					"name": "PlayUiSound",
					"returns": "Void",
					"params": [
						{
							"identifier": "EUISound",
							"argument": "Sound"
						},
						{
							"identifier": "Integer",
							"argument": "SoundVariant"
						},
						{
							"identifier": "Real",
							"argument": "Volume"
						}
					]
				}
			]
		},
		"CMlStation": {
			"inherit": "CMlScript",
			"enums": {},
			"props": {
				"CManiaAppStation": [
					"ParentApp"
				],
				"CStation": [
					"Station"
				]
			},
			"methods": [
				{
					"name": "EnterStation",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CMlTextEdit": {
			"inherit": "CMlControl",
			"enums": {
				"EControlScriptEditorTextFormat": [
					"Basic",
					"Script",
					"Password",
					"Newpassword"
				]
			},
			"props": {
				"Boolean": [
					"AutoNewLine",
					"ShowLineNumbers"
				],
				"EControlScriptEditorTextFormat": [
					"TextFormat"
				],
				"Integer": [
					"MaxLine",
					"ValueLineCount"
				],
				"Real": [
					"LineSpacing",
					"Opacity",
					"TextSizeReal"
				],
				"Text": [
					"Value",
					"TextColor"
				]
			},
			"methods": [
				{
					"name": "StartEdition",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CMode": {
			"inherit": "CNod",
			"enums": {
				"EMedal": [
					"None",
					"Finished",
					"Bronze",
					"Silver",
					"Gold",
					"Author"
				]
			},
			"props": {
				"Boolean": [
					"Ladder_RequestInProgress",
					"MapLoaded",
					"MatchEndRequested",
					"Replay_AutoStart",
					"ServerShutdownRequested",
					"Solo_NewRecordSequenceInProgress",
					"UseMinimap"
				],
				"CAchievementsManager": [
					"AchievementsManager"
				],
				"CActionManager": [
					"ActionsManager"
				],
				"CDataFileMgr": [
					"DataFileMgr"
				],
				"CHttpManager": [
					"Http"
				],
				"CInputManager": [
					"Input"
				],
				"CMap": [
					"Map"
				],
				"CMapInfo[]": [
					"MapList"
				],
				"CModeTurretManager": [
					"TurretsManager"
				],
				"CModeVehicleManager": [
					"VehiclesManager"
				],
				"CModulePlaygroundHud": [
					"Hud"
				],
				"CParsingManager": [
					"Xml"
				],
				"CScoreMgr": [
					"ScoreMgr"
				],
				"CServerAdmin": [
					"ServerAdmin"
				],
				"CSystemPlatform": [
					"System"
				],
				"CTeam[]": [
					"Teams"
				],
				"CTitle": [
					"LoadedTitle"
				],
				"CUIConfigMgr": [
					"UIManager"
				],
				"CUser[]": [
					"Users"
				],
				"CXmlRpc": [
					"XmlRpc"
				],
				"Integer": [
					"NextMapIndex",
					"Now",
					"Period"
				],
				"Text": [
					"ClientManiaAppUrl",
					"ForcedClubLinkUrl1",
					"ForcedClubLinkUrl2",
					"MapName",
					"MapPlayerModelName",
					"ModeStatusMessage",
					"NeutralEmblemUrl",
					"ServerLogin",
					"ServerModeName",
					"ServerName"
				]
			},
			"methods": [
				{
					"name": "TweakTeamColorsToAvoidHueOverlap",
					"returns": "Void",
					"params": []
				},
				{
					"name": "RequestLoadMap",
					"returns": "Void",
					"params": []
				},
				{
					"name": "RequestUnloadMap",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Hud_Load",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ModuleName"
						}
					]
				},
				{
					"name": "PassOn",
					"returns": "Void",
					"params": [
						{
							"identifier": "CUIConfigEvent",
							"argument": "EventToPassOn"
						}
					]
				},
				{
					"name": "Discard",
					"returns": "Void",
					"params": [
						{
							"identifier": "CUIConfigEvent",
							"argument": "EventToDiscard"
						}
					]
				},
				{
					"name": "Ladder_OpenMatch_Request",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Ladder_AddPlayer",
					"returns": "Void",
					"params": [
						{
							"identifier": "CScore",
							"argument": "PlayerScore"
						}
					]
				},
				{
					"name": "Ladder_OpenMatch_BeginRequest",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Ladder_OpenMatch_AddPlayer",
					"returns": "Void",
					"params": [
						{
							"identifier": "CScore",
							"argument": "PlayerScore"
						}
					]
				},
				{
					"name": "Ladder_OpenMatch_EndRequest",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Ladder_CloseMatchRequest",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Ladder_CancelMatchRequest",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Ladder_SetResultsVersion",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Version"
						}
					]
				},
				{
					"name": "Ladder_SetMatchMakingMatchId",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "MatchId"
						}
					]
				},
				{
					"name": "Ladder_EnableChallengeMode",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "Enable"
						}
					]
				},
				{
					"name": "AutoTeamBalance",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Solo_SetNewRecord",
					"returns": "Void",
					"params": [
						{
							"identifier": "CScore",
							"argument": "PlayerScore"
						},
						{
							"identifier": "EMedal",
							"argument": "PlayerScore"
						}
					]
				},
				{
					"name": "Synchro_AddBarrier",
					"returns": "Integer",
					"params": []
				},
				{
					"name": "Synchro_BarrierReached",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Barrier"
						}
					]
				},
				{
					"name": "Users_AreAllies",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CUser",
							"argument": "User1"
						},
						{
							"identifier": "CUser",
							"argument": "User2"
						}
					]
				},
				{
					"name": "Users_RequestSwitchToSpectator",
					"returns": "Void",
					"params": [
						{
							"identifier": "CUser",
							"argument": "User"
						}
					]
				},
				{
					"name": "Users_CreateFake",
					"returns": "CUser",
					"params": [
						{
							"identifier": "Text",
							"argument": "NickName"
						},
						{
							"identifier": "Integer",
							"argument": "RequestedTeam"
						}
					]
				},
				{
					"name": "Users_DestroyFake",
					"returns": "Void",
					"params": [
						{
							"identifier": "CUser",
							"argument": "User"
						}
					]
				},
				{
					"name": "Users_SetNbFakeUsers",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "NbTeam1"
						},
						{
							"identifier": "Integer",
							"argument": "NbTeam2"
						}
					]
				},
				{
					"name": "Users_DestroyAllFakes",
					"returns": "Void",
					"params": []
				},
				{
					"name": "ItemList_Begin",
					"returns": "Void",
					"params": []
				},
				{
					"name": "ItemList_Begin",
					"returns": "Boolean",
					"params": []
				},
				{
					"name": "ItemList_Add",
					"returns": "Ident",
					"params": [
						{
							"identifier": "Text",
							"argument": "ModelName"
						}
					]
				},
				{
					"name": "ItemList_AddWithSkin",
					"returns": "Ident",
					"params": [
						{
							"identifier": "Text",
							"argument": "ModelName"
						},
						{
							"identifier": "Text",
							"argument": "SkinNameOrUrl"
						}
					]
				},
				{
					"name": "ItemList_End",
					"returns": "Void",
					"params": []
				},
				{
					"name": "DemoToken_StartUsingToken",
					"returns": "Void",
					"params": []
				},
				{
					"name": "DemoToken_StopUsingToken",
					"returns": "Void",
					"params": []
				},
				{
					"name": "DemoToken_GetAndUseToken",
					"returns": "Void",
					"params": [
						{
							"identifier": "CUser",
							"argument": "User"
						}
					]
				},
				{
					"name": "ActionList_Begin",
					"returns": "Void",
					"params": []
				},
				{
					"name": "ActionList_Begin",
					"returns": "Boolean",
					"params": []
				},
				{
					"name": "ActionList_Add",
					"returns": "Ident",
					"params": [
						{
							"identifier": "Text",
							"argument": "ActionName"
						}
					]
				},
				{
					"name": "ActionList_End",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Replay_Start",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Replay_Stop",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Dbg_DumpDeclareForVariables",
					"returns": "Text",
					"params": [
						{
							"identifier": "CNod",
							"argument": "Nod"
						},
						{
							"identifier": "Boolean",
							"argument": "StatsOnly"
						}
					]
				}
			]
		},
		"CModeTurret": {
			"inherit": "CEntity",
			"enums": {},
			"props": {
				"CPlayer": [
					"Owner"
				],
				"Integer": [
					"Armor",
					"ArmorMax"
				]
			},
			"methods": []
		},
		"CModeTurretManager": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CModeTurret[]": [
					"Turrets"
				]
			},
			"methods": [
				{
					"name": "MapTurrets_Reset",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Turret_Create",
					"returns": "CModeTurret",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ModelId"
						},
						{
							"identifier": "Vec3",
							"argument": "Position"
						},
						{
							"identifier": "Vec3",
							"argument": "Direction"
						},
						{
							"identifier": "Integer",
							"argument": "Clan"
						},
						{
							"identifier": "CPlayer",
							"argument": "OwnerPlayer"
						}
					]
				},
				{
					"name": "Turret_CreateWithOwner",
					"returns": "CModeTurret",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ModelId"
						},
						{
							"identifier": "Vec3",
							"argument": "Position"
						},
						{
							"identifier": "Vec3",
							"argument": "Direction"
						},
						{
							"identifier": "Vec3",
							"argument": "Up"
						},
						{
							"identifier": "Integer",
							"argument": "Clan"
						},
						{
							"identifier": "Ident",
							"argument": "OwnerId"
						}
					]
				},
				{
					"name": "Turret_CreateWithOwner",
					"returns": "CModeTurret",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ModelId"
						},
						{
							"identifier": "Vec3",
							"argument": "Position"
						},
						{
							"identifier": "Vec3",
							"argument": "Direction"
						},
						{
							"identifier": "Vec3",
							"argument": "Up"
						},
						{
							"identifier": "Integer",
							"argument": "Clan"
						},
						{
							"identifier": "Ident",
							"argument": "OwnerId"
						},
						{
							"identifier": "Boolean",
							"argument": "AutoAimOn"
						},
						{
							"identifier": "Boolean",
							"argument": "AutoTriggerOn"
						}
					]
				},
				{
					"name": "Turret_GetPosition",
					"returns": "Vec3",
					"params": [
						{
							"identifier": "CModeTurret",
							"argument": "Turret"
						}
					]
				},
				{
					"name": "Turret_Destroy",
					"returns": "Void",
					"params": [
						{
							"identifier": "CModeTurret",
							"argument": "Turret"
						}
					]
				},
				{
					"name": "Turret_DestroyAll",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Turret_Activate",
					"returns": "Void",
					"params": [
						{
							"identifier": "CModeTurret",
							"argument": "Turret"
						}
					]
				},
				{
					"name": "Turret_Deactivate",
					"returns": "Void",
					"params": [
						{
							"identifier": "CModeTurret",
							"argument": "Turret"
						}
					]
				},
				{
					"name": "Turret_SetIsAutomatic",
					"returns": "Void",
					"params": [
						{
							"identifier": "CModeTurret",
							"argument": "Turret"
						},
						{
							"identifier": "Boolean",
							"argument": "IsAuto"
						}
					]
				},
				{
					"name": "Turret_Auto_SetAimAnticipation",
					"returns": "Void",
					"params": [
						{
							"identifier": "CModeTurret",
							"argument": "Turret"
						},
						{
							"identifier": "Real",
							"argument": "AimAnticipationMs"
						}
					]
				},
				{
					"name": "Turret_Auto_SetFirePeriod",
					"returns": "Void",
					"params": [
						{
							"identifier": "CModeTurret",
							"argument": "Turret"
						},
						{
							"identifier": "Integer",
							"argument": "FirePeriodMs"
						}
					]
				},
				{
					"name": "Turret_Auto_SetTargetDetectionFov",
					"returns": "Void",
					"params": [
						{
							"identifier": "CModeTurret",
							"argument": "Turret"
						},
						{
							"identifier": "Real",
							"argument": "DectectionFOVDeg"
						}
					]
				},
				{
					"name": "Turret_Auto_SetTargetDetectionRadius",
					"returns": "Void",
					"params": [
						{
							"identifier": "CModeTurret",
							"argument": "Turret"
						},
						{
							"identifier": "Real",
							"argument": "DetectionRadius"
						}
					]
				},
				{
					"name": "Turret_Auto_GetTarget",
					"returns": "CEntity",
					"params": [
						{
							"identifier": "CModeTurret",
							"argument": "Turret"
						}
					]
				},
				{
					"name": "Turret_Manual_SetTargetPos",
					"returns": "Void",
					"params": [
						{
							"identifier": "CModeTurret",
							"argument": "Turret"
						},
						{
							"identifier": "Vec3",
							"argument": "TargetPos"
						}
					]
				},
				{
					"name": "Turret_Manual_Fire",
					"returns": "Void",
					"params": [
						{
							"identifier": "CModeTurret",
							"argument": "Turret"
						}
					]
				}
			]
		},
		"CModeVehicle": {
			"inherit": "CEntity",
			"enums": {},
			"props": {
				"Integer": [
					"Armor",
					"ArmorMax",
					"Clan"
				],
				"Real": [
					"AccelCoef",
					"AccelInput",
					"Altitude",
					"Pitch",
					"Roll"
				],
				"Vec3": [
					"Dir",
					"Left",
					"Position",
					"Up",
					"Velocity"
				]
			},
			"methods": [
				{
					"name": "SetEngineActivated",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "IsActivated"
						}
					]
				}
			]
		},
		"CModeVehicleManager": {
			"inherit": "CNod",
			"enums": {
				"EArmorUse": [
					"Self",
					"Group",
					"Owner",
					"Children",
					"Mine"
				],
				"ESlotType": [
					"Driver",
					"Passenger"
				]
			},
			"props": {
				"CModeVehicle[]": [
					"Vehicles"
				]
			},
			"methods": [
				{
					"name": "MapVehicles_Reset",
					"returns": "Void",
					"params": []
				},
				{
					"name": "DestroyAllVehicles",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Vehicle_Create",
					"returns": "CModeVehicle",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ModelId"
						},
						{
							"identifier": "Integer",
							"argument": "Clan"
						},
						{
							"identifier": "Integer",
							"argument": "Armor"
						},
						{
							"identifier": "EArmorUse",
							"argument": "ArmorUse"
						},
						{
							"identifier": "CMapSpawn",
							"argument": "Spawn"
						}
					]
				},
				{
					"name": "Vehicle_Create",
					"returns": "CModeVehicle",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ModelId"
						},
						{
							"identifier": "Vec3",
							"argument": "Offset"
						},
						{
							"identifier": "Integer",
							"argument": "Armor"
						},
						{
							"identifier": "EArmorUse",
							"argument": "ArmorUse"
						},
						{
							"identifier": "CModeVehicle",
							"argument": "Owner"
						}
					]
				},
				{
					"name": "Vehicle_Destroy",
					"returns": "Void",
					"params": [
						{
							"identifier": "CModeVehicle",
							"argument": "Vehicle"
						}
					]
				},
				{
					"name": "Vehicle_Assign_AutoPilot",
					"returns": "Void",
					"params": [
						{
							"identifier": "CModeVehicle",
							"argument": "Vehicle"
						},
						{
							"identifier": "Text",
							"argument": "ModelName"
						}
					]
				},
				{
					"name": "Vehicle_Assign_AutoPilot",
					"returns": "Void",
					"params": [
						{
							"identifier": "CModeVehicle",
							"argument": "Vehicle"
						},
						{
							"identifier": "Text",
							"argument": "ModelName"
						},
						{
							"identifier": "Boolean",
							"argument": "LoopPath"
						}
					]
				},
				{
					"name": "Vehicle_SetTrailVisible",
					"returns": "Void",
					"params": [
						{
							"identifier": "CModeVehicle",
							"argument": "Vehicle"
						},
						{
							"identifier": "Boolean",
							"argument": "IsVisible"
						}
					]
				},
				{
					"name": "Vehicle_SetShieldVisible",
					"returns": "Void",
					"params": [
						{
							"identifier": "CModeVehicle",
							"argument": "Vehicle"
						},
						{
							"identifier": "Boolean",
							"argument": "IsVisible"
						}
					]
				},
				{
					"name": "VehicleModel_GetSlotsCount",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ModelId"
						},
						{
							"identifier": "ESlotType",
							"argument": "SlotType"
						}
					]
				}
			]
		},
		"CModuleMenu": {
			"inherit": "CManiaAppTitle",
			"enums": {},
			"props": {},
			"methods": [
				{
					"name": "Menu_Goto",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "PageId"
						}
					]
				},
				{
					"name": "Menu_Back",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Menu_Previous",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Menu_Quit",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CModuleMenuComponent": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CUILayer": [
					"ComponentLayer"
				]
			},
			"methods": [
				{
					"name": "Hide",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Show",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CModuleMenuFileBrowser": {
			"inherit": "CModuleMenuComponent",
			"enums": {
				"EFileType": [
					"Maps",
					"Skins",
					"Items",
					"Blocks",
					"Scripts",
					"Images",
					"Manialinks",
					"Packs",
					"Actions",
					"Modules",
					"Meshes",
					"Replays"
				],
				"EFileAction": [
					"Select",
					"Save",
					"MultiSelect"
				]
			},
			"props": {
				"Boolean": [
					"HasFinished"
				],
				"Text[]": [
					"Selection"
				]
			},
			"methods": [
				{
					"name": "SetFileType",
					"returns": "Void",
					"params": [
						{
							"identifier": "EFileType",
							"argument": "FileType"
						}
					]
				},
				{
					"name": "SetFileAction",
					"returns": "Void",
					"params": [
						{
							"identifier": "EFileAction",
							"argument": "FileAction"
						}
					]
				}
			]
		},
		"CModuleMenuLayer": {
			"inherit": "CManiaAppTitleLayer",
			"enums": {},
			"props": {
				"CModuleMenuComponent[]": [
					"Components"
				]
			},
			"methods": [
				{
					"name": "GetFirstComponent",
					"returns": "CModuleMenuComponent",
					"params": [
						{
							"identifier": "Text",
							"argument": "Name"
						}
					]
				}
			]
		},
		"CModuleMenuModel": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CModuleMenuPageModel[]": [
					"Pages"
				],
				"Text": [
					"MenuScript"
				]
			},
			"methods": [
				{
					"name": "AddPage",
					"returns": "CModuleMenuPageModel",
					"params": [
						{
							"identifier": "Text",
							"argument": "PageUrl"
						}
					]
				},
				{
					"name": "AddLink",
					"returns": "Void",
					"params": [
						{
							"identifier": "CModuleMenuPageModel",
							"argument": "ParentPage"
						},
						{
							"identifier": "CModuleMenuPageModel",
							"argument": "ChildPage"
						}
					]
				}
			]
		},
		"CModuleMenuPageModel": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Text": [
					"ManialinkText"
				]
			},
			"methods": []
		},
		"CModulePlayground": {
			"inherit": "CNod",
			"enums": {},
			"props": {},
			"methods": [
				{
					"name": "Hide",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Hide",
					"returns": "Void",
					"params": [
						{
							"identifier": "CUIConfig",
							"argument": "UIConfig"
						}
					]
				},
				{
					"name": "Show",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Show",
					"returns": "Void",
					"params": [
						{
							"identifier": "CUIConfig",
							"argument": "UIConfig"
						}
					]
				},
				{
					"name": "IsVisible",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CUIConfig",
							"argument": "UIConfig"
						}
					]
				}
			]
		},
		"CModulePlaygroundChrono": {
			"inherit": "CModulePlayground",
			"enums": {},
			"props": {},
			"methods": [
				{
					"name": "StopChrono",
					"returns": "Void",
					"params": []
				},
				{
					"name": "StartChrono",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Reset",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Reset",
					"returns": "Void",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						}
					]
				}
			]
		},
		"CModulePlaygroundHud": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CModulePlayground[]": [
					"Modules"
				],
				"CModulePlaygroundChrono": [
					"Chrono"
				],
				"CModulePlaygroundInventory": [
					"Inventory"
				],
				"CModulePlaygroundPlayerState": [
					"PlayerState"
				],
				"CModulePlaygroundScoresTable": [
					"ScoresTable"
				],
				"CModulePlaygroundSpeedMeter": [
					"SpeedMeter"
				],
				"CModulePlaygroundStore": [
					"Store"
				],
				"CModulePlaygroundTeamState": [
					"TeamState"
				]
			},
			"methods": [
				{
					"name": "SwitchContext",
					"returns": "Void",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Text",
							"argument": "ContextName"
						}
					]
				},
				{
					"name": "SetDefaultContext",
					"returns": "Void",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						}
					]
				},
				{
					"name": "RetrieveModuleId",
					"returns": "Ident",
					"params": [
						{
							"identifier": "Text",
							"argument": "ModuleName"
						}
					]
				}
			]
		},
		"CModulePlaygroundHudModel": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Ident[]": [
					"ContextsIds",
					"SubModuleIds"
				],
				"Integer": [
					"EditorContextIndex"
				],
				"SHudModule": [
					"SubModule"
				]
			},
			"methods": [
				{
					"name": "SubModuleAdd",
					"returns": "Ident",
					"params": [
						{
							"identifier": "Text",
							"argument": "ModulePath"
						},
						{
							"identifier": "Text",
							"argument": "ModuleName"
						}
					]
				},
				{
					"name": "SubModuleSetNameAndId",
					"returns": "Ident",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ModuleId"
						},
						{
							"identifier": "Text",
							"argument": "NewModuleName"
						}
					]
				},
				{
					"name": "SubModuleRemove",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ModuleId"
						}
					]
				},
				{
					"name": "SubModuleIsContextActive",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ModuleId"
						},
						{
							"identifier": "Ident",
							"argument": "ContextId"
						}
					]
				},
				{
					"name": "SubModuleSetContextIsActive",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ModuleId"
						},
						{
							"identifier": "Ident",
							"argument": "ContextId"
						},
						{
							"identifier": "Boolean",
							"argument": "IsActive"
						}
					]
				},
				{
					"name": "ContextAdd",
					"returns": "Ident",
					"params": [
						{
							"identifier": "Text",
							"argument": "ContextName"
						}
					]
				},
				{
					"name": "ContextSetId",
					"returns": "Ident",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ContextId"
						},
						{
							"identifier": "Text",
							"argument": "NewContextName"
						}
					]
				},
				{
					"name": "ContextRemove",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ContextId"
						}
					]
				},
				{
					"name": "SubModuleRetrieve",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ModuleId"
						}
					]
				}
			]
		},
		"CModulePlaygroundInventory": {
			"inherit": "CModulePlayground",
			"enums": {},
			"props": {},
			"methods": [
				{
					"name": "AddItem",
					"returns": "Integer",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Text",
							"argument": "Url"
						},
						{
							"identifier": "Integer",
							"argument": "Quantity"
						}
					]
				},
				{
					"name": "AddAction",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Text",
							"argument": "Url"
						}
					]
				},
				{
					"name": "RemoveInventoryItem",
					"returns": "Integer",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Text",
							"argument": "Url"
						},
						{
							"identifier": "Integer",
							"argument": "Quantity"
						}
					]
				},
				{
					"name": "GetInventoryItemQuantity",
					"returns": "Integer",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Text",
							"argument": "Url"
						}
					]
				},
				{
					"name": "IsInventoryItemStored",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Text",
							"argument": "Url"
						}
					]
				},
				{
					"name": "[]",
					"returns": "Text",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						}
					]
				},
				{
					"name": "[]",
					"returns": "Text",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						}
					]
				}
			]
		},
		"CModulePlaygroundPlayerState": {
			"inherit": "CModulePlayground",
			"enums": {},
			"props": {},
			"methods": [
				{
					"name": "Reset",
					"returns": "Void",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						}
					]
				}
			]
		},
		"CModulePlaygroundScoresTable": {
			"inherit": "CModulePlayground",
			"enums": {
				"EColumnType": [
					"CustomString",
					"CustomNatural",
					"CustomInteger",
					"CustomReal",
					"CustomTime",
					"Avatar",
					"Name",
					"ManiaStars",
					"Tools",
					"Tags",
					"TMBestTime",
					"TMPrevTime",
					"TMBestLapTime",
					"TMStunts",
					"TMRespawns",
					"TMCheckpoints",
					"TMPoints",
					"TMPrevRaceDeltaPoints",
					"SMPoints",
					"SMRoundPoints"
				],
				"EScoreSortOrder": [
					"Default",
					"Name",
					"LadderRanking",
					"TMPoints",
					"TMBestTime",
					"TMStunts",
					"TMRespawns",
					"TMCheckpoints",
					"TMPrevTime",
					"SMPoints",
					"SMRoundPoints"
				]
			},
			"props": {},
			"methods": [
				{
					"name": "SetFooterText",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "FooterText"
						}
					]
				},
				{
					"name": "ResetCustomColumns",
					"returns": "Void",
					"params": [
						{
							"identifier": "CScore",
							"argument": "Score"
						}
					]
				},
				{
					"name": "ResetCustomColumns",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Scores_Sort",
					"returns": "Void",
					"params": [
						{
							"identifier": "EScoreSortOrder",
							"argument": "SortOrder"
						}
					]
				},
				{
					"name": "SetColumnValue",
					"returns": "Void",
					"params": [
						{
							"identifier": "CScore",
							"argument": "Score"
						},
						{
							"identifier": "Text",
							"argument": "ColumnId"
						},
						{
							"identifier": "Text",
							"argument": "ColumnValue"
						}
					]
				},
				{
					"name": "SetColumnValue",
					"returns": "Void",
					"params": [
						{
							"identifier": "CScore",
							"argument": "Score"
						},
						{
							"identifier": "Text",
							"argument": "ColumnId"
						},
						{
							"identifier": "Integer",
							"argument": "ColumnValue"
						}
					]
				},
				{
					"name": "SetColumnValue",
					"returns": "Void",
					"params": [
						{
							"identifier": "CScore",
							"argument": "Score"
						},
						{
							"identifier": "Text",
							"argument": "ColumnId"
						},
						{
							"identifier": "Real",
							"argument": "ColumnValue"
						}
					]
				},
				{
					"name": "SetColumnVisibility",
					"returns": "Void",
					"params": [
						{
							"identifier": "EColumnType",
							"argument": "Type"
						},
						{
							"identifier": "Boolean",
							"argument": "Visibility"
						}
					]
				},
				{
					"name": "SetColumnVisibility",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ColumnId"
						},
						{
							"identifier": "Boolean",
							"argument": "Visibility"
						}
					]
				},
				{
					"name": "SetColor",
					"returns": "Void",
					"params": [
						{
							"identifier": "CScore",
							"argument": "Score"
						},
						{
							"identifier": "Vec3",
							"argument": "Color"
						}
					]
				},
				{
					"name": "ResetColor",
					"returns": "Void",
					"params": [
						{
							"identifier": "CScore",
							"argument": "Score"
						}
					]
				}
			]
		},
		"CModulePlaygroundSpeedMeter": {
			"inherit": "CModulePlayground",
			"enums": {},
			"props": {},
			"methods": [
				{
					"name": "Reset",
					"returns": "Void",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						}
					]
				},
				{
					"name": "SetGlobalScale",
					"returns": "Void",
					"params": [
						{
							"identifier": "Real",
							"argument": "Scale"
						}
					]
				},
				{
					"name": "SetGaugeNumber",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Number"
						}
					]
				},
				{
					"name": "SetGaugeAngle",
					"returns": "Void",
					"params": [
						{
							"identifier": "Real",
							"argument": "Angle"
						}
					]
				},
				{
					"name": "SetGaugeBGVisible",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "Visibility"
						}
					]
				},
				{
					"name": "SetSpeedLineVisible",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "Visibility"
						}
					]
				},
				{
					"name": "SetGaugeSpeedMax",
					"returns": "Void",
					"params": [
						{
							"identifier": "Real",
							"argument": "Maximum"
						}
					]
				},
				{
					"name": "SetSpeedValueScale",
					"returns": "Void",
					"params": [
						{
							"identifier": "Real",
							"argument": "Scale"
						}
					]
				},
				{
					"name": "SetSpeedUnitScale",
					"returns": "Void",
					"params": [
						{
							"identifier": "Real",
							"argument": "Scale"
						}
					]
				},
				{
					"name": "SetFooterUnitVisible",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "Visibility"
						}
					]
				},
				{
					"name": "SetFooterLineVisible",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "Visibility"
						}
					]
				},
				{
					"name": "SetDistanceVisible",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "Visibility"
						}
					]
				},
				{
					"name": "SetDistanceFooterLineVisible",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "Visibility"
						}
					]
				}
			]
		},
		"CModulePlaygroundStore": {
			"inherit": "CModulePlayground",
			"enums": {},
			"props": {},
			"methods": [
				{
					"name": "Reset",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Reset",
					"returns": "Void",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						}
					]
				},
				{
					"name": "SetMoney",
					"returns": "Void",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Integer",
							"argument": "Amount"
						}
					]
				},
				{
					"name": "GetMoney",
					"returns": "Integer",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						}
					]
				},
				{
					"name": "AddMoney",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Integer",
							"argument": "Amount"
						}
					]
				},
				{
					"name": "SubMoney",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Integer",
							"argument": "Amount"
						}
					]
				},
				{
					"name": "SetActionLevel",
					"returns": "Void",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Text",
							"argument": "ActionUrl"
						},
						{
							"identifier": "Integer",
							"argument": "ActionLevel"
						}
					]
				},
				{
					"name": "GetActionLevel",
					"returns": "Integer",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Text",
							"argument": "ActionUrl"
						}
					]
				},
				{
					"name": "SetItemCanBeBought",
					"returns": "Void",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Text",
							"argument": "ActionUrl"
						},
						{
							"identifier": "Boolean",
							"argument": "CanBeBought"
						}
					]
				},
				{
					"name": "GetItemCanBeBought",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Text",
							"argument": "ActionUrl"
						}
					]
				}
			]
		},
		"CModulePlaygroundTeamState": {
			"inherit": "CModulePlayground",
			"enums": {},
			"props": {},
			"methods": [
				{
					"name": "Reset",
					"returns": "Void",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						}
					]
				}
			]
		},
		"CNaturalLeaderBoardInfo": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Ident": [
					"UserId"
				],
				"Integer": [
					"Rank",
					"Score"
				],
				"Text": [
					"DisplayName",
					"FileName",
					"Login",
					"ReplayUrl"
				]
			},
			"methods": []
		},
		"CNod": {
			"inherit": "",
			"enums": {},
			"props": {
				"Ident": [
					"Id"
				]
			},
			"methods": []
		},
		"CNotificationsConsumer": {
			"inherit": "CNod",
			"enums": {
				"EFilterPriority": [
					"All",
					"MoreThanMemo",
					"MoreThanNotice"
				]
			},
			"props": {
				"CNotificationsConsumerEvent[]": [
					"Events"
				],
				"CNotificationsConsumerNotification[]": [
					"FilteredNotifications",
					"Notifications"
				],
				"EFilterPriority": [
					"Filter_Priority"
				]
			},
			"methods": []
		},
		"CNotificationsConsumerEvent": {
			"inherit": "CNod",
			"enums": {
				"EType": [
					"NewNotification",
					"NotificationChanged"
				]
			},
			"props": {
				"CNotificationsConsumerNotification": [
					"Notification"
				],
				"EType": [
					"Type"
				]
			},
			"methods": []
		},
		"CNotificationsConsumerNotification": {
			"inherit": "CNod",
			"enums": {
				"ENotificationPriority": [
					"Memo",
					"Notice",
					"Alarm"
				]
			},
			"props": {
				"Boolean": [
					"HasBeenActivated",
					"HasBeenRead"
				],
				"ENotificationPriority": [
					"Priority"
				],
				"Text": [
					"Description",
					"ImageUrl",
					"Title"
				]
			},
			"methods": [
				{
					"name": "SetRead",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SetActivated",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CPackCreator": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"RegisterPack_IsInProgess"
				],
				"CPackCreatorPack": [
					"CurrentPack"
				]
			},
			"methods": [
				{
					"name": "RegisterPackForEditedTitle",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Build_Begin",
					"returns": "Ident",
					"params": [
						{
							"identifier": "CPackCreatorPack",
							"argument": "Pack"
						},
						{
							"identifier": "CPackCreatorTitleInfo",
							"argument": "TitleInfo"
						}
					]
				},
				{
					"name": "Build_AddFile",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "BuildId"
						},
						{
							"identifier": "Text",
							"argument": "FileName"
						}
					]
				},
				{
					"name": "Build_AddFolder",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "BuildId"
						},
						{
							"identifier": "Text",
							"argument": "FolderName"
						}
					]
				},
				{
					"name": "Build_AddFile",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "BuildId"
						},
						{
							"identifier": "Text",
							"argument": "FileName"
						},
						{
							"identifier": "Boolean",
							"argument": "IsPublic"
						},
						{
							"identifier": "Boolean",
							"argument": "IsInternal"
						},
						{
							"identifier": "Boolean",
							"argument": "NoAutomaticDeps"
						}
					]
				},
				{
					"name": "Build_AddFolder",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "BuildId"
						},
						{
							"identifier": "Text",
							"argument": "FolderName"
						},
						{
							"identifier": "Boolean",
							"argument": "IsPublic"
						},
						{
							"identifier": "Boolean",
							"argument": "IsInternal"
						},
						{
							"identifier": "Boolean",
							"argument": "NoRecursion"
						},
						{
							"identifier": "Boolean",
							"argument": "NoAutomaticDeps"
						}
					]
				},
				{
					"name": "Build_Generate",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "BuildId"
						},
						{
							"identifier": "Boolean",
							"argument": "Upload"
						}
					]
				},
				{
					"name": "Build_IsGenerated",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "BuildId"
						}
					]
				},
				{
					"name": "Build_ErrorMessage",
					"returns": "Text",
					"params": [
						{
							"identifier": "Ident",
							"argument": "BuildId"
						}
					]
				},
				{
					"name": "Build_End",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "BuildId"
						}
					]
				}
			]
		},
		"CPackCreatorPack": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"IsTitlePack"
				],
				"CPackCreatorRecipient[]": [
					"Recipients"
				],
				"Ident": [
					"CreatorId",
					"PackId"
				]
			},
			"methods": [
				{
					"name": "Recipients_Add",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Login"
						},
						{
							"identifier": "Integer",
							"argument": "UseCost"
						},
						{
							"identifier": "Integer",
							"argument": "GetCost"
						}
					]
				},
				{
					"name": "Recipients_Remove",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Login"
						}
					]
				}
			]
		},
		"CPackCreatorRecipient": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Integer": [
					"GetCost",
					"UseCost"
				],
				"Text": [
					"Login"
				]
			},
			"methods": []
		},
		"CPackCreatorTitleInfo": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"Solo_HasCampaign"
				],
				"Ident": [
					"MakerTitleId",
					"TitleId"
				],
				"Text": [
					"AllowedClientTitleVersion",
					"BaseTitleIds",
					"Description",
					"DisplayName",
					"DownloadUrl",
					"ForcedPlayerModel",
					"Hud3dFontFileName",
					"HudDefaultModuleScriptName",
					"InfoUrl",
					"Menus_BgReplayFileName",
					"Menus_ManiaAppFileName",
					"Menus_MusicFileName",
					"MusicFolder",
					"Packaging_Group",
					"Packaging_ImageFileName",
					"Packaging_LogosFileName",
					"Station_ManialinkUrl",
					"TitleVersion"
				]
			},
			"methods": []
		},
		"CParsingDocument": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CParsingNode": [
					"Root"
				],
				"CParsingNode[]": [
					"Nodes"
				],
				"Text": [
					"TextContents"
				]
			},
			"methods": [
				{
					"name": "GetFirstChild",
					"returns": "CParsingNode",
					"params": [
						{
							"identifier": "Text",
							"argument": "Name"
						}
					]
				}
			]
		},
		"CParsingManager": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CParsingDocument[]": [
					"DocumentsXml"
				],
				"Integer": [
					"DocumentsSlotsLimit"
				]
			},
			"methods": [
				{
					"name": "Create",
					"returns": "CParsingDocument",
					"params": [
						{
							"identifier": "Text",
							"argument": "Contents"
						}
					]
				},
				{
					"name": "Create",
					"returns": "CParsingDocument",
					"params": [
						{
							"identifier": "Text",
							"argument": "Contents"
						},
						{
							"identifier": "Boolean",
							"argument": "GenerateText"
						},
						{
							"identifier": "Boolean",
							"argument": "GenerateTextRaw"
						},
						{
							"identifier": "Boolean",
							"argument": "GenerateTextResursive"
						}
					]
				},
				{
					"name": "Destroy",
					"returns": "Void",
					"params": [
						{
							"identifier": "CParsingDocument",
							"argument": "Document"
						}
					]
				},
				{
					"name": "Parse_Xml",
					"returns": "CParsingDocument",
					"params": [
						{
							"identifier": "Text",
							"argument": "Contents"
						}
					]
				},
				{
					"name": "Parse_Xml",
					"returns": "CParsingDocument",
					"params": [
						{
							"identifier": "Text",
							"argument": "Contents"
						},
						{
							"identifier": "Boolean",
							"argument": "GenerateText"
						},
						{
							"identifier": "Boolean",
							"argument": "GenerateTextRaw"
						},
						{
							"identifier": "Boolean",
							"argument": "GenerateTextResursive"
						}
					]
				},
				{
					"name": "Parse_Destroy",
					"returns": "Void",
					"params": [
						{
							"identifier": "CParsingDocument",
							"argument": "Document"
						}
					]
				},
				{
					"name": "Compose_Start_Xml",
					"returns": "Ident",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "Compact"
						}
					]
				},
				{
					"name": "Compose_Start_Json",
					"returns": "Ident",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "Compact"
						}
					]
				},
				{
					"name": "Compose_End",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ComposerId"
						}
					]
				},
				{
					"name": "Compose_Destroy",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ComposerId"
						}
					]
				},
				{
					"name": "Compose_Node_Open",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ComposerId"
						},
						{
							"identifier": "Text",
							"argument": "Name"
						}
					]
				},
				{
					"name": "Compose_Node_Close",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ComposerId"
						}
					]
				},
				{
					"name": "Compose_Array_Open",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ComposerId"
						},
						{
							"identifier": "Text",
							"argument": "Name"
						}
					]
				},
				{
					"name": "Compose_Array_Close",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ComposerId"
						}
					]
				},
				{
					"name": "Compose_Attribute",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ComposerId"
						},
						{
							"identifier": "Text",
							"argument": "Name"
						},
						{
							"identifier": "Text",
							"argument": "Value"
						}
					]
				},
				{
					"name": "Compose_Attribute",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ComposerId"
						},
						{
							"identifier": "Text",
							"argument": "Name"
						},
						{
							"identifier": "Integer",
							"argument": "Value"
						}
					]
				},
				{
					"name": "Compose_Attribute",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ComposerId"
						},
						{
							"identifier": "Text",
							"argument": "Name"
						},
						{
							"identifier": "Real",
							"argument": "Value"
						}
					]
				},
				{
					"name": "Compose_Attribute",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ComposerId"
						},
						{
							"identifier": "Text",
							"argument": "Name"
						},
						{
							"identifier": "Boolean",
							"argument": "Value"
						}
					]
				},
				{
					"name": "Compose_Value",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ComposerId"
						},
						{
							"identifier": "Text",
							"argument": "Name"
						},
						{
							"identifier": "Text",
							"argument": "Value"
						}
					]
				},
				{
					"name": "Compose_GetResult",
					"returns": "Text",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ComposerId"
						}
					]
				}
			]
		},
		"CParsingNode": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CParsingNode[]": [
					"Children"
				],
				"Text": [
					"Name",
					"TextContents",
					"TextRawContents",
					"TextRecursiveContents"
				]
			},
			"methods": [
				{
					"name": "GetAttributeText",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "Name"
						},
						{
							"identifier": "Text",
							"argument": "DefaultValue"
						}
					]
				},
				{
					"name": "GetAttributeInteger",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Text",
							"argument": "Name"
						},
						{
							"identifier": "Integer",
							"argument": "DefaultValue"
						}
					]
				},
				{
					"name": "GetAttributeReal",
					"returns": "Real",
					"params": [
						{
							"identifier": "Text",
							"argument": "Name"
						},
						{
							"identifier": "Real",
							"argument": "DefaultValue"
						}
					]
				},
				{
					"name": "GetAttributeBoolean",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Text",
							"argument": "Name"
						},
						{
							"identifier": "Boolean",
							"argument": "DefaultValue"
						}
					]
				},
				{
					"name": "GetFirstChild",
					"returns": "CParsingNode",
					"params": [
						{
							"identifier": "Text",
							"argument": "Name"
						}
					]
				}
			]
		},
		"CPlayer": {
			"inherit": "CEntity",
			"enums": {},
			"props": {
				"Boolean": [
					"RequestsSpectate"
				],
				"CUser": [
					"User"
				],
				"Integer": [
					"RequestedClan"
				]
			},
			"methods": []
		},
		"CPlaygroundClient": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"DisablePlayingStateTracking",
					"IsInGameMenuDisplayed",
					"IsLoadingScreen",
					"IsSpectator",
					"IsSpectatorClient",
					"UseClans",
					"UseForcedClans"
				],
				"CMap": [
					"Map"
				],
				"CServerInfo": [
					"ServerInfo"
				],
				"CTeam[]": [
					"Teams"
				],
				"CUIConfig": [
					"UI"
				],
				"CUser": [
					"LocalUser"
				],
				"Ident": [
					"SettingsPlayerModelId"
				],
				"Integer": [
					"GameTime"
				]
			},
			"methods": [
				{
					"name": "QuitServer",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "Silent"
						}
					]
				},
				{
					"name": "QuitServerAndSetResult",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "Silent"
						},
						{
							"identifier": "Text",
							"argument": "Type"
						},
						{
							"identifier": "Text[]",
							"argument": "Data"
						}
					]
				},
				{
					"name": "JoinTeam1",
					"returns": "Void",
					"params": []
				},
				{
					"name": "JoinTeam2",
					"returns": "Void",
					"params": []
				},
				{
					"name": "RequestSpectatorClient",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "Spectator"
						}
					]
				},
				{
					"name": "SetSpectateTarget",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Player"
						}
					]
				},
				{
					"name": "ShowProfile",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Player"
						}
					]
				}
			]
		},
		"CPlug": {
			"inherit": "CNod",
			"enums": {},
			"props": {},
			"methods": []
		},
		"CRealLeaderBoardInfo": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Ident": [
					"UserId"
				],
				"Integer": [
					"Rank"
				],
				"Real": [
					"Score"
				],
				"Text": [
					"DisplayName",
					"FileName",
					"Login",
					"ReplayUrl"
				]
			},
			"methods": []
		},
		"CReplayInfo": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Text": [
					"FileName",
					"MapUid",
					"Name",
					"Path"
				]
			},
			"methods": []
		},
		"CScore": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"IsRegisteredForLadderMatch"
				],
				"CUser": [
					"User"
				],
				"Integer": [
					"LadderClan",
					"LadderRankSortValue"
				],
				"Real": [
					"LadderMatchScoreValue",
					"LadderScore"
				]
			},
			"methods": []
		},
		"CScoreMgr": {
			"inherit": "CNod",
			"enums": {
				"ELocalScoreStatus": [
					"None",
					"Loading",
					"NotLoaded",
					"Loaded"
				],
				"EMasterServerScoreStatus": [
					"None",
					"Synchronizing",
					"NotSynchronized",
					"Synchronized"
				]
			},
			"props": {
				"CTaskResult[]": [
					"TaskResults"
				]
			},
			"methods": [
				{
					"name": "TaskResult_Release",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "TaskId"
						}
					]
				},
				{
					"name": "ScoreStatus_GetLocalStatus",
					"returns": "ELocalScoreStatus",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						}
					]
				},
				{
					"name": "ScoreStatus_GetMasterServerStatus",
					"returns": "EMasterServerScoreStatus",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						}
					]
				},
				{
					"name": "Playground_GetPlayerGhost",
					"returns": "CGhost",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "GamePlayer"
						}
					]
				},
				{
					"name": "Map_SetNewRecord",
					"returns": "CTaskResult",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "MapUid"
						},
						{
							"identifier": "Text",
							"argument": "Context"
						},
						{
							"identifier": "CGhost",
							"argument": "Ghost"
						}
					]
				},
				{
					"name": "Map_GetRecord",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "MapUid"
						},
						{
							"identifier": "Text",
							"argument": "Context"
						}
					]
				},
				{
					"name": "Map_GetRecordGhost",
					"returns": "CTaskResult_Ghost",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "MapUid"
						},
						{
							"identifier": "Text",
							"argument": "Context"
						}
					]
				},
				{
					"name": "Map_GetMultiAsyncLevel",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "MapUid"
						},
						{
							"identifier": "Text",
							"argument": "Context"
						}
					]
				},
				{
					"name": "Map_GetMultiAsyncLevelRecord",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Text",
							"argument": "MapUid"
						},
						{
							"identifier": "Text",
							"argument": "Context"
						},
						{
							"identifier": "Integer",
							"argument": "MultiAsyncLevel"
						}
					]
				},
				{
					"name": "Map_GetMultiAsyncLevelRecordGhost",
					"returns": "CTaskResult_Ghost",
					"params": [
						{
							"identifier": "Text",
							"argument": "MapUid"
						},
						{
							"identifier": "Text",
							"argument": "Context"
						},
						{
							"identifier": "Integer",
							"argument": "MultiAsyncLevel"
						}
					]
				},
				{
					"name": "Map_GetSkillPoints",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "MapUid"
						},
						{
							"identifier": "Text",
							"argument": "Context"
						}
					]
				},
				{
					"name": "MapLeaderBoard_GetPlayerRanking",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "MapUid"
						},
						{
							"identifier": "Text",
							"argument": "Context"
						},
						{
							"identifier": "Text",
							"argument": "Zone"
						}
					]
				},
				{
					"name": "MapLeaderBoard_GetPlayerCount",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Text",
							"argument": "MapUid"
						},
						{
							"identifier": "Text",
							"argument": "Context"
						},
						{
							"identifier": "Text",
							"argument": "Zone"
						}
					]
				},
				{
					"name": "MapLeaderBoard_GetPlayerList",
					"returns": "CTaskResult_NaturalLeaderBoardInfoList",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "MapUid"
						},
						{
							"identifier": "Text",
							"argument": "Context"
						},
						{
							"identifier": "Text",
							"argument": "Zone"
						},
						{
							"identifier": "Integer",
							"argument": "FromIndex"
						},
						{
							"identifier": "Integer",
							"argument": "Count"
						}
					]
				},
				{
					"name": "Campaign_GetMultiAsyncLevel",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "CampaignId"
						}
					]
				},
				{
					"name": "Campaign_GetMultiAsyncLevelCount",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "CampaignId"
						},
						{
							"identifier": "Integer",
							"argument": "MultiAsyncLevel"
						}
					]
				},
				{
					"name": "Campaign_GetSkillPoints",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "CampaignId"
						}
					]
				},
				{
					"name": "Campaign_GetOpponentRecords",
					"returns": "CTaskResult_MapRecordList",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "CampaignId"
						},
						{
							"identifier": "Text",
							"argument": "OpponentLogin"
						}
					]
				},
				{
					"name": "Campaign_GetBuddiesMapRecord",
					"returns": "CTaskResult_BuddiesChallengeRecord",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "CampaignId"
						},
						{
							"identifier": "Text",
							"argument": "MapUid"
						}
					]
				},
				{
					"name": "Campaign_IsBuddiesMapRecordDirty",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "CampaignId"
						},
						{
							"identifier": "Text",
							"argument": "MapUid"
						}
					]
				},
				{
					"name": "Campaign_GetBuddiesMapRecordsComparison",
					"returns": "CTaskResult_BuddiesChallengeRecordsComparison",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "CampaignId"
						}
					]
				},
				{
					"name": "Campaign_GetBuddyMapRecordsComparison",
					"returns": "CTaskResult_BuddyChallengeRecordsComparison",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "OpponentLogin"
						},
						{
							"identifier": "Text",
							"argument": "CampaignId"
						}
					]
				},
				{
					"name": "CampaignLeaderBoard_GetPlayerRanking",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "CampaignId"
						},
						{
							"identifier": "Text",
							"argument": "Zone"
						},
						{
							"identifier": "Boolean",
							"argument": "UseSkillPoints"
						}
					]
				},
				{
					"name": "CampaignLeaderBoard_GetPlayerCount",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Text",
							"argument": "CampaignId"
						},
						{
							"identifier": "Text",
							"argument": "Zone"
						},
						{
							"identifier": "Boolean",
							"argument": "UseSkillPoints"
						}
					]
				},
				{
					"name": "CampaignLeaderBoard_GetPlayerList",
					"returns": "CTaskResult_NaturalLeaderBoardInfoList",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "CampaignId"
						},
						{
							"identifier": "Text",
							"argument": "Zone"
						},
						{
							"identifier": "Boolean",
							"argument": "UseSkillPoints"
						},
						{
							"identifier": "Integer",
							"argument": "FromIndex"
						},
						{
							"identifier": "Integer",
							"argument": "Count"
						}
					]
				},
				{
					"name": "Multiplayer_AddToScore",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Real",
							"argument": "ScoreDiff"
						},
						{
							"identifier": "Integer",
							"argument": "Timestamp"
						}
					]
				},
				{
					"name": "MultiplayerLeaderBoard_GetPlayerRanking",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "Zone"
						}
					]
				},
				{
					"name": "MultiplayerLeaderBoard_GetPlayerCount",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Text",
							"argument": "Zone"
						}
					]
				},
				{
					"name": "GlobalLeaderBoard_GetPlayerRanking",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "Zone"
						}
					]
				},
				{
					"name": "GlobalLeaderBoard_GetPlayerCount",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Text",
							"argument": "Zone"
						}
					]
				},
				{
					"name": "GlobalLeaderBoard_GetPlayerList",
					"returns": "CTaskResult_RealLeaderBoardInfoList",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "Zone"
						},
						{
							"identifier": "Integer",
							"argument": "FromIndex"
						},
						{
							"identifier": "Integer",
							"argument": "Count"
						}
					]
				}
			]
		},
		"CServerAdmin": {
			"inherit": "CNod",
			"enums": {
				"ESpecMode": [
					"Selectable",
					"SpectatorForced",
					"PlayerForced",
					"SpectatorSelectable",
					"PlayerSelectable"
				]
			},
			"props": {
				"Boolean": [
					"Authentication_GetTokenResponseReceived",
					"IsDisableChangeTeams"
				],
				"CServerInfo": [
					"ServerInfo"
				],
				"Integer": [
					"Authentication_ErrorCode"
				],
				"Text": [
					"Authentication_Token"
				]
			},
			"methods": [
				{
					"name": "AutoTeamBalance",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Kick",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CUser",
							"argument": "User"
						},
						{
							"identifier": "Text",
							"argument": "Reason"
						}
					]
				},
				{
					"name": "Kick",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CClient",
							"argument": "Client"
						},
						{
							"identifier": "Text",
							"argument": "Reason"
						}
					]
				},
				{
					"name": "Ban",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CUser",
							"argument": "User"
						},
						{
							"identifier": "Text",
							"argument": "Reason"
						}
					]
				},
				{
					"name": "Ban",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CClient",
							"argument": "Client"
						},
						{
							"identifier": "Text",
							"argument": "Reason"
						}
					]
				},
				{
					"name": "ForceSpectator",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CUser",
							"argument": "User"
						},
						{
							"identifier": "ESpecMode",
							"argument": "SpecMode"
						}
					]
				},
				{
					"name": "ForceSpectator",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CClient",
							"argument": "Client"
						},
						{
							"identifier": "ESpecMode",
							"argument": "SpecMode"
						}
					]
				},
				{
					"name": "ForcePlayerRequestedTeam",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CUser",
							"argument": "User"
						},
						{
							"identifier": "Integer",
							"argument": "Team"
						}
					]
				},
				{
					"name": "ForcePlayerRequestedTeam",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CClient",
							"argument": "Client"
						},
						{
							"identifier": "Integer",
							"argument": "Team"
						}
					]
				},
				{
					"name": "SetLobbyInfo",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "IsLobby"
						},
						{
							"identifier": "Integer",
							"argument": "LobbyPlayerCount"
						},
						{
							"identifier": "Integer",
							"argument": "LobbyMaxPlayerCount"
						},
						{
							"identifier": "Real",
							"argument": "LobbyPlayersLevel"
						}
					]
				},
				{
					"name": "SendToServerAfterMatch",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ServerUrl"
						}
					]
				},
				{
					"name": "CustomizeQuitDialog",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ManialinkPage"
						},
						{
							"identifier": "Text",
							"argument": "SendToServerUrl"
						},
						{
							"identifier": "Boolean",
							"argument": "ProposeAddToFavorites"
						},
						{
							"identifier": "Integer",
							"argument": "ForceDelay"
						}
					]
				},
				{
					"name": "Authentication_GetToken",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						},
						{
							"identifier": "Text",
							"argument": "AppLogin"
						}
					]
				}
			]
		},
		"CServerInfo": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"HasBuddies",
					"IsFavourite",
					"IsLobbyServer",
					"IsPrivate",
					"IsPrivateForSpectator"
				],
				"Integer": [
					"MaxPlayerCount",
					"MaxSpectatorCount",
					"NbChallenges",
					"PlayerCount",
					"ServerLevel",
					"SpectatorCount"
				],
				"Real": [
					"LadderServerLimitMax",
					"LadderServerLimitMin",
					"PlayersLevelAvg",
					"PlayersLevelMax",
					"PlayersLevelMin"
				],
				"Text": [
					"Comment",
					"JoinLink",
					"ModeName",
					"SendToServerAfterMatchUrl",
					"ServerLevelText",
					"ServerLogin",
					"ServerName",
					"ServerVersionBuild"
				],
				"Text[]": [
					"ChallengeNames",
					"PlayerNames"
				]
			},
			"methods": []
		},
		"CServerPlugin": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"Client_ComputeMinimap",
					"HoldMapUnloadRequest",
					"MapLoaded",
					"MapUnloadRequested"
				],
				"CClient[]": [
					"Clients",
					"Players",
					"Spectators"
				],
				"CHttpManager": [
					"Http"
				],
				"CMapInfo": [
					"MapInfo"
				],
				"CMapInfo[]": [
					"MapList"
				],
				"CParsingManager": [
					"Xml"
				],
				"CScore[]": [
					"Scores"
				],
				"CServerAdmin": [
					"ServerAdmin"
				],
				"CServerPluginEvent[]": [
					"PendingEvents"
				],
				"CSystemPlatform": [
					"System"
				],
				"CTeam[]": [
					"Teams"
				],
				"CTitle": [
					"LoadedTitle"
				],
				"CUIConfigMgr": [
					"UIManager"
				],
				"CUser[]": [
					"Users"
				],
				"CXmlRpc": [
					"XmlRpc"
				],
				"Integer": [
					"CurMapIndex",
					"NextMapIndex",
					"Now"
				],
				"Text": [
					"ForcedClubLinkUrl1",
					"ForcedClubLinkUrl2",
					"NeutralEmblemUrl"
				]
			},
			"methods": [
				{
					"name": "GetClient",
					"returns": "CClient",
					"params": [
						{
							"identifier": "Text",
							"argument": "Login"
						}
					]
				},
				{
					"name": "GetClient",
					"returns": "CClient",
					"params": [
						{
							"identifier": "CUIConfig",
							"argument": "UI"
						}
					]
				},
				{
					"name": "TweakTeamColorsToAvoidHueOverlap",
					"returns": "Void",
					"params": []
				},
				{
					"name": "TriggerModeScriptEvent",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Type"
						},
						{
							"identifier": "Text[]",
							"argument": "Data"
						}
					]
				},
				{
					"name": "SendModeScriptCommand",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "CommandName"
						},
						{
							"identifier": "Boolean",
							"argument": "BoolVal"
						}
					]
				},
				{
					"name": "SendModeScriptCommand",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "CommandName"
						},
						{
							"identifier": "Integer",
							"argument": "IntVal"
						}
					]
				},
				{
					"name": "SendModeScriptCommand",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "CommandName"
						},
						{
							"identifier": "Real",
							"argument": "RealVal"
						}
					]
				},
				{
					"name": "SendModeScriptCommand",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "CommandName"
						},
						{
							"identifier": "Text",
							"argument": "TextVal"
						}
					]
				},
				{
					"name": "RestartMap",
					"returns": "Void",
					"params": []
				},
				{
					"name": "NextMap",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Dbg_DumpDeclareForVariables",
					"returns": "Text",
					"params": [
						{
							"identifier": "CNod",
							"argument": "Nod"
						},
						{
							"identifier": "Boolean",
							"argument": "StatsOnly"
						}
					]
				}
			]
		},
		"CServerPluginEvent": {
			"inherit": "CBaseConstEvent",
			"enums": {
				"EType": [
					"Unknown",
					"ClientConnected",
					"ClientDisconnected",
					"MapLoaded",
					"BeginMatch",
					"BeginRound",
					"EndRound",
					"EndMatch",
					"MapUnloadRequested",
					"MapUnloaded",
					"ChatCommand",
					"ChatMessage",
					"ModeCallback"
				]
			},
			"props": {
				"CClient": [
					"Client"
				],
				"CScore[]": [
					"EndMatchScores"
				],
				"EType": [
					"Type"
				],
				"Integer[]": [
					"EndMatchRanks"
				],
				"Text": [
					"ChatCommandType",
					"ChatText",
					"ModeCallbackType"
				],
				"Text[]": [
					"ChatCommandData",
					"ModeCallbackData"
				]
			},
			"methods": []
		},
		"CSmAction": {
			"inherit": "CAction",
			"enums": {},
			"props": {
				"Boolean": [
					"EnergyReload",
					"HasNoPlayerCollision",
					"IsActive",
					"IsAttractor",
					"IsBound",
					"IsFlying",
					"IsFreeLooking",
					"IsFrozen",
					"IsGliding",
					"IsJumping",
					"IsRunning",
					"IsSliding",
					"IsSneaking",
					"State_Boolean1"
				],
				"CModeVehicle": [
					"OwnerVehicle"
				],
				"CSmActionEvent[]": [
					"PendingEvents"
				],
				"CSmPlayer": [
					"Owner"
				],
				"CSmPlayer[]": [
					"Players"
				],
				"Ident": [
					"State_EntityId1"
				],
				"Integer": [
					"Cooldown",
					"Energy",
					"EnergyCost",
					"EnergyMax",
					"Now",
					"State_Integer1",
					"State_Integer2",
					"Variant"
				],
				"Real": [
					"AmmoGain"
				]
			},
			"methods": [
				{
					"name": "SendRulesEvent",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Param1"
						},
						{
							"identifier": "Text[]",
							"argument": "Param2"
						},
						{
							"identifier": "CEntity",
							"argument": "Shooter"
						},
						{
							"identifier": "CEntity",
							"argument": "Victim"
						}
					]
				},
				{
					"name": "Anim_GetModelId",
					"returns": "Ident",
					"params": [
						{
							"identifier": "Text",
							"argument": "ModelName"
						}
					]
				},
				{
					"name": "Anim_PlayAtLocation",
					"returns": "Ident",
					"params": [
						{
							"identifier": "Ident",
							"argument": "AnimModelId"
						},
						{
							"identifier": "Vec3",
							"argument": "Position"
						},
						{
							"identifier": "Vec3",
							"argument": "Direction"
						}
					]
				},
				{
					"name": "Anim_PlayOnPlayer",
					"returns": "Ident",
					"params": [
						{
							"identifier": "Ident",
							"argument": "AnimModelId"
						},
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						}
					]
				},
				{
					"name": "Anim_Stop",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "AnimId"
						}
					]
				},
				{
					"name": "Projectile_GetModelId",
					"returns": "Ident",
					"params": [
						{
							"identifier": "Text",
							"argument": "ModelName"
						}
					]
				},
				{
					"name": "Projectile_CreateAtLocation",
					"returns": "Ident",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ProjectileModelId"
						},
						{
							"identifier": "CSmPlayer",
							"argument": "PlayerToIgnore"
						},
						{
							"identifier": "Vec3",
							"argument": "InitialPosition"
						},
						{
							"identifier": "Vec3",
							"argument": "InitialDirection"
						},
						{
							"identifier": "Vec3",
							"argument": "InitialVelocity"
						}
					]
				},
				{
					"name": "Projectile_CreateOnPlayer",
					"returns": "Ident",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ProjectileModelId"
						},
						{
							"identifier": "CSmPlayer",
							"argument": "Shooter"
						}
					]
				},
				{
					"name": "Cooldown_IsReady",
					"returns": "Boolean",
					"params": []
				},
				{
					"name": "Cooldown_Start",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Shield_CreateAtLocation",
					"returns": "Ident",
					"params": [
						{
							"identifier": "Vec3",
							"argument": "Position"
						},
						{
							"identifier": "Vec3",
							"argument": "Direction"
						}
					]
				},
				{
					"name": "Shield_CreateOnPlayer",
					"returns": "Ident",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "ShieldOwner"
						}
					]
				},
				{
					"name": "Shield_Destroy",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ShieldId"
						}
					]
				},
				{
					"name": "Shield_Exists",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ShieldId"
						}
					]
				},
				{
					"name": "Shield_GetArmor",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ShieldId"
						}
					]
				},
				{
					"name": "Shield_SetArmor",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ShieldId"
						},
						{
							"identifier": "Integer",
							"argument": "ShieldArmor"
						}
					]
				},
				{
					"name": "Shield_GetIsActive",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ShieldId"
						}
					]
				},
				{
					"name": "Shield_SetIsActive",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ShieldId"
						},
						{
							"identifier": "Boolean",
							"argument": "ShieldIsActive"
						}
					]
				},
				{
					"name": "Shield_GetArmorMax",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ShieldId"
						}
					]
				},
				{
					"name": "Shield_GetTickReload",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ShieldId"
						}
					]
				},
				{
					"name": "Shield_GetCooldown",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ShieldId"
						}
					]
				},
				{
					"name": "GetPlayerAmmo",
					"returns": "Integer",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						}
					]
				},
				{
					"name": "GetPlayerAmmoMax",
					"returns": "Integer",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						}
					]
				},
				{
					"name": "Vehicle_TriggerTurbo",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Vehicle_TriggerTurboBrake",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CSmActionEvent": {
			"inherit": "CBaseConstEvent",
			"enums": {
				"EType": [
					"OnHitPlayer",
					"OnProjectileEnd",
					"OnProjectileDestroyed",
					"OnActiveChange",
					"OnHitObject",
					"OnHitShield",
					"OnHitVehicle",
					"OnShieldEnd",
					"OnHitTurret"
				]
			},
			"props": {
				"CEntity": [
					"Victim"
				],
				"EType": [
					"Type"
				],
				"Ident": [
					"ProjectileModelId"
				],
				"Integer": [
					"ContextId",
					"Damage",
					"Shield"
				],
				"Vec3": [
					"Direction",
					"Normal",
					"Position"
				]
			},
			"methods": []
		},
		"CSmBase": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"IsActive"
				],
				"Integer": [
					"Clan",
					"NumberOfCollectors"
				]
			},
			"methods": []
		},
		"CSmBlock": {
			"inherit": "CSmLandmark",
			"enums": {},
			"props": {
				"CSmBase": [
					"Base"
				]
			},
			"methods": []
		},
		"CSmBlockPole": {
			"inherit": "CSmBlock",
			"enums": {},
			"props": {
				"Boolean": [
					"Captured"
				],
				"CSmGauge": [
					"Gauge"
				],
				"CSmSector": [
					"Sector"
				]
			},
			"methods": []
		},
		"CSmGauge": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Integer": [
					"Clan",
					"Max",
					"Speed",
					"Value"
				],
				"Real": [
					"ValueReal"
				]
			},
			"methods": []
		},
		"CSmLandmark": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Integer": [
					"Order"
				],
				"Text": [
					"Tag"
				],
				"Vec3": [
					"DirFront",
					"Position"
				]
			},
			"methods": []
		},
		"CSmMapBase": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"IsActive"
				],
				"Integer": [
					"Clan",
					"NumberOfCollectors"
				]
			},
			"methods": []
		},
		"CSmMapGate": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"AutoClosed",
					"AutoIsActive",
					"Automatic",
					"ManualClosed"
				],
				"Integer": [
					"AutoCloseDelay",
					"AutoOpenSpeed",
					"Clan"
				]
			},
			"methods": []
		},
		"CSmMapGauge": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"Captured"
				],
				"Integer": [
					"Clan",
					"Max",
					"Speed",
					"Value"
				],
				"Real": [
					"ValueReal"
				]
			},
			"methods": []
		},
		"CSmMapLandmark": {
			"inherit": "CMapLandmark",
			"enums": {},
			"props": {
				"CSmMapBase": [
					"Base"
				],
				"CSmMapGate": [
					"Gate"
				],
				"CSmMapGauge": [
					"Gauge"
				]
			},
			"methods": []
		},
		"CSmMapType": {
			"inherit": "CMapType",
			"enums": {},
			"props": {
				"CSmMode": [
					"Mode"
				],
				"CSmPlayer[]": [
					"AllPlayers",
					"Players"
				]
			},
			"methods": []
		},
		"CSmMlScriptIngame": {
			"inherit": "CMlScriptIngame",
			"enums": {},
			"props": {
				"Boolean": [
					"HideResumePlayingButton"
				],
				"CModeVehicle[]": [
					"Vehicles"
				],
				"CSmMapBase[]": [
					"MapBases"
				],
				"CSmMapLandmark[]": [
					"MapLandmarks",
					"MapLandmarks_BotPath",
					"MapLandmarks_BotSpawn",
					"MapLandmarks_Gate",
					"MapLandmarks_Gauge",
					"MapLandmarks_ObjectAnchor",
					"MapLandmarks_PlayerSpawn",
					"MapLandmarks_Sector"
				],
				"CSmPlayer": [
					"GUIPlayer",
					"InputPlayer"
				],
				"CSmPlayer[]": [
					"Players"
				],
				"CSmScore[]": [
					"Scores"
				],
				"Integer": [
					"ArenaNow"
				],
				"Integer[]": [
					"ClanScores"
				]
			},
			"methods": []
		},
		"CSmMode": {
			"inherit": "CMode",
			"enums": {
				"EWeapon": [
					"Laser",
					"Rocket",
					"Nucleus",
					"Arrow",
					"Missile"
				],
				"EActionSlot": [
					"Slot_A",
					"Slot_B",
					"Slot_C",
					"Slot_D",
					"Slot_E",
					"Slot_F",
					"Slot_G",
					"Slot_H"
				],
				"EActionInput": [
					"Weapon",
					"Movement",
					"Activable1",
					"Activable2",
					"Activable3",
					"Activable4",
					"Consumable1",
					"Consumable2",
					"None"
				],
				"EGameplay": [
					"Default",
					"Mp3Beta0"
				]
			},
			"props": {
				"Boolean": [
					"ForceNavMapsComputation",
					"UseAllies",
					"UseAmmoBonusOnHit",
					"UseAutoDiscardBotEvents",
					"UseAutoRespawnBots",
					"UseAutoSpawnBots",
					"UseBeaconsWithRecipients",
					"UseClans",
					"UseDefaultActionEvents",
					"UseForcedClans",
					"UseInterractiveScreensIn3d",
					"UseLaserSkewering",
					"UseLaserVsBullets",
					"UseMultiClans",
					"UsePlayerTagging",
					"UseProtectClanmates",
					"UsePvPCollisions",
					"UsePvPWeapons",
					"UseSameWallJump",
					"WalkOnWall"
				],
				"CSmMapBase[]": [
					"MapBases"
				],
				"CSmMapLandmark[]": [
					"MapLandmarks",
					"MapLandmarks_BotPath",
					"MapLandmarks_BotSpawn",
					"MapLandmarks_Gate",
					"MapLandmarks_Gauge",
					"MapLandmarks_ObjectAnchor",
					"MapLandmarks_PlayerSpawn",
					"MapLandmarks_Sector"
				],
				"CSmModeEvent[]": [
					"PendingEvents"
				],
				"CSmObject[]": [
					"Objects"
				],
				"CSmPlayer[]": [
					"AllPlayers",
					"BotPlayers",
					"Players",
					"Spectators"
				],
				"CSmScore[]": [
					"Scores"
				],
				"EGameplay": [
					"Gameplay"
				],
				"Ident": [
					"OffZoneCenterLandmarkId"
				],
				"Integer": [
					"ClansNbAlive",
					"ClansNbDead",
					"ClansNbTotal",
					"EndTime",
					"GameplayVersion",
					"PlayersNbAlive",
					"PlayersNbDead",
					"PlayersNbTotal",
					"SpawnInvulnerabilityDuration",
					"StartTime"
				],
				"Integer[]": [
					"ClanScores",
					"ClansNbPlayers",
					"ClansNbPlayersAlive"
				],
				"Real": [
					"OffZoneRadius",
					"OffZoneRadiusSpeed"
				]
			},
			"methods": [
				{
					"name": "GetPlayer",
					"returns": "CSmPlayer",
					"params": [
						{
							"identifier": "CUIConfig",
							"argument": "UI"
						}
					]
				},
				{
					"name": "GetPlayer",
					"returns": "CSmPlayer",
					"params": [
						{
							"identifier": "Text",
							"argument": "Login"
						}
					]
				},
				{
					"name": "PassOn",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmModeEvent",
							"argument": "Event"
						}
					]
				},
				{
					"name": "Discard",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmModeEvent",
							"argument": "Event"
						}
					]
				},
				{
					"name": "SpawnPlayer",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Integer",
							"argument": "ClanNum"
						},
						{
							"identifier": "Integer",
							"argument": "Armor"
						},
						{
							"identifier": "CMapSpawn",
							"argument": "PlayerSpawn"
						},
						{
							"identifier": "Integer",
							"argument": "ActivationDate"
						}
					]
				},
				{
					"name": "SpawnPlayer",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Integer",
							"argument": "ClanNum"
						},
						{
							"identifier": "CModeTurret",
							"argument": "Turret"
						},
						{
							"identifier": "Integer",
							"argument": "ActivationDate"
						}
					]
				},
				{
					"name": "SpawnPlayer",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Integer",
							"argument": "ClanNum"
						},
						{
							"identifier": "CModeVehicle",
							"argument": "Vehicle"
						},
						{
							"identifier": "Integer",
							"argument": "ActivationDate"
						}
					]
				},
				{
					"name": "SpawnPlayer",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Integer",
							"argument": "ClanNum"
						},
						{
							"identifier": "CModeVehicle",
							"argument": "Vehicle"
						},
						{
							"identifier": "Integer",
							"argument": "SlotIndex"
						},
						{
							"identifier": "Integer",
							"argument": "ActivationDate"
						}
					]
				},
				{
					"name": "SpawnBotPlayer",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Integer",
							"argument": "ClanNum"
						},
						{
							"identifier": "Integer",
							"argument": "Armor"
						},
						{
							"identifier": "CMapSpawn",
							"argument": "PlayerSpawn"
						},
						{
							"identifier": "Integer",
							"argument": "ActivationDate"
						}
					]
				},
				{
					"name": "SpawnBotPlayer",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Integer",
							"argument": "ClanNum"
						},
						{
							"identifier": "Integer",
							"argument": "Armor"
						},
						{
							"identifier": "CMapBotPath",
							"argument": "BotPath"
						},
						{
							"identifier": "Integer",
							"argument": "ActivationDate"
						}
					]
				},
				{
					"name": "SpawnBotPlayer",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Integer",
							"argument": "ClanNum"
						},
						{
							"identifier": "Integer",
							"argument": "Armor"
						},
						{
							"identifier": "CMapBotSpawn",
							"argument": "BotSpawn"
						},
						{
							"identifier": "Integer",
							"argument": "ActivationDate"
						}
					]
				},
				{
					"name": "SpawnBotPlayer",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "CSmPlayer",
							"argument": "Owner"
						},
						{
							"identifier": "Integer",
							"argument": "Armor"
						},
						{
							"identifier": "Vec3",
							"argument": "Offset"
						},
						{
							"identifier": "Integer",
							"argument": "ActivationDate"
						}
					]
				},
				{
					"name": "UnspawnPlayer",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						}
					]
				},
				{
					"name": "ClearScores",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SetPlayerClan",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Integer",
							"argument": "ClanNum"
						}
					]
				},
				{
					"name": "SetPlayerWeapon",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "EWeapon",
							"argument": "DefaultWeapon"
						},
						{
							"identifier": "Boolean",
							"argument": "AutoSwitchWeapon"
						}
					]
				},
				{
					"name": "SetPlayerReloadAllWeapons",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Boolean",
							"argument": "ReloadAllWeapons"
						}
					]
				},
				{
					"name": "SetPlayerAmmo",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "EWeapon",
							"argument": "Weapon"
						},
						{
							"identifier": "Integer",
							"argument": "Count"
						}
					]
				},
				{
					"name": "GetPlayerAmmo",
					"returns": "Integer",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "EWeapon",
							"argument": "Weapon"
						}
					]
				},
				{
					"name": "AddPlayerAmmo",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "EWeapon",
							"argument": "Weapon"
						},
						{
							"identifier": "Real",
							"argument": "DeltaCount"
						}
					]
				},
				{
					"name": "SetPlayerAmmoMax",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "EWeapon",
							"argument": "Weapon"
						},
						{
							"identifier": "Integer",
							"argument": "Count"
						}
					]
				},
				{
					"name": "GetPlayerAmmoMax",
					"returns": "Integer",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "EWeapon",
							"argument": "Weapon"
						}
					]
				},
				{
					"name": "AddArmor",
					"returns": "Void",
					"params": [
						{
							"identifier": "CEntity",
							"argument": "Victim"
						},
						{
							"identifier": "Integer",
							"argument": "DeltaArmor"
						},
						{
							"identifier": "CEntity",
							"argument": "Shooter"
						},
						{
							"identifier": "Integer",
							"argument": "ShooterPoints"
						}
					]
				},
				{
					"name": "RemoveArmor",
					"returns": "Void",
					"params": [
						{
							"identifier": "CEntity",
							"argument": "Victim"
						},
						{
							"identifier": "Integer",
							"argument": "DeltaArmor"
						},
						{
							"identifier": "CEntity",
							"argument": "Shooter"
						},
						{
							"identifier": "Integer",
							"argument": "ShooterPoints"
						}
					]
				},
				{
					"name": "GetWeaponNum",
					"returns": "Integer",
					"params": [
						{
							"identifier": "EWeapon",
							"argument": "Weapon"
						}
					]
				},
				{
					"name": "CanRespawnPlayer",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						}
					]
				},
				{
					"name": "RespawnPlayer",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						}
					]
				},
				{
					"name": "RespawnPlayer",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "CMapWaypoint",
							"argument": "Waypoint"
						}
					]
				},
				{
					"name": "CreateBotPlayer",
					"returns": "CSmPlayer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ModelId"
						},
						{
							"identifier": "Integer",
							"argument": "ClanNum"
						}
					]
				},
				{
					"name": "DestroyBotPlayer",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "BotPlayer"
						}
					]
				},
				{
					"name": "DestroyAllBotPlayers",
					"returns": "Void",
					"params": []
				},
				{
					"name": "ScriptedBot_Move",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "BotPlayer"
						},
						{
							"identifier": "Vec3",
							"argument": "Goal"
						}
					]
				},
				{
					"name": "ScriptedBot_MoveDelta",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "BotPlayer"
						},
						{
							"identifier": "Vec3",
							"argument": "Delta"
						}
					]
				},
				{
					"name": "ScriptedBot_MoveAndAim",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "BotPlayer"
						},
						{
							"identifier": "Vec3",
							"argument": "Goal"
						}
					]
				},
				{
					"name": "ScriptedBot_MoveDeltaAndAim",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "BotPlayer"
						},
						{
							"identifier": "Vec3",
							"argument": "Delta"
						}
					]
				},
				{
					"name": "ScriptedBot_Aim",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "BotPlayer"
						},
						{
							"identifier": "Vec3",
							"argument": "Goal"
						}
					]
				},
				{
					"name": "ScriptedBot_AimDelta",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "BotPlayer"
						},
						{
							"identifier": "Real",
							"argument": "DeltaYaw"
						},
						{
							"identifier": "Real",
							"argument": "DeltaPitch"
						}
					]
				},
				{
					"name": "ScriptedBot_RequestAction",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "BotPlayer"
						}
					]
				},
				{
					"name": "ScriptedBot_RequestGunTrigger",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "BotPlayer"
						}
					]
				},
				{
					"name": "ActionLoad",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "EActionSlot",
							"argument": "ActionSlot"
						},
						{
							"identifier": "Ident",
							"argument": "ModelId"
						}
					]
				},
				{
					"name": "ActionLoad",
					"returns": "Void",
					"params": [
						{
							"identifier": "CModeVehicle",
							"argument": "Vehicle"
						},
						{
							"identifier": "Integer",
							"argument": "VehicleSlotIndex"
						},
						{
							"identifier": "EActionSlot",
							"argument": "ActionSlot"
						},
						{
							"identifier": "Ident",
							"argument": "ModelId"
						}
					]
				},
				{
					"name": "ActionLoad",
					"returns": "Void",
					"params": [
						{
							"identifier": "CModeTurret",
							"argument": "Turret"
						},
						{
							"identifier": "EActionSlot",
							"argument": "ActionSlot"
						},
						{
							"identifier": "Ident",
							"argument": "ModelId"
						}
					]
				},
				{
					"name": "Action_GetCooldown",
					"returns": "Integer",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "EActionInput",
							"argument": "ActionInput"
						}
					]
				},
				{
					"name": "Action_GetRemainingCooldown",
					"returns": "Integer",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "EActionInput",
							"argument": "ActionInput"
						}
					]
				},
				{
					"name": "ActionBind",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "EActionSlot",
							"argument": "ActionSlot"
						},
						{
							"identifier": "EActionInput",
							"argument": "ActionInput"
						}
					]
				},
				{
					"name": "ActionSetVariant",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "EActionSlot",
							"argument": "ActionSlot"
						},
						{
							"identifier": "Integer",
							"argument": "ActionVariant"
						}
					]
				},
				{
					"name": "SetNbFakePlayers",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "NbClan1"
						},
						{
							"identifier": "Integer",
							"argument": "NbClan2"
						}
					]
				},
				{
					"name": "ObjectCreate",
					"returns": "CSmObject",
					"params": [
						{
							"identifier": "Ident",
							"argument": "ModelId"
						}
					]
				},
				{
					"name": "ObjectDestroy",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmObject",
							"argument": "Object"
						}
					]
				},
				{
					"name": "ObjectDestroyAll",
					"returns": "Void",
					"params": []
				},
				{
					"name": "RemoveShieldArmor",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "VictimShieldId"
						},
						{
							"identifier": "Integer",
							"argument": "Damage"
						}
					]
				},
				{
					"name": "Replay_SaveAttackScore",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Integer",
							"argument": "Score"
						}
					]
				},
				{
					"name": "Replay_SaveDefenseScore",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Integer",
							"argument": "Score"
						}
					]
				},
				{
					"name": "Replay_SaveTeamScore",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Team"
						},
						{
							"identifier": "Integer",
							"argument": "Score"
						}
					]
				},
				{
					"name": "Replay_SavePlayerOfInterest",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						}
					]
				},
				{
					"name": "Replay_SaveWinner",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						}
					]
				},
				{
					"name": "Replay_SaveInterface",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CSmModeEvent": {
			"inherit": "CBaseEvent",
			"enums": {
				"EType": [
					"Unknown",
					"OnShoot",
					"OnHit",
					"OnNearMiss",
					"OnArmorEmpty",
					"OnCapture",
					"OnShotDeny",
					"OnFallDamage",
					"OnCommand",
					"OnPlayerAdded",
					"OnPlayerRemoved",
					"OnPlayerRequestRespawn",
					"OnActionCustomEvent",
					"OnActionEvent",
					"OnPlayerTouchesObject",
					"OnPlayerThrowsObject",
					"OnPlayerTriggersSector",
					"OnPlayerTriggersWaypoint",
					"OnPlayerRequestActionChange",
					"OnVehicleArmorEmpty",
					"OnVehicleCollision",
					"OnVehicleVsVehicleCollision",
					"OnVehicleLanding"
				],
				"EActionSlot": [
					"Slot_A",
					"Slot_B",
					"Slot_C",
					"Slot_D",
					"Slot_E",
					"Slot_F",
					"Slot_G",
					"Slot_H"
				],
				"EActionInput": [
					"Weapon",
					"Movement",
					"Activable1",
					"Activable2",
					"Activable3",
					"Activable4",
					"Consumable1",
					"Consumable2",
					"None"
				]
			},
			"props": {
				"Boolean": [
					"CommandValueBoolean",
					"GiveUp",
					"PlayerWasInLadderMatch",
					"PlayerWasSpawned",
					"ShooterUsedAction",
					"VictimUsedAction"
				],
				"CEntity": [
					"ShooterEntity",
					"VictimEntity"
				],
				"CSmBlockPole": [
					"BlockPole"
				],
				"CSmMapLandmark": [
					"Landmark"
				],
				"CSmObject": [
					"Object"
				],
				"CSmPlayer": [
					"Player"
				],
				"CUser": [
					"User"
				],
				"EActionInput": [
					"ActionInput"
				],
				"EActionSlot": [
					"Action_Slot",
					"ShooterActionSlot",
					"VictimActionSlot"
				],
				"EType": [
					"Type"
				],
				"Integer": [
					"ActionChange",
					"CommandValueInteger",
					"Damage",
					"ShooterClan",
					"ShooterPoints",
					"ShooterWeaponNum",
					"VictimShield",
					"VictimWeaponNum",
					"WaypointTime",
					"WeaponNum"
				],
				"Real": [
					"CommandValueReal",
					"Height",
					"MissDist"
				],
				"Text": [
					"ActionId",
					"CommandName",
					"CommandValueText",
					"Param1",
					"ShooterActionId",
					"VictimActionId"
				],
				"Text[]": [
					"Param2"
				],
				"Vec3": [
					"PlayerLastAimDirection",
					"PlayerLastPosition"
				]
			},
			"methods": []
		},
		"CSmObject": {
			"inherit": "CEntity",
			"enums": {
				"EStatus": [
					"OnPlayer",
					"OnAnchor",
					"InWorld",
					"Unspawned"
				]
			},
			"props": {
				"Boolean": [
					"Throwable"
				],
				"CSmMapLandmark": [
					"AnchorLandmark"
				],
				"CSmPlayer": [
					"Player"
				],
				"EStatus": [
					"Status"
				],
				"Ident": [
					"ModelId",
					"ThrowLatestPlayerId"
				],
				"Integer": [
					"MachineState"
				],
				"Vec3": [
					"Position",
					"Vel"
				]
			},
			"methods": [
				{
					"name": "SetAnchor",
					"returns": "Void",
					"params": [
						{
							"identifier": "CMapObjectAnchor",
							"argument": "ObjectAnchor"
						}
					]
				},
				{
					"name": "SetPlayer",
					"returns": "Void",
					"params": [
						{
							"identifier": "CSmPlayer",
							"argument": "Player"
						}
					]
				},
				{
					"name": "SetPosition",
					"returns": "Void",
					"params": [
						{
							"identifier": "Vec3",
							"argument": "Position"
						}
					]
				},
				{
					"name": "SetPositionAndVel",
					"returns": "Void",
					"params": [
						{
							"identifier": "Vec3",
							"argument": "Position"
						},
						{
							"identifier": "Vec3",
							"argument": "Vel"
						}
					]
				},
				{
					"name": "SetUnspawned",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CSmPlayer": {
			"inherit": "CPlayer",
			"enums": {
				"ESpawnStatus": [
					"NotSpawned",
					"Spawning",
					"Spawned"
				]
			},
			"props": {
				"Boolean": [
					"AllowProgressiveJump",
					"AllowWallJump",
					"AutoSwitchWeapon",
					"HasShield",
					"IsAttractorActivable",
					"IsBot",
					"IsCapturing",
					"IsFakePlayer",
					"IsHighlighted",
					"IsInAir",
					"IsInOffZone",
					"IsInVehicle",
					"IsInWater",
					"IsOnTech",
					"IsOnTechArmor",
					"IsOnTechArrow",
					"IsOnTechGround",
					"IsOnTechLaser",
					"IsOnTechNoWeapon",
					"IsOnTechNucleus",
					"IsOnTechSafeZone",
					"IsOnTechTeleport",
					"IsPowerJumpActivable",
					"IsTeleportActivable",
					"IsTouchingGround",
					"IsUnderground",
					"UseAlternateWeaponVisual"
				],
				"CModeVehicle": [
					"Vehicle"
				],
				"CSmMapLandmark": [
					"CapturedLandmark"
				],
				"CSmObject[]": [
					"Objects"
				],
				"CSmPlayerDriver": [
					"Driver"
				],
				"CSmScore": [
					"Score"
				],
				"ESpawnStatus": [
					"SpawnStatus"
				],
				"Ident": [
					"ForceModelId"
				],
				"Integer": [
					"Armor",
					"ArmorGain",
					"ArmorMax",
					"ArmorReplenishGain",
					"CurAmmo",
					"CurAmmoMax",
					"CurAmmoUnit",
					"CurWeapon",
					"CurrentClan",
					"EndTime",
					"IdleDuration",
					"NbActiveAttractors",
					"Stamina",
					"StaminaMaxValue",
					"StartTime"
				],
				"Real": [
					"AimPitch",
					"AimYaw",
					"AmmoGain",
					"AmmoPower",
					"ArmorPower",
					"EnergyLevel",
					"ForceLinearHue",
					"GetLinearHue",
					"JumpPower",
					"Speed",
					"SpeedPower",
					"StaminaGain",
					"StaminaMax",
					"StaminaPower",
					"ThrowSpeed"
				],
				"Vec3": [
					"AimDirection",
					"ForceColor",
					"Position",
					"Velocity"
				]
			},
			"methods": []
		},
		"CSmPlayerDriver": {
			"inherit": "CNod",
			"enums": {
				"ESmDriverBehaviour": [
					"Static",
					"Turret",
					"Scripted",
					"IA",
					"Patrol",
					"Escape",
					"Saunter"
				],
				"ESmDriverPatrolMode": [
					"OneTrip",
					"BackAndForth",
					"Loop"
				],
				"ESmAttackFilter": [
					"All",
					"AllPlayers",
					"AllBots",
					"AllOpposite",
					"OppositePlayers",
					"OppositeBots",
					"Nobody"
				]
			},
			"props": {
				"Boolean": [
					"IsFlying",
					"IsStuck",
					"RocketAnticipation",
					"Scripted_ForceAimInMoveDir",
					"UseOldShootingSystem"
				],
				"CSmPlayer": [
					"ForcedTarget",
					"Owner",
					"Target"
				],
				"CSmPlayer[]": [
					"TargetsToAvoid"
				],
				"ESmAttackFilter": [
					"AttackFilter"
				],
				"ESmDriverBehaviour": [
					"Behaviour"
				],
				"ESmDriverPatrolMode": [
					"Patrol_Mode"
				],
				"Integer": [
					"PathOffset",
					"ReactionTime",
					"Saunter_BaseChillingTime",
					"Saunter_ChillingTimeDelta",
					"ShootPeriodMax",
					"ShootPeriodMin"
				],
				"Real": [
					"Accuracy",
					"AggroRadius",
					"Agressivity",
					"DisengageDistance",
					"Escape_DistanceMaxEscape",
					"Escape_DistanceMinEscape",
					"Escape_DistanceSafe",
					"Fov",
					"PathSpeedCoef",
					"Saunter_Radius",
					"ShootRadius",
					"TargetMinDistance"
				],
				"Vec3": [
					"Escape_AnchorPoint",
					"Saunter_AnchorPoint"
				]
			},
			"methods": []
		},
		"CSmScore": {
			"inherit": "CScore",
			"enums": {},
			"props": {
				"Integer": [
					"DamageInflicted",
					"DamageTaken",
					"NbEliminationsInflicted",
					"NbEliminationsTaken",
					"NbRespawnsRequested",
					"Points",
					"RoundPoints",
					"TeamNum"
				]
			},
			"methods": [
				{
					"name": "Clear",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CSmSector": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Ident[]": [
					"PlayersIds"
				]
			},
			"methods": []
		},
		"CStation": {
			"inherit": "CNod",
			"enums": {
				"EEchelon": [
					"None",
					"Bronze1",
					"Bronze2",
					"Bronze3",
					"Silver1",
					"Silver2",
					"Silver3",
					"Gold1",
					"Gold2",
					"Gold3"
				]
			},
			"props": {
				"Boolean": [
					"DisableQuickEnter",
					"IsEditable",
					"IsLogoVisible"
				],
				"CTitle": [
					"Title"
				],
				"EEchelon": [
					"Echelon"
				],
				"Integer": [
					"AudienceRegisteredUsers",
					"CampaignMedalsCurrent",
					"CampaignMedalsMax",
					"CampaignMedalsRanking",
					"LadderRank",
					"NextEchelonPercent"
				],
				"Real": [
					"GhostAlpha",
					"LadderPoints"
				],
				"Vec3": [
					"FocusLightColor",
					"NormalLightColor"
				]
			},
			"methods": []
		},
		"CSystemPlatform": {
			"inherit": "CNod",
			"enums": {
				"ESystemPlatform": [
					"None",
					"Steam",
					"UPlay",
					"PS4",
					"XBoxOne"
				],
				"ESystemSkuIdentifier": [
					"Unknown",
					"EU",
					"US",
					"JP"
				]
			},
			"props": {
				"ESystemPlatform": [
					"Platform"
				],
				"ESystemSkuIdentifier": [
					"SkuIdentifier"
				],
				"Integer": [
					"CurrentLocalDate"
				],
				"Text": [
					"CurrentLocalDateText",
					"CurrentTimezone",
					"ExeVersion",
					"ExtraTool_Data",
					"ExtraTool_Info"
				]
			},
			"methods": [
				{
					"name": "ClipboardSet",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ClipboardText"
						}
					]
				}
			]
		},
		"CTaskResult": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"HasFailed",
					"HasSucceeded",
					"IsCanceled",
					"IsProcessing"
				],
				"Ident": [
					"Id"
				],
				"Text": [
					"ErrorCode",
					"ErrorDescription",
					"ErrorType"
				]
			},
			"methods": [
				{
					"name": "Cancel",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CTaskResult_BuddiesChallengeRecord": {
			"inherit": "CTaskResult",
			"enums": {},
			"props": {
				"CHighScoreComparison[]": [
					"BuddiesChallengeRecord"
				],
				"Text": [
					"Login"
				]
			},
			"methods": [
				{
					"name": "SortByOpponentCount",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SortByOpponentDisplayName",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SortByOpponentLogin",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SortByOpponentRecordDate",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SortByOpponentRecordTime",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CTaskResult_BuddiesChallengeRecordsComparison": {
			"inherit": "CTaskResult",
			"enums": {},
			"props": {
				"CHighScoreComparisonSummary[]": [
					"BuddiesComparison"
				],
				"Text": [
					"Login"
				]
			},
			"methods": [
				{
					"name": "SortByPlayerCount",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SortByOpponentLogin",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SortByOpponentCount",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SortByOpponentDate",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SortByOpponentDisplayName",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CTaskResult_BuddyChallengeRecordsComparison": {
			"inherit": "CTaskResult",
			"enums": {},
			"props": {
				"CHighScoreComparison[]": [
					"BuddyBestRecordsComparison",
					"PlayerBestRecordsComparison"
				],
				"Text": [
					"BuddyLogin",
					"Login"
				]
			},
			"methods": [
				{
					"name": "SortByMapName",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SortByRecordTime",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SortByRecordTimeDiff",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SortByRecordDate",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CTaskResult_FileList": {
			"inherit": "CTaskResult",
			"enums": {},
			"props": {
				"Text": [
					"ParentPath",
					"Path"
				],
				"Text[]": [
					"Files",
					"SubFolders"
				]
			},
			"methods": []
		},
		"CTaskResult_GameModeList": {
			"inherit": "CTaskResult",
			"enums": {},
			"props": {
				"CTaskResult_ModeInfo[]": [
					"GameModes"
				]
			},
			"methods": []
		},
		"CTaskResult_Ghost": {
			"inherit": "CTaskResult",
			"enums": {},
			"props": {
				"CGhost": [
					"Ghost"
				]
			},
			"methods": []
		},
		"CTaskResult_GhostList": {
			"inherit": "CTaskResult",
			"enums": {},
			"props": {
				"CGhost[]": [
					"Ghosts"
				]
			},
			"methods": []
		},
		"CTaskResult_MapList": {
			"inherit": "CTaskResult",
			"enums": {},
			"props": {
				"CMapInfo[]": [
					"MapInfos"
				],
				"Text": [
					"ParentPath",
					"Path"
				],
				"Text[]": [
					"SubFolders"
				]
			},
			"methods": []
		},
		"CTaskResult_MapRecord": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Integer": [
					"MultiAsyncLevel",
					"RespawnCount",
					"Score",
					"SkillPoints",
					"Time",
					"Timestamp"
				],
				"Text": [
					"Context",
					"FileName",
					"MapName",
					"MapUid",
					"ReplayUrl"
				]
			},
			"methods": []
		},
		"CTaskResult_MapRecordList": {
			"inherit": "CTaskResult_PlayerMapRecords",
			"enums": {},
			"props": {
				"CTaskResult_MapRecord[]": [
					"MapRecordList"
				]
			},
			"methods": []
		},
		"CTaskResult_ModeInfo": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Text": [
					"Description",
					"Name",
					"Path",
					"Version"
				],
				"Text[]": [
					"CompatibleMapTypes"
				]
			},
			"methods": []
		},
		"CTaskResult_NaturalLeaderBoardInfoList": {
			"inherit": "CTaskResult",
			"enums": {},
			"props": {
				"CNaturalLeaderBoardInfo[]": [
					"LeaderBoardInfo"
				],
				"Integer": [
					"Count",
					"FromIndex"
				]
			},
			"methods": []
		},
		"CTaskResult_PlayerMapRecords": {
			"inherit": "CTaskResult",
			"enums": {},
			"props": {},
			"methods": []
		},
		"CTaskResult_RealLeaderBoardInfoList": {
			"inherit": "CTaskResult",
			"enums": {},
			"props": {
				"CRealLeaderBoardInfo[]": [
					"LeaderBoardInfo"
				],
				"Integer": [
					"Count",
					"FromIndex"
				]
			},
			"methods": []
		},
		"CTaskResult_ReplayList": {
			"inherit": "CTaskResult",
			"enums": {},
			"props": {
				"CReplayInfo[]": [
					"ReplayInfos"
				],
				"Text": [
					"ParentPath",
					"Path"
				],
				"Text[]": [
					"SubFolders"
				]
			},
			"methods": []
		},
		"CTaskResult_StringIntList": {
			"inherit": "CTaskResult",
			"enums": {},
			"props": {
				"Text[]": [
					"Values"
				]
			},
			"methods": []
		},
		"CTeam": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Text": [
					"City",
					"ClubLinkUrl",
					"ColorText",
					"ColorizedName",
					"EmblemUrl",
					"Name",
					"PresentationManialinkUrl",
					"ZonePath"
				],
				"Vec3": [
					"ColorPrimary",
					"ColorSecondary"
				]
			},
			"methods": []
		},
		"CTitle": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Text": [
					"AuthorLogin",
					"AuthorName",
					"BaseTitleId",
					"Desc",
					"DownloadUrl",
					"InfoUrl",
					"MakerTitleId",
					"Name",
					"TitleId",
					"TitleVersion"
				]
			},
			"methods": []
		},
		"CTitleControl": {
			"inherit": "CNod",
			"enums": {
				"ESplitScreenLayout": [
					"Horizontal",
					"Vertical",
					"Four"
				],
				"EResult": [
					"Success",
					"Error_Internal",
					"Error_DataMgr",
					"Error_Net_ServerNotFound",
					"Error_Net_ServerUnreachable",
					"Error_Net_Disconnected",
					"Error_Net_WrongPassword",
					"Error_Network_OnlineExpired",
					"Error_Network_ServerFull",
					"Error_Abort"
				],
				"EEditorType": [
					"ActionMaker",
					"ChallengeEditor",
					"ItemEditor",
					"InterfaceDesigner",
					"MeshModeler",
					"ModuleStudio",
					"PixelArt",
					"EditorEditor",
					"VehicleAssembler",
					"MaterialEditor"
				]
			},
			"props": {
				"Boolean": [
					"CanPublishFiles",
					"IsReady"
				],
				"CServerInfo": [
					"GetServerInfo_Result"
				],
				"CServerInfo[]": [
					"LocalServers",
					"LocalServers_CurrentTitle"
				],
				"EResult": [
					"LatestResult"
				],
				"Text": [
					"CustomResultType"
				],
				"Text[]": [
					"CustomResultData"
				]
			},
			"methods": [
				{
					"name": "PlayMap",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Map"
						},
						{
							"identifier": "Text",
							"argument": "Mode"
						},
						{
							"identifier": "Text",
							"argument": "SettingsXml"
						}
					]
				},
				{
					"name": "PlayCampaign",
					"returns": "Void",
					"params": [
						{
							"identifier": "CCampaign",
							"argument": "Campaign"
						},
						{
							"identifier": "CMapInfo",
							"argument": "MapInfo"
						},
						{
							"identifier": "Text",
							"argument": "Mode"
						},
						{
							"identifier": "Text",
							"argument": "SettingsXml"
						}
					]
				},
				{
					"name": "PlayMapList",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text[]",
							"argument": "MapList"
						},
						{
							"identifier": "Text",
							"argument": "Mode"
						},
						{
							"identifier": "Text",
							"argument": "SettingsXml"
						}
					]
				},
				{
					"name": "PlayMatchSettings",
					"returns": "Void",
					"params": [
						{
							"identifier": "CMatchSettings",
							"argument": "MatchSettings"
						},
						{
							"identifier": "Text",
							"argument": "OverrideMode"
						},
						{
							"identifier": "Text",
							"argument": "OverrideSettingsXml"
						}
					]
				},
				{
					"name": "PlaySplitScreen",
					"returns": "Void",
					"params": [
						{
							"identifier": "ESplitScreenLayout",
							"argument": "LayoutType"
						},
						{
							"identifier": "Text[]",
							"argument": "MapList"
						},
						{
							"identifier": "Text",
							"argument": "Mode"
						},
						{
							"identifier": "Text",
							"argument": "SettingsXml"
						}
					]
				},
				{
					"name": "PlayMultiOnSameScreen",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text[]",
							"argument": "MapList"
						},
						{
							"identifier": "Text",
							"argument": "Mode"
						},
						{
							"identifier": "Text",
							"argument": "SettingsXml"
						}
					]
				},
				{
					"name": "PlaySplitScreen",
					"returns": "Void",
					"params": [
						{
							"identifier": "ESplitScreenLayout",
							"argument": "LayoutType"
						},
						{
							"identifier": "CMatchSettings",
							"argument": "MatchSettings"
						}
					]
				},
				{
					"name": "PlayMultiOnSameScreen",
					"returns": "Void",
					"params": [
						{
							"identifier": "CMatchSettings",
							"argument": "MatchSettings"
						}
					]
				},
				{
					"name": "ViewReplay",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Replay"
						}
					]
				},
				{
					"name": "OpenEditor",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "EditorName"
						},
						{
							"identifier": "Text",
							"argument": "MainPluginSettings"
						}
					]
				},
				{
					"name": "OpenEditor",
					"returns": "Void",
					"params": [
						{
							"identifier": "EEditorType",
							"argument": "EditorType"
						}
					]
				},
				{
					"name": "EditSkins",
					"returns": "Void",
					"params": []
				},
				{
					"name": "EditReplay",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text[]",
							"argument": "ReplayList"
						}
					]
				},
				{
					"name": "EditGhosts",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Map"
						}
					]
				},
				{
					"name": "EditAsset",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "EditorName"
						},
						{
							"identifier": "Text",
							"argument": "MainPluginSettingsXml"
						},
						{
							"identifier": "Text",
							"argument": "RelativeFileName"
						}
					]
				},
				{
					"name": "EditMap",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Map"
						},
						{
							"identifier": "Text",
							"argument": "EditorPluginScript"
						},
						{
							"identifier": "Text",
							"argument": "EditorPluginArgument"
						}
					]
				},
				{
					"name": "EditNewMap",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Environment"
						},
						{
							"identifier": "Text",
							"argument": "Decoration"
						},
						{
							"identifier": "Text",
							"argument": "ModNameOrUrl"
						},
						{
							"identifier": "Text",
							"argument": "PlayerModel"
						},
						{
							"identifier": "Text",
							"argument": "MapType"
						},
						{
							"identifier": "Text",
							"argument": "EditorPluginScript"
						},
						{
							"identifier": "Text",
							"argument": "EditorPluginArgument"
						}
					]
				},
				{
					"name": "EditNewMap",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Environment"
						},
						{
							"identifier": "Text",
							"argument": "Decoration"
						},
						{
							"identifier": "Text",
							"argument": "ModNameOrUrl"
						},
						{
							"identifier": "Text",
							"argument": "PlayerModel"
						},
						{
							"identifier": "Text",
							"argument": "MapType"
						},
						{
							"identifier": "Boolean",
							"argument": "UseSimpleEditor"
						},
						{
							"identifier": "Text",
							"argument": "EditorPluginScript"
						},
						{
							"identifier": "Text",
							"argument": "EditorPluginArgument"
						}
					]
				},
				{
					"name": "EditNewMapFromBaseMap",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "BaseMapName"
						},
						{
							"identifier": "Text",
							"argument": "ModNameOrUrl"
						},
						{
							"identifier": "Text",
							"argument": "PlayerModel"
						},
						{
							"identifier": "Text",
							"argument": "MapType"
						},
						{
							"identifier": "Text",
							"argument": "EditorPluginScript"
						},
						{
							"identifier": "Text",
							"argument": "EditorPluginArgument"
						}
					]
				},
				{
					"name": "EditBadges",
					"returns": "Void",
					"params": []
				},
				{
					"name": "PublishFile",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "FileName"
						}
					]
				},
				{
					"name": "ProcessManiaCodeXml",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ManiaCodeXml"
						}
					]
				},
				{
					"name": "DiscoverLocalServers",
					"returns": "Void",
					"params": []
				},
				{
					"name": "CreateServer",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ServerName"
						},
						{
							"identifier": "Text",
							"argument": "ServerComment"
						},
						{
							"identifier": "Integer",
							"argument": "MaxPlayerCount"
						},
						{
							"identifier": "Text",
							"argument": "Password"
						},
						{
							"identifier": "CMatchSettings",
							"argument": "MatchSettings"
						},
						{
							"identifier": "Text",
							"argument": "PasswordSpectators"
						}
					]
				},
				{
					"name": "CreateServer",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ServerName"
						},
						{
							"identifier": "Text",
							"argument": "ServerComment"
						},
						{
							"identifier": "Integer",
							"argument": "MaxPlayerCount"
						},
						{
							"identifier": "Text",
							"argument": "Password"
						},
						{
							"identifier": "Text",
							"argument": "PasswordSpectators"
						},
						{
							"identifier": "CMatchSettings",
							"argument": "MatchSettings"
						},
						{
							"identifier": "Boolean",
							"argument": "LocalOnly"
						}
					]
				},
				{
					"name": "GetServerInfo",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ServerLogin"
						}
					]
				},
				{
					"name": "GetServerInfo",
					"returns": "Void",
					"params": [
						{
							"identifier": "CServerInfo",
							"argument": "LocalServer"
						}
					]
				},
				{
					"name": "GetServerInfo_Abort",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Join_GetServerInfo_Result",
					"returns": "Void",
					"params": [
						{
							"identifier": "Boolean",
							"argument": "AsSpectator"
						},
						{
							"identifier": "Text",
							"argument": "Password"
						}
					]
				},
				{
					"name": "JoinServer",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "ServerLogin"
						},
						{
							"identifier": "Boolean",
							"argument": "AsSpectator"
						},
						{
							"identifier": "Text",
							"argument": "Password"
						}
					]
				},
				{
					"name": "Quit",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CTitleEdition": {
			"inherit": "CNod",
			"enums": {
				"EDrive": [
					"TitleReadable",
					"Title",
					"User"
				]
			},
			"props": {
				"Boolean": [
					"Dialog_Aborted",
					"Dialog_IsFinished",
					"Dialog_Success"
				],
				"CPackCreator": [
					"PackCreator",
					"EditedTitleInfo"
				],
				"CTitle": [
					"TitleMaker"
				],
				"Text": [
					"EditedTitleId"
				]
			},
			"methods": [
				{
					"name": "File_ImportFromUser",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "FileName"
						}
					]
				},
				{
					"name": "File_Move",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "OrigName"
						},
						{
							"identifier": "Text",
							"argument": "DestNameOrFolder"
						},
						{
							"identifier": "Boolean",
							"argument": "KeepOriginalCopy"
						}
					]
				},
				{
					"name": "File_Exists",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Text",
							"argument": "FileName"
						},
						{
							"identifier": "EDrive",
							"argument": "InDrive"
						}
					]
				},
				{
					"name": "File_Delete",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Name"
						}
					]
				},
				{
					"name": "File_WriteText",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "FileName"
						},
						{
							"identifier": "Text",
							"argument": "Text"
						}
					]
				},
				{
					"name": "File_ReadText",
					"returns": "Text",
					"params": [
						{
							"identifier": "Text",
							"argument": "FileName"
						}
					]
				},
				{
					"name": "Dialog_ImportFiles",
					"returns": "Void",
					"params": []
				},
				{
					"name": "OpenTitleFolderInExplorer",
					"returns": "Void",
					"params": []
				},
				{
					"name": "ReloadTitleDesc",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SaveTitleDesc",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SetTitleCampaign",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "CampaignNum"
						},
						{
							"identifier": "Text",
							"argument": "ScoreContext"
						},
						{
							"identifier": "Text",
							"argument": "MapsFolderNameOrPlayListName"
						},
						{
							"identifier": "Boolean",
							"argument": "OfficialRecordEnabled"
						}
					]
				}
			]
		},
		"CTmMapType": {
			"inherit": "CMapType",
			"enums": {},
			"props": {
				"CTmMode": [
					"Mode"
				],
				"CTmPlayer[]": [
					"AllPlayers",
					"Players"
				]
			},
			"methods": [
				{
					"name": "TMObjective_SetFromBestRace",
					"returns": "Void",
					"params": [
						{
							"identifier": "CTmScore",
							"argument": "Score"
						}
					]
				}
			]
		},
		"CTmMlPlayer": {
			"inherit": "CPlayer",
			"enums": {
				"ERaceState": [
					"BeforeStart",
					"Running",
					"Finished",
					"Eliminated"
				],
				"ETmBonusModeEventType": [
					"None",
					"Bumps",
					"LowGravity",
					"FreeWheeling",
					"LockedDirections"
				],
				"ESceneVehiclePhyStuntFigure": [
					"None",
					"StraightJump",
					"Flip",
					"BackFlip",
					"Spin",
					"Aerial",
					"AlleyOop",
					"Roll",
					"Corkscrew",
					"SpinOff",
					"Rodeo",
					"FlipFlap",
					"Twister",
					"FreeStyle",
					"SpinningMix",
					"FlippingChaos",
					"RollingMadness",
					"WreckNone",
					"WreckStraightJump",
					"WreckFlip",
					"WreckBackFlip",
					"WreckSpin",
					"WreckAerial",
					"WreckAlleyOop",
					"WreckRoll",
					"WreckCorkscrew",
					"WreckSpinOff",
					"WreckRodeo",
					"WreckFlipFlap",
					"WreckTwister",
					"WreckFreeStyle",
					"WreckSpinningMix",
					"WreckFlippingChaos",
					"WreckRollingMadness",
					"TimePenalty",
					"RespawnPenalty",
					"Grind",
					"Reset"
				]
			},
			"props": {
				"Boolean": [
					"BonusIsPossible",
					"BonusModeEventIsGold",
					"BonusModeIsBigCar",
					"BonusModeIsEmptyCars",
					"BonusModeIsGold",
					"BonusModeIsJump",
					"BonusModeIsMiniCar",
					"BonusModeIsSpeedyCars",
					"BonusModeIsTurbo",
					"InputIsBraking",
					"IsDeadlyZoneActive",
					"IsSpawned",
					"SmashNeedHelp",
					"StuntCurComboChainCounter",
					"StuntCurFigureMasterJump",
					"StuntEpicLanding",
					"StuntIsInFigure",
					"StuntMasterJump",
					"StuntMasterLanding",
					"StuntPerfectLanding",
					"StuntReverseLanding",
					"StuntStraightLanding"
				],
				"CTmResult": [
					"CurLap",
					"CurRace"
				],
				"CTrackManiaScore": [
					"Score"
				],
				"ERaceState": [
					"RaceState"
				],
				"ESceneVehiclePhyStuntFigure": [
					"StuntLast"
				],
				"ETmBonusModeEventType": [
					"BonusModeEventType"
				],
				"Integer": [
					"BonusBumpCooldown",
					"BonusModeEmptyCarsStock",
					"BonusModeJumpStock",
					"BonusModeTimeTillEndEvent",
					"BonusModeTimeTillEvent",
					"BonusModeTimeTillEventWarning",
					"BonusModeTurboStock",
					"CoopCheckpointCurController",
					"CoopSymbiosysPercentTotal",
					"CurCheckpointLapTime",
					"CurCheckpointRaceTime",
					"CurRaceContinuousRank",
					"CurTriggerIndex",
					"CurrentClan",
					"CurrentNbLaps",
					"DisplaySpeed",
					"EngineCurGear",
					"FlyingDuration",
					"FreeWheelingDuration",
					"HandicapFullGasDuration",
					"HandicapNoBrakesDuration",
					"HandicapNoGasDuration",
					"HandicapNoGripDuration",
					"HandicapNoSteeringDuration",
					"InWaterDuration",
					"LapStartTime",
					"LightTrailsDuration",
					"RaceStartTime",
					"SkiddingDuration",
					"SparklingDuration",
					"StuntAngle",
					"StuntCombo",
					"StuntLastTime",
					"StuntPoints",
					"TimeBeforeDeadlyZone",
					"TimeElapsedSinceLastStunt",
					"TimeLeftForStuntCombo",
					"TimeTillSmashGiveUp",
					"TimeTillSmashRespawn",
					"UniqueCameraAvailableRespawnLeft",
					"UniqueCameraRespawnCount",
					"WheelsContactCount",
					"WheelsSkiddingCount"
				],
				"Real": [
					"AccelCoef",
					"AimPitch",
					"AimYaw",
					"ControlCoef",
					"DamageHullRatio",
					"DamageWindowRatio",
					"Distance",
					"EngineRpm",
					"EngineTurboRatio",
					"FlyingDistance",
					"GravityCoef",
					"InputGasPedal",
					"InputSteer",
					"SkiddingDistance",
					"Speed",
					"StuntCurFigureEpicGauge",
					"StuntCurFigureMasterGauge",
					"StuntFactor",
					"Upwardness"
				],
				"Vec3": [
					"AimDirection",
					"Position"
				]
			},
			"methods": []
		},
		"CTmMlScriptIngame": {
			"inherit": "CMlScriptIngame",
			"enums": {},
			"props": {
				"Boolean": [
					"IndependantLaps",
					"MapIsLapRace"
				],
				"CTmMlPlayer": [
					"GUIPlayer",
					"InputPlayer"
				],
				"CTmMlPlayer[]": [
					"Players"
				],
				"CTmRaceClientEvent[]": [
					"RaceEvents"
				],
				"CTmScore[]": [
					"Scores"
				],
				"Integer": [
					"CurPlayerCamera",
					"MapNbLaps",
					"NbLaps",
					"SpectatorTimeshift"
				],
				"Integer[]": [
					"ClanScores"
				],
				"Vec3": [
					"MapStartLinePos"
				],
				"Vec3[]": [
					"MapCheckpointPos",
					"MapFinishLinePos"
				]
			},
			"methods": []
		},
		"CTmMode": {
			"inherit": "CMode",
			"enums": {
				"ETmScoreSortOrder": [
					"TotalPoints",
					"BestRace_Time",
					"BestRace_Stunts",
					"BestRace_NbRespawns",
					"BestRace_CheckpointsProgress",
					"PrevRace_Time",
					"Name",
					"LadderRankSortValue"
				],
				"ETMRespawnBehaviour": [
					"Normal",
					"DoNothing",
					"GiveUpBeforeFirstCheckPoint",
					"AlwaysGiveUp"
				],
				"ETmRaceChronoBehaviour": [
					"Auto",
					"Hidden",
					"CountDown",
					"Normal"
				],
				"EPersonalGhost": [
					"Disabled",
					"Latest",
					"FastestRace"
				]
			},
			"props": {
				"Boolean": [
					"EnableBonusEvents",
					"EnableCheckpointBonus",
					"EnableCollisions",
					"EnableLegacyXmlRpcCallbacks",
					"EnableScaleCar",
					"EnableUniqueCamera",
					"HideOpponents",
					"IndependantLaps",
					"MapIsLapRace",
					"MedalGhost_ShowBronze",
					"MedalGhost_ShowGold",
					"MedalGhost_ShowSilver",
					"StuntModel_EnableCustomisation",
					"StuntModel_MP3Combo",
					"StuntModel_MP3Points",
					"StuntModel_UseStricterAngle",
					"UiDisableHelpMessage",
					"UiDisplayStuntsNames",
					"UiLaps",
					"UiRounds",
					"UiStuntsMode",
					"UseClans",
					"UseForcedClans"
				],
				"CTmModeEvent[]": [
					"PendingEvents"
				],
				"CTmPlayer[]": [
					"AllPlayers",
					"Players",
					"PlayersRacing",
					"PlayersWaiting",
					"Spectators"
				],
				"CTmScore[]": [
					"Scores"
				],
				"EPersonalGhost": [
					"PersonalGhost"
				],
				"ETMRespawnBehaviour": [
					"RespawnBehaviour"
				],
				"ETmRaceChronoBehaviour": [
					"UiRaceChrono"
				],
				"Integer": [
					"Clan1Score",
					"Clan2Score",
					"ClansNbTotal",
					"CutOffTimeLimit",
					"ForceMaxOpponents",
					"MapNbLaps",
					"NbLaps",
					"StuntModel_InterComboDelay",
					"StuntModel_InterComboDelayExtendPerPoint",
					"StuntModel_MinStuntDuration",
					"StuntModel_RespawnPenalty",
					"UiScoresPointsLimit"
				],
				"Integer[]": [
					"ClanScores",
					"ClansNbPlayers"
				],
				"Real": [
					"StuntModel_FigureRepeatMalus"
				],
				"Vec3": [
					"MapStartLinePos"
				],
				"Vec3[]": [
					"MapCheckpointPos",
					"MapFinishLinePos"
				]
			},
			"methods": [
				{
					"name": "GetPlayer",
					"returns": "CTmPlayer",
					"params": [
						{
							"identifier": "CUIConfig",
							"argument": "UI"
						}
					]
				},
				{
					"name": "GetPlayer",
					"returns": "CTmPlayer",
					"params": [
						{
							"identifier": "Text",
							"argument": "Login"
						}
					]
				},
				{
					"name": "PassOn",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "CTmModeEvent",
							"argument": "Event"
						}
					]
				},
				{
					"name": "Discard",
					"returns": "Void",
					"params": [
						{
							"identifier": "CTmModeEvent",
							"argument": "Event"
						}
					]
				},
				{
					"name": "SpawnPlayer",
					"returns": "Void",
					"params": [
						{
							"identifier": "CTmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Integer",
							"argument": "ClanNum"
						},
						{
							"identifier": "Integer",
							"argument": "RaceStartTime"
						}
					]
				},
				{
					"name": "UnspawnPlayer",
					"returns": "Void",
					"params": [
						{
							"identifier": "CTmPlayer",
							"argument": "Player"
						}
					]
				},
				{
					"name": "SetPlayerClan",
					"returns": "Void",
					"params": [
						{
							"identifier": "CTmPlayer",
							"argument": "Player"
						},
						{
							"identifier": "Integer",
							"argument": "ClanNum"
						}
					]
				},
				{
					"name": "Scores_Sort",
					"returns": "Void",
					"params": [
						{
							"identifier": "ETmScoreSortOrder",
							"argument": "SortOrder"
						}
					]
				},
				{
					"name": "Scores_Clear",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Ladder_ComputeRank",
					"returns": "Void",
					"params": [
						{
							"identifier": "ETmScoreSortOrder",
							"argument": "SortOrder"
						}
					]
				},
				{
					"name": "Cheats_Reset",
					"returns": "Void",
					"params": []
				},
				{
					"name": "RaceGhost_Add",
					"returns": "Ident",
					"params": [
						{
							"identifier": "CGhost",
							"argument": "Ghost"
						},
						{
							"identifier": "Boolean",
							"argument": "DisplayAsPlayerBest"
						}
					]
				},
				{
					"name": "RaceGhost_AddWithOffset",
					"returns": "Ident",
					"params": [
						{
							"identifier": "CGhost",
							"argument": "Ghost"
						},
						{
							"identifier": "Integer",
							"argument": "OffsetMs"
						}
					]
				},
				{
					"name": "RaceGhost_Add",
					"returns": "Ident",
					"params": [
						{
							"identifier": "CGhost",
							"argument": "Ghost"
						},
						{
							"identifier": "Boolean",
							"argument": "DisplayAsPlayerBest"
						},
						{
							"identifier": "Ident",
							"argument": "ModelId"
						}
					]
				},
				{
					"name": "RaceGhost_Remove",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "GhostInstId"
						}
					]
				},
				{
					"name": "RaceGhost_RemoveAll",
					"returns": "Void",
					"params": []
				},
				{
					"name": "RaceGhost_GetStartTime",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "GhostInstId"
						}
					]
				},
				{
					"name": "RaceGhost_GetCurCheckpoint",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "GhostInstId"
						}
					]
				},
				{
					"name": "RaceGhost_GetCheckpointTime",
					"returns": "Integer",
					"params": [
						{
							"identifier": "Ident",
							"argument": "GhostInstId"
						},
						{
							"identifier": "Integer",
							"argument": "Checkpoint"
						}
					]
				},
				{
					"name": "RaceGhost_IsReplayOver",
					"returns": "Boolean",
					"params": [
						{
							"identifier": "Ident",
							"argument": "GhostInstId"
						}
					]
				}
			]
		},
		"CTmModeEvent": {
			"inherit": "CNod",
			"enums": {
				"EType": [
					"Unknown",
					"StartLine",
					"WayPoint",
					"GiveUp",
					"Respawn",
					"Stunt",
					"OnPlayerAdded",
					"OnPlayerRemoved",
					"OnCommand"
				],
				"EStuntFigure": [
					"None",
					"StraightJump",
					"Flip",
					"BackFlip",
					"Spin",
					"Aerial",
					"AlleyOop",
					"Roll",
					"Corkscrew",
					"SpinOff",
					"Rodeo",
					"FlipFlap",
					"Twister",
					"FreeStyle",
					"SpinningMix",
					"FlippingChaos",
					"RollingMadness",
					"WreckNone",
					"WreckStraightJump",
					"WreckFlip",
					"WreckBackFlip",
					"WreckSpin",
					"WreckAerial",
					"WreckAlleyOop",
					"WreckRoll",
					"WreckCorkscrew",
					"WreckSpinOff",
					"WreckRodeo",
					"WreckFlipFlap",
					"WreckTwister",
					"WreckFreeStyle",
					"WreckSpinningMix",
					"WreckFlippingChaos",
					"WreckRollingMadness",
					"TimePenalty",
					"RespawnPenalty",
					"Grind",
					"Reset"
				]
			},
			"props": {
				"Boolean": [
					"CommandValueBoolean",
					"IsEndLap",
					"IsEndRace",
					"IsEpicLanding",
					"IsMasterJump",
					"IsMasterLanding",
					"IsPerfectLanding",
					"IsReverse",
					"IsStraight",
					"PlayerWasInLadderMatch",
					"PlayerWasSpawned"
				],
				"CTmPlayer": [
					"Player"
				],
				"CUser": [
					"User"
				],
				"EStuntFigure": [
					"StuntFigure"
				],
				"EType": [
					"Type"
				],
				"Ident": [
					"BlockId"
				],
				"Integer": [
					"Angle",
					"CheckpointInLap",
					"CheckpointInRace",
					"Combo",
					"CommandValueInteger",
					"LapTime",
					"NbRespawns",
					"Points",
					"RaceTime",
					"StuntsScore"
				],
				"Real": [
					"CommandValueReal",
					"Damages",
					"Distance",
					"Factor",
					"Speed"
				],
				"Text": [
					"CommandName",
					"CommandValueText"
				]
			},
			"methods": []
		},
		"CTmPlayer": {
			"inherit": "CPlayer",
			"enums": {},
			"props": {
				"Boolean": [
					"IsSpawned"
				],
				"CTmResult": [
					"CurLap",
					"CurRace"
				],
				"CTmScore": [
					"Score"
				],
				"Ident": [
					"ForceModelId"
				],
				"Integer": [
					"CurTriggerIndex",
					"CurrentClan",
					"CurrentNbLaps",
					"IdleDuration",
					"RaceStartTime"
				],
				"Real": [
					"AccelCoef",
					"AimPitch",
					"AimYaw",
					"ControlCoef",
					"GravityCoef",
					"Speed"
				],
				"Vec3": [
					"AimDirection",
					"Position",
					"Velocity"
				]
			},
			"methods": []
		},
		"CTmRaceClientEvent": {
			"inherit": "CNod",
			"enums": {
				"EType": [
					"Unknown",
					"WayPoint",
					"Respawn",
					"Turbo",
					"Horn",
					"Impact",
					"WaterSplash",
					"GlassSmash",
					"PartDetached",
					"StopEngine",
					"StartEngine",
					"AirSpawnRelease"
				]
			},
			"props": {
				"Boolean": [
					"IsEndLap",
					"IsEndRace"
				],
				"CTmMlPlayer": [
					"Player"
				],
				"EType": [
					"Type"
				],
				"Integer": [
					"CheckpointInLap",
					"CheckpointInRace",
					"LapTime",
					"NbRespawns",
					"RaceTime",
					"StuntsScore"
				]
			},
			"methods": []
		},
		"CTmResult": {
			"inherit": "CNod",
			"enums": {
				"ETmRaceResultCriteria": [
					"Time",
					"Stunts",
					"NbRespawns",
					"CheckpointsProgress",
					"None"
				]
			},
			"props": {
				"Integer": [
					"NbRespawns",
					"Score",
					"Time"
				],
				"Integer[]": [
					"Checkpoints"
				]
			},
			"methods": [
				{
					"name": "Compare",
					"returns": "Integer",
					"params": [
						{
							"identifier": "CTmResult",
							"argument": "Other"
						},
						{
							"identifier": "ETmRaceResultCriteria",
							"argument": "Criteria"
						}
					]
				}
			]
		},
		"CTmScore": {
			"inherit": "CScore",
			"enums": {},
			"props": {
				"CTmResult": [
					"BestLap",
					"BestRace",
					"PrevRace",
					"TempResult"
				],
				"Integer": [
					"Points",
					"PrevRaceDeltaPoints",
					"TeamNum"
				]
			},
			"methods": [
				{
					"name": "Clear",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CTrackManiaScore": {
			"inherit": "CTmScore",
			"enums": {},
			"props": {},
			"methods": []
		},
		"CUIConfig": {
			"inherit": "CNod",
			"enums": {
				"EUISequence": [
					"None",
					"Playing",
					"Intro",
					"Outro",
					"Podium",
					"CustomMTClip",
					"EndRound",
					"PlayersPresentation",
					"UIInteraction",
					"RollingBackgroundIntro",
					"CustomMTClip_WithUIInteraction"
				],
				"EUIStatus": [
					"None",
					"Normal",
					"Warning",
					"Error",
					"Official"
				],
				"EVisibility": [
					"None",
					"Normal",
					"Manual",
					"ForcedHidden",
					"ForcedVisible"
				],
				"ELabelsVisibility": [
					"None",
					"Never",
					"Always",
					"WhenInFrustum",
					"WhenVisible",
					"WhenInMiddleOfScreen"
				],
				"EAvatarVariant": [
					"Default",
					"Sad",
					"Happy"
				],
				"EUISound": [
					"Default",
					"Silence",
					"StartMatch",
					"EndMatch",
					"StartRound",
					"EndRound",
					"PhaseChange",
					"TieBreakPoint",
					"TiePoint",
					"VictoryPoint",
					"Capture",
					"TimeOut",
					"Notice",
					"Warning",
					"PlayerEliminated",
					"PlayerHit",
					"Checkpoint",
					"Finish",
					"Record",
					"ScoreProgress",
					"RankChange",
					"Bonus",
					"FirstHit",
					"Combo",
					"PlayersRemaining",
					"Custom1",
					"Custom2",
					"Custom3",
					"Custom4"
				],
				"ENoticeLevel": [
					"Default",
					"PlayerInfo",
					"PlayerWarning",
					"MapInfo",
					"MapWarning",
					"MatchInfo",
					"MatchWarning"
				],
				"EMessageDisplay": [
					"Chat",
					"Small",
					"Status",
					"Big"
				],
				"EObserverMode": [
					"Default",
					"Forced",
					"Forbidden",
					"Manual"
				],
				"EHudVisibility": [
					"Nothing",
					"Everything",
					"MarkersOnly",
					"Default"
				]
			},
			"props": {
				"Boolean": [
					"AltMenuNoCustomScores",
					"AltMenuNoDefaultScores",
					"ForceSpectator",
					"NoticesFilter_HideMapInfo",
					"NoticesFilter_HideMapWarning",
					"NoticesFilter_HideMatchInfo",
					"NoticesFilter_HideMatchWarning",
					"NoticesFilter_HidePlayerInfo",
					"NoticesFilter_HidePlayerInfoIfNotMe",
					"NoticesFilter_HidePlayerWarning",
					"NoticesFilter_HidePlayerWarningIfNotMe",
					"OverlayChatHideAvatar",
					"OverlayHide321Go",
					"OverlayHideBackground",
					"OverlayHideChat",
					"OverlayHideCheckPointList",
					"OverlayHideCheckPointTime",
					"OverlayHideChrono",
					"OverlayHideConsumables",
					"OverlayHideCountdown",
					"OverlayHideCrosshair",
					"OverlayHideEndMapLadderRecap",
					"OverlayHideGauges",
					"OverlayHideMapInfo",
					"OverlayHideMultilapInfos",
					"OverlayHideNotices",
					"OverlayHideOpponentsInfo",
					"OverlayHidePersonnalBestAndRank",
					"OverlayHidePosition",
					"OverlayHideRoundScores",
					"OverlayHideSpectatorControllers",
					"OverlayHideSpectatorInfos",
					"OverlayHideSpeedAndDist",
					"OverlayScoreSummary",
					"ScoreTableOnlyManialink",
					"ScreenIn3dHideScoreSummary",
					"ScreenIn3dHideVersus",
					"UISequenceIsCompleted",
					"UISequence_CanSkipIntroMT"
				],
				"CUILayer[]": [
					"UILayers"
				],
				"EAvatarVariant": [
					"BigMessageAvatarVariant"
				],
				"EHudVisibility": [
					"LabelsVisibility"
				],
				"ELabelsVisibility": [
					"AlliesLabelsVisibility",
					"OpposingTeamLabelsVisibility",
					"TeamLabelsVisibility"
				],
				"ENoticeLevel": [
					"NoticesFilter_LevelToShowAsBigMessage"
				],
				"EObserverMode": [
					"SpectatorObserverMode"
				],
				"EUISequence": [
					"UISequence"
				],
				"EUISound": [
					"BigMessageSound"
				],
				"EUIStatus": [
					"UIStatus"
				],
				"EVisibility": [
					"AlliesLabelsShowGauges",
					"AlliesLabelsShowNames",
					"OpposingTeamLabelsShowGauges",
					"OpposingTeamLabelsShowNames",
					"ScoreTableVisibility",
					"SmallScoreTableVisibility",
					"TeamLabelsShowGauges",
					"TeamLabelsShowNames"
				],
				"Ident": [
					"ScoreSummary_Player1",
					"ScoreSummary_Player2",
					"SpectatorAutoTarget",
					"SpectatorForcedTarget"
				],
				"Integer": [
					"AlliesLabelsMaxCount",
					"BigMessageSoundVariant",
					"CountdownEndTime",
					"GaugeClan",
					"OverlayChatLineCount",
					"ScoreSummary_MatchPoints1",
					"ScoreSummary_MatchPoints2",
					"ScoreSummary_Points1",
					"ScoreSummary_Points2",
					"ScoreSummary_RoundPoints1",
					"ScoreSummary_RoundPoints2",
					"SpectatorForceCameraType",
					"SpectatorForcedClan",
					"UISequence_CustomMTRefTime"
				],
				"Real": [
					"GaugeRatio",
					"ScoreSummary_Gauge1",
					"ScoreSummary_Gauge2",
					"SpectatorCamAutoLatitude",
					"SpectatorCamAutoLongitude",
					"SpectatorCamAutoRadius"
				],
				"Text": [
					"BigMessage",
					"BigMessageAvatarLogin",
					"GaugeMessage",
					"ManialinkPage",
					"MarkersXML",
					"ScoreTable",
					"SmallScoreTable",
					"StatusMessage",
					"UISequence_CustomMTClip",
					"UISequence_PodiumPlayersLose",
					"UISequence_PodiumPlayersWin"
				],
				"Vec2": [
					"CountdownCoord",
					"OverlayChatOffset"
				]
			},
			"methods": [
				{
					"name": "SendChat",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Text"
						}
					]
				},
				{
					"name": "SendNotice",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Text"
						},
						{
							"identifier": "ENoticeLevel",
							"argument": "Level"
						},
						{
							"identifier": "CUser",
							"argument": "Avatar"
						},
						{
							"identifier": "EAvatarVariant",
							"argument": "AvatarVariant"
						},
						{
							"identifier": "EUISound",
							"argument": "Sound"
						},
						{
							"identifier": "Integer",
							"argument": "SoundVariant"
						}
					]
				},
				{
					"name": "GetLayerManialinkAction",
					"returns": "Text",
					"params": [
						{
							"identifier": "CUILayer",
							"argument": "Layer"
						}
					]
				},
				{
					"name": "ClearLayerManialinkAction",
					"returns": "Void",
					"params": [
						{
							"identifier": "CUILayer",
							"argument": "Layer"
						}
					]
				},
				{
					"name": "QueueMessage",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Duration"
						},
						{
							"identifier": "Integer",
							"argument": "Priority"
						},
						{
							"identifier": "EMessageDisplay",
							"argument": "Level"
						},
						{
							"identifier": "Text",
							"argument": "Message"
						},
						{
							"identifier": "CUser",
							"argument": "Avatar"
						},
						{
							"identifier": "EAvatarVariant",
							"argument": "AvatarVariant"
						},
						{
							"identifier": "EUISound",
							"argument": "Sound"
						},
						{
							"identifier": "Integer",
							"argument": "SoundVariant"
						}
					]
				},
				{
					"name": "QueueMessage",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Duration"
						},
						{
							"identifier": "Integer",
							"argument": "Priority"
						},
						{
							"identifier": "EMessageDisplay",
							"argument": "Level"
						},
						{
							"identifier": "Text",
							"argument": "Message"
						},
						{
							"identifier": "EUISound",
							"argument": "Sound"
						},
						{
							"identifier": "Integer",
							"argument": "SoundVariant"
						}
					]
				},
				{
					"name": "QueueMessage",
					"returns": "Void",
					"params": [
						{
							"identifier": "Integer",
							"argument": "Duration"
						},
						{
							"identifier": "Integer",
							"argument": "Priority"
						},
						{
							"identifier": "EMessageDisplay",
							"argument": "Level"
						},
						{
							"identifier": "Text",
							"argument": "Message"
						}
					]
				},
				{
					"name": "ClearMessages",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CUIConfigEvent": {
			"inherit": "CBaseEvent",
			"enums": {
				"EType": [
					"Unknown",
					"OnModuleCustomEvent",
					"OnModuleShowRequest",
					"OnModuleHideRequest",
					"OnModuleStorePurchase",
					"OnModuleInventoryDrop",
					"OnModuleInventoryEquip",
					"OnLayerCustomEvent"
				],
				"EModuleType": [
					"Undefined",
					"Hud",
					"Inventory",
					"Store",
					"ScoresTable",
					"Equipment",
					"MenuBase",
					"MenuPage",
					"Chrono",
					"SpeedMeter",
					"PlayerState",
					"TeamState"
				]
			},
			"props": {
				"CUIConfig": [
					"UI"
				],
				"CUILayer": [
					"CustomEventLayer"
				],
				"EModuleType": [
					"ModuleType"
				],
				"EType": [
					"Type"
				],
				"Integer": [
					"Quantity"
				],
				"Text": [
					"CustomEventType",
					"ItemUrl",
					"Param1"
				],
				"Text[]": [
					"CustomEventData",
					"Param2"
				]
			},
			"methods": []
		},
		"CUIConfigMgr": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"HoldLoadingScreen"
				],
				"CUIConfig": [
					"UIAll"
				],
				"CUIConfig[]": [
					"UI"
				],
				"CUIConfigEvent[]": [
					"PendingEvents"
				],
				"CUILayer[]": [
					"UILayers",
					"UIReplayLayers"
				],
				"Integer": [
					"UISequenceMaxDuration"
				]
			},
			"methods": [
				{
					"name": "ResetAll",
					"returns": "Void",
					"params": []
				},
				{
					"name": "GetUI",
					"returns": "CUIConfig",
					"params": [
						{
							"identifier": "CPlayer",
							"argument": "Player"
						}
					]
				},
				{
					"name": "GetUI",
					"returns": "CUIConfig",
					"params": [
						{
							"identifier": "CUser",
							"argument": "User"
						}
					]
				},
				{
					"name": "GetUI",
					"returns": "CUIConfig",
					"params": [
						{
							"identifier": "CClient",
							"argument": "Client"
						}
					]
				},
				{
					"name": "UILayerCreate",
					"returns": "CUILayer",
					"params": []
				},
				{
					"name": "UILayerDestroy",
					"returns": "Void",
					"params": [
						{
							"identifier": "CUILayer",
							"argument": "Layer"
						}
					]
				},
				{
					"name": "UILayerDestroyAll",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CUILayer": {
			"inherit": "CNod",
			"enums": {
				"EUILayerType": [
					"Normal",
					"ScoresTable",
					"ScreenIn3d",
					"AltMenu",
					"Markers",
					"CutScene",
					"InGameMenu",
					"EditorPlugin",
					"ManiaplanetPlugin",
					"ManiaplanetMenu",
					"LoadingScreen"
				],
				"EUILayerAnimation": [
					"None",
					"DownFast",
					"DownSlow",
					"LeftFast",
					"LeftSlow",
					"RightFast",
					"RightSlow",
					"ScaleFast",
					"ScaleSlow",
					"UpFast",
					"UpSlow"
				]
			},
			"props": {
				"Boolean": [
					"AnimInProgress",
					"IsLocalPageScriptRunning",
					"IsVisible"
				],
				"CMlPage": [
					"LocalPage"
				],
				"EUILayerAnimation": [
					"InAnimation",
					"InOutAnimation",
					"OutAnimation"
				],
				"EUILayerType": [
					"Type"
				],
				"Text": [
					"AttachId",
					"ManialinkPage"
				]
			},
			"methods": []
		},
		"CUser": {
			"inherit": "CNod",
			"enums": {
				"EEchelon": [
					"None",
					"Bronze1",
					"Bronze2",
					"Bronze3",
					"Silver1",
					"Silver2",
					"Silver3",
					"Gold1",
					"Gold2",
					"Gold3"
				],
				"ETagType": [
					"Bronze",
					"Silver",
					"Gold",
					"Nadeo"
				],
				"EStereoDisplayMode": [
					"None",
					"Stereo",
					"HMD"
				],
				"EMuteSetting": [
					"Auto",
					"Muted",
					"NotMuted"
				]
			},
			"props": {
				"Boolean": [
					"HackCamHmdDisabled",
					"IsBeginner",
					"IsConnectedToMasterServer",
					"IsFakeUser",
					"VoiceChat_IsMuted",
					"VoiceChat_IsSpeaking",
					"VoiceChat_Supported"
				],
				"EEchelon": [
					"Echelon"
				],
				"EMuteSetting": [
					"VoiceChat_MuteSetting"
				],
				"EStereoDisplayMode": [
					"StereoDisplayMode"
				],
				"ETagType[]": [
					"Tags_Type"
				],
				"Integer": [
					"FameStars",
					"LadderRank",
					"LadderTotal",
					"NextEchelonPercent"
				],
				"Integer[]": [
					"Tags_Favored_Indices"
				],
				"Real": [
					"LadderPoints",
					"ReferenceScore"
				],
				"Text": [
					"AvatarDisplayName",
					"AvatarUrl",
					"BroadcastTVLogin",
					"ClubLink",
					"CountryFlagUrl",
					"Description",
					"HornDisplayName",
					"LadderZoneFlagUrl",
					"LadderZoneName",
					"Language",
					"Login",
					"Name",
					"SteamUserId",
					"ZoneFlagUrl",
					"ZonePath"
				],
				"Text[]": [
					"AlliesConnected",
					"Tags_Comments",
					"Tags_Deliverer",
					"Tags_Id"
				],
				"Vec3": [
					"Color"
				]
			},
			"methods": []
		},
		"CUserV2Manager": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CTaskResult[]": [
					"TaskResults"
				],
				"CUserV2Profile": [
					"MainUserProfile"
				]
			},
			"methods": [
				{
					"name": "TaskResult_Release",
					"returns": "Void",
					"params": [
						{
							"identifier": "Ident",
							"argument": "TaskId"
						}
					]
				},
				{
					"name": "GetGroups",
					"returns": "CTaskResult_StringIntList",
					"params": [
						{
							"identifier": "Ident",
							"argument": "UserId"
						}
					]
				}
			]
		},
		"CUserV2Profile": {
			"inherit": "CNod",
			"enums": {
				"EMapEditorMode": [
					"Ask",
					"Advanced"
				],
				"ECustomPlayerModels": [
					"All",
					"OnlyTextures",
					"None"
				],
				"EInputMouseReleaseKey": [
					"LeftAlt",
					"RightAlt",
					"LeftCtrl",
					"RightCtrl"
				]
			},
			"props": {
				"Boolean": [
					"Account_AcceptNews",
					"Account_EnableAutoConnect",
					"Audio_DontMuteWhenAppUnfocused",
					"CanChangeAvatar",
					"CanChangeGroups",
					"CanChangeNickName",
					"CanChangePassword",
					"CanChangeSkin",
					"CanChangeZone",
					"Custom_EnableAvatars",
					"Custom_EnableChat",
					"Custom_EnableUnlimitedHorns",
					"Inputs_MouseLookInvertY",
					"Interface_AllyEnableCustomColor",
					"Interface_BeaconUseProfileColor",
					"Interface_CrosshairEnableCustomColor",
					"Interface_OppoEnableCustomColor",
					"Online_AutoSaveReplay",
					"Online_SaveRoundReplaysSeparately",
					"Steam_OpenLinksInSteam",
					"Steam_SynchonizeWorkshopFiles",
					"Title_IsForbiddenWithParentalLock"
				],
				"CVehicleSettings[]": [
					"Inputs_Vehicles"
				],
				"ECustomPlayerModels": [
					"Custom_PlayerModels"
				],
				"EInputMouseReleaseKey": [
					"Inputs_MouseReleaseKey"
				],
				"EMapEditorMode": [
					"Editors_MapEditorMode"
				],
				"Real": [
					"Audio_MasterMusicVolume",
					"Audio_MasterSoundVolume",
					"Inputs_MouseAccel",
					"Inputs_MouseScaleFreeLook",
					"Inputs_MouseScaleY",
					"Inputs_MouseSensitivityDefault",
					"Inputs_MouseSensitivityDefault_Raw",
					"Inputs_MouseSensitivityLaser",
					"Inputs_MouseSensitivityLaser_Raw",
					"Interface_AllyLinearHue",
					"Interface_BeaconDuration",
					"Interface_BeaconOpacity",
					"Interface_BeaconSize",
					"Interface_CrosshairLinearHue",
					"Interface_CrosshairOpacity",
					"Interface_CrosshairSaturation",
					"Interface_CrosshairSize",
					"Interface_OppoLinearHue",
					"Interface_PlayerShieldScale",
					"User_HornPitch",
					"User_LightTrailHue"
				],
				"Text": [
					"Account_EMail",
					"Account_Name",
					"Interface_CrosshairName",
					"User_ClubLinkUrl",
					"User_Description"
				]
			},
			"methods": [
				{
					"name": "Account_ResetChanges",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CVehicleSettings": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"Boolean": [
					"AnalogSteerV2"
				],
				"Real": [
					"AnalogDeadZone",
					"AnalogSensitivity",
					"CenterSpringIntensity",
					"RumbleIntensity"
				],
				"Text": [
					"ModelDisplayName",
					"ModelName",
					"SkinName"
				]
			},
			"methods": []
		},
		"CVideo": {
			"inherit": "CNod",
			"enums": {
				"ETextureFilter": [
					"Default",
					"Point"
				]
			},
			"props": {
				"Boolean": [
					"AutoProcessing",
					"DownloadInProgress",
					"IsLooping",
					"IsPlaying",
					"IsProcessing"
				],
				"CImage": [
					"Image"
				],
				"ETextureFilter": [
					"TextureFilter"
				],
				"Real": [
					"PlayCursor",
					"PlayLength"
				]
			},
			"methods": [
				{
					"name": "BeginProcessing",
					"returns": "Void",
					"params": []
				},
				{
					"name": "EndProcessing",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Play",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Pause",
					"returns": "Void",
					"params": []
				},
				{
					"name": "Stop",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CVideoManager": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CVideo[]": [
					"Videos"
				]
			},
			"methods": [
				{
					"name": "CreateVideo",
					"returns": "CVideo",
					"params": [
						{
							"identifier": "Text",
							"argument": "Url"
						},
						{
							"identifier": "Boolean",
							"argument": "IsLooping"
						},
						{
							"identifier": "Boolean",
							"argument": "AutoProcessing"
						}
					]
				},
				{
					"name": "DestroyVideo",
					"returns": "Void",
					"params": [
						{
							"identifier": "CVideo",
							"argument": "Video"
						}
					]
				}
			]
		},
		"CXmlRpc": {
			"inherit": "CNod",
			"enums": {},
			"props": {
				"CXmlRpcEvent[]": [
					"PendingEvents"
				]
			},
			"methods": [
				{
					"name": "SendCallback",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Param1"
						},
						{
							"identifier": "Text",
							"argument": "Param2"
						}
					]
				},
				{
					"name": "SendCallbackArray",
					"returns": "Void",
					"params": [
						{
							"identifier": "Text",
							"argument": "Type"
						},
						{
							"identifier": "Text[]",
							"argument": "Data"
						}
					]
				},
				{
					"name": "SendCallback_BeginRound",
					"returns": "Void",
					"params": []
				},
				{
					"name": "SendCallback_EndRound",
					"returns": "Void",
					"params": []
				}
			]
		},
		"CXmlRpcEvent": {
			"inherit": "CBaseConstEvent",
			"enums": {
				"EType": [
					"Unknown",
					"Callback",
					"CallbackArray"
				]
			},
			"props": {
				"EType": [
					"Type"
				],
				"Text": [
					"Param1",
					"Param2",
					"ParamArray1"
				],
				"Text[]": [
					"ParamArray2"
				]
			},
			"methods": []
		},
		"SHudModule": {
			"inherit": "",
			"enums": {},
			"props": {
				"Real": [
					"PosX",
					"PosY",
					"Scale",
					"ZIndex"
				],
				"Text": [
					"ModuleName"
				]
			},
			"methods": []
		}
	}
}
